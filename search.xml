<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Webpack</title>
      <link href="/2022/05/16/webpack/"/>
      <url>/2022/05/16/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>问：什么是Webpack？</p><p>答：本质上来讲，webpack是一个现代的Javascript应用的静态<strong>模块打包</strong>工具，能在模块化开发时帮助我们处理模块间的依赖关系。</p><hr><p><strong>和grunt/gulp的对比</strong></p><p>问：grunt/gulp是什么？</p><p>答：grunt/gulp的核心是Task，我们可以配置一系列的task，并且定义task要处理的事物，如ES6、ts转化，图片压缩，scss转成css……之后们让grunt/gulp来依次执行这些task，而且让整个流程自动化，所以grunt/gulp也被称为前端自动化任务管理工具。</p><hr><p>问：什么时候用grunt/gulp？</p><p>答：1、工程模块依赖简单。2、只需要进行简单的合并、压缩。</p><hr><p>问：grunt/gulp和webpack有什么不同？</p><p>答：grunt/gulp更加强调的是前端流程的自动化，模块化不是它的核心。webpack更加强调模块化的开发管理，而文件压缩合并、预处理等功能是他附带的功能。</p><h2 id="webpack打包"><a href="#webpack打包" class="headerlink" title="webpack打包"></a>webpack打包</h2><p>一般webpack的目录结构有：</p><ul><li>webpack<ul><li>dist ——用来存放打包好的文件，用于网站发布<ul><li>bundle.js——打包生成的文件</li></ul></li><li>src——用于开发<ul><li>mathUtils.js——存放函数，并且使用模块化的方式导出</li><li>main.js——导入模块化后的方法，并且使用</li></ul></li><li>index.html——用script标签引入打包后生成的文件</li></ul></li></ul><p>打包命令：webpack 要打包的文件地址 打包成的目标文件地址</p><p>在打包时只需要打包入口文件，他会自动检测其是否导入了哪些模块并且一同进行打包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PS D:\workplace\web\Vue-v2\Webpack的使用\Webpack起步&gt; webpack .&#x2F;src&#x2F;main.js .&#x2F;dist&#x2F;bundle.jsHash: 9214f2a6e6afd2a80627Version: webpack 3.6.0Time: 46ms    Asset     Size  Chunks             Chunk Namesbundle.js  2.79 kB       0  [emitted]  main   [0] .&#x2F;src&#x2F;main.js 96 bytes &#123;0&#125; [built]   [1] .&#x2F;src&#x2F;mathUtils.js 148 bytes &#123;0&#125; [built]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在打包完后直接引入生成的文件即可。</p><p>支持CommonJS和ES6的模块化语法。</p><h2 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h2><p>在项目根目录下创建webpack.config.js文件（该名称固定）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//webpack.config.js</span><span class="token comment">//导入path依赖，用于动态获取绝对路径</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//要打包的目标文件</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>    <span class="token comment">//要生成的目标文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">//动态获取绝对路径</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想要导入path依赖需要先使用<strong>npm init</strong>命令来配置package.json</p><p>配置完以上两种文件后，就可以直接在项目根目录下直接使用<strong>webpack</strong>命令来对项目进行打包，省去了后面写路径的步骤</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F;package.json&#123;  &quot;name&quot;: &quot;testwebpack&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;main&quot;: &quot;index.js&quot;,    &#x2F;&#x2F;配置npm指令  &quot;scripts&quot;: &#123;    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,    &quot;build&quot;:&quot;webpack&quot;  &#125;,  &quot;author&quot;: &quot;&quot;,  &quot;license&quot;: &quot;ISC&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以在package.json中配置指令，当我们使用<strong>npm run 指令名</strong>时，就可以直接执行该指令名后面所对应的指令，如我们在上方的文件中配置了</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;scripts&quot;: &#123;    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,    &quot;build&quot;:&quot;webpack&quot;  &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当我们想执行webpack指令时，可以用npm run build来代替。</p><p><strong>在终端中执行webpack指令会默认调用全局的webpack依赖，而使用在package.json中配置的命令会调用项目中安装的依赖。</strong></p><hr><p>问：为什么要在package.json中配置对应的指令来代替webpack指令？</p><p>答：在package.json中配置的指令，会优先查找局部的也就是本项目依赖的webpack包，再去查找全局的webpack包，能有效避免由于项目依赖的webpack包的版本与全局拥有的webpack包的版本不同而产生指令不同等一系列问题。</p><hr><p>在项目目录下使用<strong>npm install <a href="mailto:&#119;&#101;&#98;&#112;&#97;&#x63;&#107;&#x40;&#x33;&#46;&#54;&#x2e;&#x30;">&#119;&#101;&#98;&#112;&#97;&#x63;&#107;&#x40;&#x33;&#46;&#54;&#x2e;&#x30;</a> –save-dev</strong>指令可以安装局部的webpack包，–save-dev参数表示此依赖为开发时依赖</p><h2 id="loader配置使用"><a href="#loader配置使用" class="headerlink" title="loader配置使用"></a>loader配置使用</h2><p>loader是webpack中非常核心的一个概念，能帮助我们完成TS、ES6转ES5，scss、less转css，jsx、vue文件转js文件等一些转化。</p><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><ol><li>通过npm安装需要使用的loader。</li><li>在webpack.config.js中的module关键字下进行配置。</li></ol><pre class="line-numbers language-none"><code class="language-none">npm install --save-dev css-loadernpm install --save-dev style-loader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//配置loader</span>    <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">//匹配文件后缀</span>                <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token comment">//调用loader的顺序</span>                <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ol><li>css-loader只负责css文件的加载</li><li>style-loader负责文件样式转成dom样式</li><li>使用多个loader时，使用顺序从右到左，配置顺序不可随意调换！</li></ol><p>若装了loader后依旧不生效，可能是loader版本与webpack版本不匹配</p><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><ol><li><p>编写less文件</p><pre class="line-numbers language-less" data-language="less"><code class="language-less">&#x2F;&#x2F;special.less@fontSize:50px;body&#123;    font-size: @fontSize;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导入less文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//main.js</span><span class="token comment">//依赖less文件</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./css/special.less'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装loader</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;less和lessloader的版本根据需要可自选npm install --save-dev less-loader@4.1.0 less@3.9.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置loader</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">const path &#x3D; require(&#39;path&#39;);module.exports &#x3D; &#123;    entry:&#39;.&#x2F;src&#x2F;main.js&#39;,    output:&#123;        path:path.resolve(__dirname,&#39;dist&#39;),        filename:&#39;bundle.js&#39;    &#125;,    &#x2F;&#x2F;配置loader    module:&#123;        rules:[            &#123;                &#x2F;&#x2F;匹配less后缀的文件                test:&#x2F;\.less$&#x2F;,                &#x2F;&#x2F;使用对象的方式传入loader配置，可以为他传入其他参数                &#x2F;&#x2F;依赖调用顺序从下往上                use:[                    &#123;                        loader:&#39;style-loader&#39;                    &#125;,                    &#123;                        loader:&#39;css-loader&#39;                    &#125;,                    &#123;                        loader:&#39;less-loader&#39;                    &#125;                ]            &#125;        ]    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用npm run build指令打包项目</p></li></ol><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ol><li><p>在src目录下创建img文件夹用于存放文件</p></li><li><p>在想要图片生效的地方使用url引入文件</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">//normal.cssbody</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'../img/timg.jpeg'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装相关依赖</p><pre class="line-numbers language-none"><code class="language-none">npm install url-loader --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置loader</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//配置loader</span>    <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span><span class="token comment">//匹配文件名后缀</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg|gif|jpeg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token comment">//用对象配置依赖</span>                  <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                    <span class="token comment">//限制图片大小为81920k（80kb）</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                      <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">8192</span><span class="token operator">*</span><span class="token number">10</span>                    <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>              <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>当加载图片时大小小于limit的限制时，会将图片编译成base64字符串形式</p></li><li><p>当加载图片的大小大于limit的限制时，就需要使用file-loader进行加载</p><ul><li>```<br>npm install –save-dev file-loader<pre class="line-numbers language-none"><code class="language-none">- 由于用过file-loader打包后会在我们output指定的路径中生成一张新的图片，我们需要指定此图片所在的路径，可以在output中添加配置属性publicPath，此时就可以指定打包完后的图片的路径，在调用时会自动为图片加上dist&#x2F;的前缀  &#96;&#96;&#96;js  const path &#x3D; require(&#39;path&#39;);    module.exports &#x3D; &#123;      entry:&#39;.&#x2F;src&#x2F;main.js&#39;,      output:&#123;          path:path.resolve(__dirname,&#39;dist&#39;),          filename:&#39;bundle.js&#39;,          publicPath:&#39;dist&#x2F;&#39;      &#125;,      &#x2F;&#x2F;配置loader      module:&#123;          rules:[              &#123;                  test: &#x2F;\.(png|jpg|gif|jpeg)$&#x2F;i,                  use: [                    &#123;                      loader: &#39;url-loader&#39;,                      options: &#123;                        limit: 8192*10,                        &#x2F;&#x2F;限制file-loader生成的文件名（在img文件夹中+原名+8位hash值+拓展名）                        name:&#39;img&#x2F;[name].[hash:8].[ext]&#39;                      &#125;                    &#125;                  ]                &#125;          ]      &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>使用npm run build指令打包项目</p></li></ol><h3 id="ES6转ES5"><a href="#ES6转ES5" class="headerlink" title="ES6转ES5"></a>ES6转ES5</h3><pre class="line-numbers language-none"><code class="language-none">npm install --save-dev babel-loader babel-core babel-preset-es2015<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>webpack.config.js配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token comment">//排除文件夹</span>        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>            <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack插件"><a href="#webpack插件" class="headerlink" title="webpack插件"></a>webpack插件</h2><p>webpack插件（plugin）是对webpack现有功能的各种拓展，如打包优化、文件压缩等。</p><p>问：loader和plugin的区别是什么？</p><p>答：loader是一个转换器，主要用于转换某些类型的模块；plugin是扩展器，他是对webpack本身的拓展。</p><h3 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h3><ol><li>通过npm安装需要使用的plugins（某些webpack已经内置的插件无需安装）</li><li>在webpack.config.js中的plugins中配置插件</li></ol><h3 id="注释插件"><a href="#注释插件" class="headerlink" title="注释插件"></a>注释插件</h3><p><strong>BannerPlugin</strong></p><p>此插件是webpack内置插件，能在打包项目后自动为我们添加上注释，来表示版权等信息</p><p>使用步骤：</p><ol><li><p>在webpack.config.js中引入webpack</p></li><li><p>在module.exports下配置plugins属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">…………<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> ………    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'吴炜瀚记'</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="主页文件生成"><a href="#主页文件生成" class="headerlink" title="主页文件生成"></a>主页文件生成</h3><p><strong>html-webpack-plugin</strong></p><p>此插件能让我们在打包时在发布项目的dist文件夹中自动生成一个index.html文件</p><p>使用步骤：</p><ol><li><p>使用npm安装相关插件</p><pre class="line-numbers language-none"><code class="language-none">npm install --save-dev html-webpack-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在webpack.config.js中配置</p><ol><li><p>引入插件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在plugins属性中配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'吴炜瀚记'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><p>之后打包文件时就会在dist文件夹中自动生成一个index.html文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Webpack App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们生成的index.html文件在dist文件夹内，因此我们在这个文件夹内的index.html文件的路径上可以不用再加上**./dist**，可以将output中的publicPath属性去掉</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span><span class="token punctuation">,</span>        <span class="token comment">//publicPath:'dist/'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：当我们去掉此配置属性，我们在dist文件夹外的index.html文件中的图片会失效，因为在url中少了这个前缀</p><p>但是在此时生成的文件夹中，还缺少一个挂载了Vue实例的div，我们可以通过给调用生成index.html的插件方法传入参数来自动生成这个div</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'吴炜瀚记'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"index.html"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="压缩JS"><a href="#压缩JS" class="headerlink" title="压缩JS"></a>压缩JS</h3><p><strong>uglifyjs-webpack-plugin</strong></p><p>该插件能压缩Javascript代码来提高代码的性能</p><p>使用步骤：</p><ol><li><p>使用npm安装插件</p><pre class="line-numbers language-none"><code class="language-none">npm install uglifyjs-webpack-plugin --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在webpack.config.js中配置插件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">………<span class="token comment">//引入插件</span><span class="token keyword">const</span> UglifyjsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    ……    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        ……    <span class="token comment">//调用方法</span>        <span class="token keyword">new</span> <span class="token class-name">UglifyjsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h2><p>我们每一次进行项目测试时，都需要输入npm run build 来构建项目，这样子会大大影响我们的开发效率</p><p>webpack提供了一个可选的基于node.js搭建、内部使用express框架的本地开发服务器，可以实现浏览器自动刷新显示我们修改后的结果</p><p>其原理是将我们修改后的代码保存到内存去而不是直接生成到硬盘中，在内存中读取的速度远大于从硬盘中读取</p><p>搭建步骤：</p><ol><li><p>npm下载服务器所需文件</p><pre class="line-numbers language-none"><code class="language-none">npm install webpack-dev-server --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置webpack.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">………module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    ………    <span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">//提供服务的文件夹</span>        <span class="token literal-property property">contentBase</span><span class="token operator">:</span><span class="token string">'./dist'</span><span class="token punctuation">,</span>        <span class="token comment">//端口号</span>        <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">8010</span><span class="token punctuation">,</span>        <span class="token comment">//页面实时刷新</span>        <span class="token literal-property property">inline</span><span class="token operator">:</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>此时我们可以输入命令webpack-dev-server来运行这个服务器，但此时我们在命令行输入系统会优先查找全局的相关文件，而我们仅安装在了项目中，所以我们还需要在package.json中配置script命令，来使他在查找文件时优先查找项目中的相关文件</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F;--open表示服务器启动时自动打开页面&quot;dev&quot;: &quot;webpack-dev-server --open&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置完后，我们在开发时就可以使用npm run dev指令来进行开发测试，在我们开发完毕后，才使用npm run build进行打包</p></li></ol><h2 id="配置文件分离"><a href="#配置文件分离" class="headerlink" title="配置文件分离"></a>配置文件分离</h2><p>我们在开发时和项目发布时需要的一些配置是不同的，有的配置及其文件在项目发布后是不需要的，有的配置在开发阶段就加上会影响我们对代码的调试，因此我们就需要把他们进行分离。</p><p>分离步骤：</p><ol><li><p>在项目目录下创建build文件夹，里面有三个文件用于存放依赖配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//base.config.js</span><span class="token comment">//存放公共依赖</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>    <span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span><span class="token string">'style-loader'</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span><span class="token string">'css-loader'</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span><span class="token string">'less-loader'</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpg|gif|jpeg)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                      <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">8192</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span>                      <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'img/[name].[hash:8].[ext]'</span>                    <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'vue-loader'</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">resolve</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">extensions</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">'.css'</span><span class="token punctuation">,</span><span class="token string">'.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">alias</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">'vue$'</span><span class="token operator">:</span><span class="token string">'vue/dist/vue.esm.js'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'吴炜瀚记'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"index.html"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//dev.config.js</span><span class="token comment">//存放开发时依赖</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">contentBase</span><span class="token operator">:</span><span class="token string">'./dist'</span><span class="token punctuation">,</span>        <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">8010</span><span class="token punctuation">,</span>        <span class="token literal-property property">inline</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//prod.config.js</span><span class="token comment">//存放生产时依赖</span><span class="token keyword">const</span> UglifyjsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">UglifyjsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装配置文件合并依赖</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install webpack<span class="token operator">-</span>merge <span class="token operator">--</span>save<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将开发时依赖和生产时依赖进行合并</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//prod.config.js</span><span class="token comment">//存放生产时依赖</span><span class="token keyword">const</span> UglifyjsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入合并依赖</span><span class="token keyword">const</span> WebpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入公共依赖</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./base.config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">WebpackMerge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">UglifyjsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//dev.config.js</span><span class="token comment">//存放开发时依赖</span><span class="token comment">//引入合并依赖</span><span class="token keyword">const</span> WebpackMerge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入公共依赖</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./base.config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">WebpackMerge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">contentBase</span><span class="token operator">:</span><span class="token string">'./dist'</span><span class="token punctuation">,</span>        <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">8010</span><span class="token punctuation">,</span>        <span class="token literal-property property">inline</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分离完配置可以将之前的webpack.config.js删除，但此时package.json的指令会提示找不到，需要我们为其指定运行的配置文件地址</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;scripts&quot;: &#123;    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,    &quot;build&quot;: &quot;webpack --config .&#x2F;build&#x2F;prod.config.js&quot;,    &quot;dev&quot;: &quot;webpack-dev-server --open --config .&#x2F;build&#x2F;dev.config.js&quot;  &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：此时项目打包后的路径因为是动态获取的，会因为我们改变了配置文件的位置而改变，因此我们需要更改output中的path</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">output:&#123;    &#x2F;&#x2F;生成地址往前退一个文件夹，将distw    path:path.resolve(__dirname,&#39;..&#x2F;dist&#39;),    filename:&#39;bundle.js&#39;,&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="路径别名"><a href="#路径别名" class="headerlink" title="路径别名"></a>路径别名</h2><p>我们在移动一个文件时，里面如果有大量的路径引用的话，我们移动后会非常的麻烦，此时我们只需要给引用的目标资源文件所处的文件夹起一个别名，在我们移动时，这个路径会自动锁定到该资源所处的文件夹，就不需要修改资源路径了</p><p>设置方法：</p><ol><li><p>在webpack.base.conf.js中添加resolve的alias中的属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">……<span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//vuecli2需要将路径写全，vuecli3后就可以在下面的别名中使用上面起完了的别名</span>      <span class="token string-property property">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string-property property">'assets'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/assets'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string-property property">'components'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/components'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引入时可以用起的别名代替路径</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//import MainTabBar from '../components/MainTabBar'</span><span class="token keyword">import</span> MainTabBar <span class="token keyword">from</span> <span class="token string">'components/MainTabBar'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--若是图片引用别名需要在路径前面加上 ~ &lt;img slot="item-icon" src="../assets/img/tabbar/home.svg" alt="">&lt;img slot="item-icon-active" src="../assets/img/tabbar/home_active.svg" alt="">--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item-icon<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~assets/img/tabbar/home.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item-icon-active<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~assets/img/tabbar/home_active.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p></li></ol><h1 id="mini-webpack"><a href="#mini-webpack" class="headerlink" title="mini-webpack"></a>mini-webpack</h1><p>创建一个mini-webpack目录，使用npm init -f指令初始化该目录</p><ul><li><p>src</p><ul><li><p>index.js —— 用于引入add.js中的js代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./add.js'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>add.js —— 用于编写运行的代码，并且导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span><span class="token function-variable function">default</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>index.html —— 用于引用测试代码</p></li><li><p>package.json —— npm init -f 命令初始化的目录</p></li></ul><p>我们用CommonJS语法导出时，没有办法直接在HTML页面内使用该代码，但我们可以用eval()方法解析引入的字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">//相当于把exports当成一个对象来使用</span>    <span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'exports.default = function(a,b)&#123;return a+b&#125;'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Webpack打包原理"><a href="#Webpack打包原理" class="headerlink" title="Webpack打包原理"></a>Webpack打包原理</h2><p>总体分三步：</p><ol><li>建立自执行函数的框架，收集文件中所有的依赖</li><li>将ES6转成ES5然后写入键值表里</li><li>替换require与exports</li><li>自执行打包运行</li></ol><h3 id="模拟替换exports"><a href="#模拟替换exports" class="headerlink" title="模拟替换exports"></a>模拟替换exports</h3><p>我们可以编写一个<strong>自执行函数</strong>，将exports作为第一个参数，将传来的字符串代码作为第二个参数，在执行函数中使用eval()执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span>code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>exports <span class="token punctuation">,</span><span class="token string">'exports.default = function(a,b)&#123;return a+b&#125;'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模拟替换require"><a href="#模拟替换require" class="headerlink" title="模拟替换require"></a>模拟替换require</h3><p>require就是根据提供的file名称加载对应的模块</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment">// 模拟require方法</span>  <span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span>code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>exports <span class="token punctuation">,</span><span class="token string">'exports.default = function(a,b)&#123;return a+b&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> exports<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./add.js"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将代码整理成key-value表并且自执行"><a href="#将代码整理成key-value表并且自执行" class="headerlink" title="将代码整理成key-value表并且自执行"></a>将代码整理成key-value表并且自执行</h3><p>可以将引入模块的文件名以及内部字符串整理成一张key-value的表，这样通过调用不同的文件名就可以加载不同的模块</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;&quot;index.js&quot;:&quot;var add &#x3D; require(&#39;.&#x2F;add.js&#39;).default;console.log(add(1,3))&quot;,&quot;add.js&quot;:&quot;exports.default &#x3D; function(a,b)&#123;return a+b&#125;&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接着可以再编写一个自执行函数来调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 模拟require方法</span>  <span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span>code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>exports <span class="token punctuation">,</span>list<span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> exports<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'index.js'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string-property property">"index.js"</span><span class="token operator">:</span><span class="token string">"var add = require('add.js').default;console.log(add(1,3))"</span><span class="token punctuation">,</span>  <span class="token string-property property">"add.js"</span><span class="token operator">:</span><span class="token string">"exports.default = function(a,b)&#123;return a+b&#125;"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行过程：</p><ol><li>自执行第一次到require(‘index.js’)</li><li>在参数中查找index.js，并且执行其中代码作为exports返回执行</li><li>查找到index.js中也有require(‘add.js’)，就找到add.js中的代码赋予exports对象</li><li>返回index.js中执行add(1,3)</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端工程化 </tag>
            
            <tag> 前端开发 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.x</title>
      <link href="/2022/05/16/vue3.x/"/>
      <url>/2022/05/16/vue3.x/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3-x"><a href="#Vue3-x" class="headerlink" title="Vue3.x"></a>Vue3.x</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>方式一：CDN引入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue@next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式二：下载完js源代码后再通过<code>script</code>标签引入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/vue3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式三：npm下载</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install vue@next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>vue3是使用<code>Vue.createApp(obj)</code>来创建Vue实例，并且通过mount()挂载到指定的元素上</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    &#123;&#123;num&#125;&#125;  &lt;&#x2F;div&gt;  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue@next&quot;&gt;&lt;&#x2F;script&gt;  &lt;script&gt;    &#x2F;&#x2F;Model数据层    const obj &#x3D; &#123;      data() &#123;        return &#123;          num:111        &#125;      &#125;,    &#125;    &#x2F;&#x2F;创建Vue3实例    const app &#x3D; Vue.createApp(obj);    &#x2F;&#x2F;挂载在元素上    app.mount(&#39;#app&#39;)  &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简写为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;num&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/vue3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">111</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-vue-cli-创建"><a href="#使用-vue-cli-创建" class="headerlink" title="使用 vue-cli 创建"></a>使用 vue-cli 创建</h3><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">## 查看@vue&#x2F;cli版本，确保@vue&#x2F;cli版本在4.5.0以上vue --version## 安装或者升级你的@vue&#x2F;clinpm install -g @vue&#x2F;cli## 创建vue create vue_test## 启动cd vue_testnpm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h3><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">## 创建工程npm init vite-app &lt;project-name&gt;## 进入工程目录cd &lt;project-name&gt;## 安装依赖npm install## 运行npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组合式API"><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h3><p>Vue3中的一个新的配置项，值是一个函数，组件中所用到的：数据、方法等等，均要配置在setup中。</p><p>两种返回值：</p><ul><li>若返回一个对象，对象中的属性与方法可以直接在模板中使用</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;h1&gt;个人信息&lt;&#x2F;h1&gt;&lt;h2&gt;name:&#123;&#123;name&#125;&#125;&lt;&#x2F;h2&gt;&lt;h2&gt;age:&#123;&#123;age&#125;&#125;&lt;&#x2F;h2&gt;&lt;button @click&#x3D;&quot;sayHello&quot;&gt;sayHello&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;App&#39;,  &#x2F;&#x2F; 仅仅测试setup，不考虑响应式  setup() &#123;    &#x2F;&#x2F; 属性    let name &#x3D; &#39;张三&#39;    let age &#x3D; 18        &#x2F;&#x2F; 方法    function sayHello() &#123;      alert(&#96;我叫$&#123;name&#125;,$&#123;age&#125;岁&#96;)    &#125;    &#x2F;&#x2F; 返回值    return &#123;      name,      age,      sayHello    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若返回一个渲染函数，则可以自定义渲染内容（原先模板中定义的内容会直接被渲染函数的内容替换掉）</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;h1&gt;个人信息&lt;&#x2F;h1&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F; 先引入渲染函数import &#123; h &#125; from &quot;vue&quot;;export default &#123;  name: &quot;App&quot;,  setup() &#123;    return () &#x3D;&gt; &#123;      return h(&quot;h1&quot;, &quot;wwh&quot;);    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意点：</p><ul><li><p>尽量不要与Vue2的配置混用</p><ul><li>Vue2配置（data、methods、computed）中可以访问到setup中的属性、方法，但是setup访问不到Vue2配置中的属性方法。</li><li>如果有重名，setup优先。</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h1&gt;个人信息&lt;&#x2F;h1&gt;  &lt;h2&gt;name:&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt;&lt;!--name:zhangsan--&gt;  &lt;h2&gt;age:&#123;&#123; age &#125;&#125;&lt;&#x2F;h2&gt;&lt;!--age:18--&gt;  &lt;!--如果有重名，setup优先--&gt;  &lt;h2&gt;gender:&#123;&#123; gender &#125;&#125;&lt;&#x2F;h2&gt;&lt;!--gender:男--&gt;  &lt;h2&gt;phone:&#123;&#123; phone &#125;&#125;&lt;&#x2F;h2&gt;&lt;!--phone:119--&gt;  &lt;button @click&#x3D;&quot;sayHello&quot;&gt;sayHello&lt;&#x2F;button&gt;  &lt;button @click&#x3D;&quot;sayHi&quot;&gt;sayHi&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;App&quot;,  data() &#123;    return &#123;      name:&#39;zhangsan&#39;,      age:18,      phone:110    &#125;  &#125;,  methods: &#123;    sayHello() &#123;      console.log(this)&#x2F;&#x2F;[proxy]      &#x2F;&#x2F;1、vue2的options可以读取setup中返回的内容      console.log(&#96;$&#123;this.name&#125;,$&#123;this.gender&#125;,$&#123;this.age&#125;岁,$&#123;this.phone&#125;&#96;)&#x2F;&#x2F;zhangsan,男,18岁,119    &#125;  &#125;,  setup() &#123;    let gender &#x3D; &#39;男&#39;    let phone &#x3D; 119    function sayHi()&#123;      console.log(this)&#x2F;&#x2F;[proxy]      console.log(gender)&#x2F;&#x2F;男      &#x2F;&#x2F;2、setup中无法读取vue2中options的内容      console.log(this.name,this.age,this.sayHello)&#x2F;&#x2F;undefined undefined undefined    &#125;    return &#123;      gender,      phone,      sayHi    &#125;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>setup不能是一个async函数，因为加上async后返回值不再是我们想要return的对象，而是返回一个promise，模板无法看到该promise的内容。</p></li><li><p>setup中定义的数据不是响应式的。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h1&gt;个人信息&lt;&#x2F;h1&gt;  &lt;h2&gt;name:&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt;  &lt;h2&gt;age:&#123;&#123; age &#125;&#125;&lt;&#x2F;h2&gt;  &lt;button @click&#x3D;&quot;change&quot;&gt;改变&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;App&quot;,  setup() &#123;    &#x2F;&#x2F;此时的数据还没有响应式    let name &#x3D; &quot;zhangsan&quot;;    let age &#x3D; 18;    &#x2F;&#x2F;使用普通方法改变数据，数据会变模板内容不变    function change() &#123;      name &#x3D; &quot;lisi&quot;;      age &#x3D; 48;      console.log(name, age);&#x2F;&#x2F;lisi 48    &#125;    return &#123;      name,      age,      change,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="ref"><a href="#ref" class="headerlink" title="ref()"></a>ref()</h3><ul><li>可以使setup中的数据变成一个RefImpl的实例对象，从而实现响应式。</li></ul><p>注意：</p><ul><li>在setup中，想要操作数据，使模板发生响应式的改变需要先从ref加工后的对象内取出这个value，再进行更改。</li><li>在模板中无需通过<code>.value</code>去读取值，vue3自动就会去解析。</li><li>当ref()内加工的是一个对象（引用数据类型），想要进行响应式更改时，只需要对此对象名进行<code>.value</code>取值，而对象内部的属性不需要。</li></ul><p>总结：</p><ul><li>ref()处理基本数据类型时，使用的是Object.defineProperty()中的getter()、setter()进行数据劫持。</li><li>ref()处理引用数据类型时，内部求助了下文的<code>reactive</code>函数，使用的是Proxy。</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h1&gt;个人信息&lt;&#x2F;h1&gt;  &lt;h2&gt;name:&#123;&#123; name &#125;&#125;&lt;&#x2F;h2&gt;  &lt;h2&gt;age:&#123;&#123; age &#125;&#125;&lt;&#x2F;h2&gt;  &lt;h3&gt;job.type:&#123;&#123;job.type&#125;&#125;&lt;&#x2F;h3&gt;  &lt;h3&gt;job.salary:&#123;&#123;job.salary&#125;&#125;&lt;&#x2F;h3&gt;  &lt;button @click&#x3D;&quot;change&quot;&gt;改变&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; ref &#125; from &quot;vue&quot;;export default &#123;  name: &quot;App&quot;,  setup() &#123;    let name &#x3D; ref(&quot;zhangsan&quot;);    let age &#x3D; ref(18);    let job &#x3D; ref(&#123;      type:&quot;前端&quot;,      salary:&quot;30K&quot;    &#125;)    function change() &#123;      name.value &#x3D; &quot;lisi&quot;;      age.value &#x3D; 48;      job.value.type &#x3D; &#39;后端&#39;      job.value.salary &#x3D; &#39;15K&#39;      console.log(name, age);      &#x2F;**       * &#123;          &quot;__v_isShallow&quot;: false,          &quot;dep&quot;: &#123;              &quot;w&quot;: 0,              &quot;n&quot;: 0          &#125;,          &quot;__v_isRef&quot;: true,          &quot;_rawValue&quot;: &quot;zhangsan&quot;,          &quot;_value&quot;: &quot;zhangsan&quot;        &#125;       *&#x2F;      console.log(job)    &#125;    return &#123;      name,      age,      job,      change,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive()"></a>reactive()</h3><ul><li>基于proxy，可以将一个引用数据类型加工成响应式对象。</li><li>如果要加工基本数据类型只能使用<code>ref()</code>。</li><li>使用<code>reactive()</code>加工后的响应式对象，想操作其中数据不用再<code>.value</code>，可以直接如同JavaScript一样对对象或数组进行操作。</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h1&gt;个人信息&lt;&#x2F;h1&gt;  &lt;h3&gt;job.type:&#123;&#123;job.type&#125;&#125;&lt;&#x2F;h3&gt;  &lt;h3&gt;job.salary:&#123;&#123;job.salary&#125;&#125;&lt;&#x2F;h3&gt;  &lt;h3&gt;c:&#123;&#123;job.a.b.c&#125;&#125;&lt;&#x2F;h3&gt;  &lt;h3&gt;hobby:&#123;&#123;hobby&#125;&#125;&lt;&#x2F;h3&gt;  &lt;button @click&#x3D;&quot;change&quot;&gt;改变&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; reactive &#125; from &quot;vue&quot;;export default &#123;  name: &quot;App&quot;,  setup() &#123;    let job &#x3D; reactive(&#123;      type:&quot;前端&quot;,      salary:&quot;30K&quot;,      a:&#123;        b:&#123;          c:1        &#125;      &#125;    &#125;)    let hobby &#x3D; reactive([&#39;抽烟&#39;,&#39;喝酒&#39;,&#39;烫头&#39;])    function change() &#123;      console.log(job);&#x2F;&#x2F;Proxy &#123;type: &#39;前端&#39;, salary: &#39;30K&#39;&#125;      job.type &#x3D; &#39;后端&#39;      job.salary &#x3D; &#39;20K&#39;      job.a.b.c &#x3D; 2      hobby[1] &#x3D; &#39;学习&#39;    &#125;    return &#123;      job,      hobby,      change,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当setup中有基本数据类型又有引用数据类型时，可以把他们包裹在一个对象中，一同交给<code>reactive()</code>处理。</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;h1&gt;个人信息&lt;&#x2F;h1&gt;  &lt;h3&gt;name:&#123;&#123; person.name &#125;&#125;&lt;&#x2F;h3&gt;  &lt;h3&gt;age:&#123;&#123; person.age &#125;&#125;&lt;&#x2F;h3&gt;  &lt;h3&gt;job.type:&#123;&#123; person.job.type &#125;&#125;&lt;&#x2F;h3&gt;  &lt;h3&gt;job.salary:&#123;&#123; person.job.salary &#125;&#125;&lt;&#x2F;h3&gt;  &lt;h3&gt;c:&#123;&#123; person.job.a.b.c &#125;&#125;&lt;&#x2F;h3&gt;  &lt;h3&gt;hobby:&#123;&#123; person.hobby &#125;&#125;&lt;&#x2F;h3&gt;  &lt;button @click&#x3D;&quot;change&quot;&gt;改变&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; reactive &#125; from &quot;vue&quot;;export default &#123;  name: &quot;App&quot;,  setup() &#123;    let person &#x3D; reactive(&#123;      name: &quot;zhangsan&quot;,      age: 18,      job: &#123;        type: &quot;前端&quot;,        salary: &quot;30K&quot;,        a: &#123;          b: &#123;            c: 1,          &#125;,        &#125;,      &#125;,      hobby: [&quot;抽烟&quot;, &quot;喝酒&quot;, &quot;烫头&quot;],    &#125;);    function change() &#123;      person.name &#x3D; &#39;lisi&#39;      person.job.a.b.c &#x3D; 22      person.hobby[1] &#x3D; &#39;学习&#39;    &#125;    return &#123;      person,      change,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ref-与reactive-相对比"><a href="#ref-与reactive-相对比" class="headerlink" title="ref()与reactive()相对比"></a>ref()与reactive()相对比</h3><ul><li>定义数据的角度<ul><li><code>ref()</code>多用来定义基本数据类型，<code>reactive()</code>多用来定义引用数据类型（对象、数组……）。</li><li><code>ref()</code>也可以用来定义引用数据类型，但是其内部会自动通过<code>reactive()</code>将其转化为代理对象。</li></ul></li><li>原理的角度<ul><li><code>ref()</code>通过<code>Object.defineProperty()</code>的<code>get()</code>与<code>set()</code>来实现响应式。</li><li><code>reactive()</code>通过<code>Proxy</code>来实现响应式，并且通过<code>Reflect</code>来对源对象进行操作。</li></ul></li><li>使用的角度<ul><li><code>ref()</code>定义的数据在操作时需要<code>.value</code>，在模板中不需要<code>.value</code>。</li><li><code>reactive()</code>定义的数据在操作或读取时均不需要<code>.value</code>。</li></ul></li></ul><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><h3 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h3><h4 id="Vue2-x"><a href="#Vue2-x" class="headerlink" title="Vue2.x"></a>Vue2.x</h4><p>在<code>Vue2.x</code>中，响应式是通过<code>Object.defineProperty</code>实现的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 源数据</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token comment">// 模拟vue2的响应式</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 对源数据的name进行数据劫持</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 允许被操作</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 当p的name被调用执行</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人读取了name属性'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">.</span>name    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 当p的name被设置</span>    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人修改了name属性'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span>name <span class="token operator">=</span> value    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当p的age被调用执行</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人读取了age属性'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">.</span>age    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 当p的age被设置</span>    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人修改了age属性'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span>age <span class="token operator">=</span> value    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在问题：</p><ul><li>新增属性、删除属性，界面不会更新，需要通过<code>Vue.set()</code>、<code>this.$set()</code>、<code>Vue.delete()</code>、<code>this.$delete()</code>这些API来完成对响应式对象的新增删除属性操作。</li><li>直接通过下标修改数组，界面不会自动更新，需要通过一系列数组中的响应式方法来实现。</li><li>使用<code>Object.defineProperty()</code>实现响应式时需要将对象里面每一个属性都进行代理，性能较低。</li></ul><h4 id="Vue3-x-1"><a href="#Vue3-x-1" class="headerlink" title="Vue3.x"></a>Vue3.x</h4><p>在<code>Vue3.x</code>中，响应式是通过<code>Proxy</code>（代理对象）配合<code>Reflect</code>（反射对象）实现的。</p><ul><li>通过<code>Proxy</code>，拦截代理对象中任意属性的变化。</li><li>通过<code>Reflect</code>，对被代理对象进行相应的操作。</li></ul><p>我们需要通过实例化<code>Proxy</code>对象来实现对另一个对象的代理，该对象有两个参数。</p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">被代理的任意类型的对象，包括原生数组、对象，甚至另一个</td></tr><tr><td align="center">handler</td><td align="center">通常为一个对象，对象中有许多方法用于操作被代理的目标对象</td></tr></tbody></table><p><code>Reflect</code>并非一个构造函数，不能用<code>new</code>进行实例化，因此其内部方法都是静态方法，方法与<code>Object</code>上面的方法有所类似，可以看作是<code>Object</code>上静态方法的移植。</p><p>使用<code>Reflect</code>进行对代理对象的操作时，会有一个<code>boolean</code>型返回值，可以通过这个返回值判断该方法是否定义成功，而不是像<code>Object</code>一样直接报错，需要使用许多<code>try...catch...</code>去捕获错误，才能保证代码的继续运行。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 源数据</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token comment">// 模拟vue3的响应式</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 常用两个参数1、target被代理的对象 2、propName代理对象被操作的属性名</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">有人读取了p身上的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>propName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 比起get()多一个对象为操作的属性值</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">有人设置了p身上的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>propName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">,</span>value<span class="token punctuation">)</span>        Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 用于进行对被代理对象的删除</span>    <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>propName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">有删除了p身上的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>propName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">属性</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>propName<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端开发 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 框架学习 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue生态</title>
      <link href="/2022/05/16/vue-expand/"/>
      <url>/2022/05/16/vue-expand/</url>
      
        <content type="html"><![CDATA[<h1 id="VueCLI"><a href="#VueCLI" class="headerlink" title="VueCLI"></a>VueCLI</h1><p>是官方发布vue.js的项目脚手架，使用VueCLI可以快速搭建Vue开发环境以及对应的webpack配置</p><h2 id="VueCLI安装"><a href="#VueCLI安装" class="headerlink" title="VueCLI安装"></a>VueCLI安装</h2><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><pre class="line-numbers language-none"><code class="language-none">npm install @vue&#x2F;cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="拉取2-x模板"><a href="#拉取2-x模板" class="headerlink" title="拉取2.x模板"></a>拉取2.x模板</h3><p>我们在安装了VueCLI3.x时，如果还想使用VueCLI2.x，则可以拉取模板</p><pre class="line-numbers language-none"><code class="language-none">npm install @vue&#x2F;cli-init -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CLI2初始化"><a href="#CLI2初始化" class="headerlink" title="CLI2初始化"></a><strong>CLI2初始化</strong></h2><p>项目名称自定义</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vue init webpack project-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要输入的相关参数：</p><table><thead><tr><th>参数名</th><th>参数作用</th></tr></thead><tbody><tr><td>Project name</td><td>项目名</td></tr><tr><td>Project description</td><td>项目描述</td></tr><tr><td>Author</td><td>项目作者</td></tr><tr><td>Vue build</td><td>项目构建方式</td></tr><tr><td>Install vue-router?</td><td>是否安装vue路由</td></tr><tr><td>Use ESLint to lint your code?</td><td>是否使用ESlint规范代码</td></tr><tr><td>Set up unit tests</td><td>是否安装单元测试</td></tr><tr><td>Setup e2e tests with Nightwatch</td><td>是否安装e2e自动化测试框架</td></tr><tr><td>Should we run <code>npm install</code> for you after the project has been created?</td><td>管理项目时用npm工具还是yarn工具</td></tr></tbody></table><h2 id="CLI3初始化"><a href="#CLI3初始化" class="headerlink" title="CLI3初始化"></a>CLI3初始化</h2><p>项目名称自定义</p><pre class="line-numbers language-none"><code class="language-none">vue create project-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要输入的相关参数：</p><table><thead><tr><th>参数名</th><th>参数作用</th></tr></thead><tbody><tr><td>Please pick a preset（default|Manually select features）</td><td>请选择配置（默认配置|手动配置）</td></tr><tr><td>Where do you prefer placing config for Babel, PostCSS, ESLint, etc.?（In dedicated config files|In package.json）</td><td>存放配置的位置（单独的配置文件|全放在package.json文件中）</td></tr><tr><td>Save this as a preset for future projects?</td><td>是否将上述配置存为默认方案</td></tr><tr><td>Save preset as</td><td>默认方案名</td></tr><tr><td>Pick the package manager to use when installing dependencies</td><td>选择包管理依赖</td></tr></tbody></table><h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>为了避免CSRF攻击，浏览器端推出了CORS同源策略，而这也导致跨域问题的产生，我们也可以通过以下8种方式来解决跨域问题：</p><ol><li>JSONP：利用script标签的src属性获取数据不受跨域影响的特性，可以动态创建一个script标签来进行跨域的请求，只不过只支持get请求。</li><li>document.domain + iframe：在主域名相同的情况下，通过生成iframe标签，并且使用document.domain属性将两个页面的主域名设置为基础主域，就实现了同域。</li><li>location.hash + iframe ：a欲与b跨域相互通信，则使用中间页面c来实现。三个页面不同域之间用iframe的location.hash传值，同域则使用js直接访问。</li><li>window.name + iframe：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外传到本地域，但是window.name的长度仅有2M。</li><li>postMessage：H5中的API。</li><li>CORS：在后端设置响应头等信息。</li><li>代理服务器：配置一个代理服务器，这个代理服务器与前端同源，则前端可以直接获取到代理服务器上的数据；而代理服务器与真正的服务器之间没有浏览器上的同源策略，可以直接获取数据。</li><li>webSocket：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。只有在支持web socket协议的服务器上才能正常工作。</li></ol><p><a href="https://blog.csdn.net/yup1212/article/details/87633272?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-7.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-7.no_search_link">跨域的8种解决方法</a></p><h3 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>当我们前端项目的路径为<a href="http://localhost:8081而后端服务器的路径为http://localhost:5000时，这会发送请求则会有跨域问题。">http://localhost:8081而后端服务器的路径为http://localhost:5000时，这会发送请求则会有跨域问题。</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/students'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>     <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求成功！"</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求失败！"</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以在Vue-cli中，通过配置<code>vue.config.js</code>文件来给我们开启一个代理服务器。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//项目根目录中：vue.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 关闭语法检查</span>  <span class="token literal-property property">lintOnSave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 开启代理服务器</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 代理指向要发送到的后端服务器</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 之后我们可以直接向代理服务器发送请求，就可以请求到后端服务器上的相应的数据</span>   axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8081/students'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>     <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求成功！"</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求失败！"</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法存在两点缺陷：</p><ol><li>相当于访问脚手架项目文件夹public内的资源，如果public文件夹中有与api同名的资源，则会优先读取public文件夹内的内容，导致内容读取错误。</li><li>这种方法只能配置指向单个服务器。</li></ol><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 关闭语法检查</span>  <span class="token literal-property property">lintOnSave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 开启代理服务器（方式二）</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// /studentApi是请求前缀（可自定义），如果要走代理访问指定的服务器则在访问上加/studentApi</span>      <span class="token comment">// 如不走代理想访问public中的资源就不加，比较灵活</span>      <span class="token string-property property">'/studentApi'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span>        <span class="token comment">// 需要将请求添加的前缀重写为空，否则发送给后端的url会错误（带上了前缀）</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string-property property">"^/studentApi"</span><span class="token operator">:</span> <span class="token string">""</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 通过代理服务器请求API</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8080/studentApi/students'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求成功！"</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求失败！"</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在proxy中配置多个对象以完成对多个服务器的代理。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">lintOnSave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 开启代理服务器（方式二）</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'/studentApi'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span>        <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//支持websocket</span>        <span class="token comment">//用于控制请求头中的host值</span>        <span class="token comment">//true：与服务器相同（5000）；false：与前端项目相同（8080 ）</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string-property property">"^/studentApi"</span><span class="token operator">:</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string-property property">'/carApi'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span>        <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string-property property">"^/carApi"</span><span class="token operator">:</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//向第二个服务器发送请求</span><span class="token function">getCars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8080/carApi/cars'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求成功！"</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求失败！"</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h1><p>问：什么是前端渲染？什么是后端渲染？（什么是前后端分离？|什么是前端路由？什么是后端路由？）</p><p>答：</p><ul><li>后端路由阶段：后端渲染是由jsp、php、asp等技术实现的。后端路由负责处理url和页面之间的映射关系。<ul><li>当前后端不分离时，我们输入url后，服务器会对url进行解析，通过正则对该url进行匹配，访问控制器中的方法从数据库中读取数据，最后返回的是一个HTML页面。</li><li>渲染好的页面无需加载任何js和css，可以直接给浏览器显示，有利于SEO的优化。</li><li>但是前后端不分离，对后端的工作量太大，并且前后端代码混杂一起，不利于维护。</li></ul></li><li>前后端分离阶段：Ajax出现后，由Ajax来请求数据，后端只负责提供API接口，前端可以将请求API接口返回的json数据通过Javascript渲染到页面上。</li><li>单页面富应用阶段：SPA（single page web application）整个页面只有一个HTML页面，主要特点就是前后端分离的基础上给页面加上了一层路由。在我们加载这个页面的时候已经向后端请求了所有数据，而前端路由仅仅只是生成路由来对应前端的页面组件，根据不同的路由显示不同的组件，改变了url并不会使页面刷新，而是显示了已经请求到的不同的数据。</li></ul><hr><p><strong>安装vue-router</strong></p><pre class="line-numbers language-none"><code class="language-none">npm install vue-router --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>我们可以在模块化工程中使用他（因为是一个插件，所以可以通过Vue.use()来安装路由功能）</p><ol><li><p>导入路由对象，并且调用Vue.use(VueRouter)使用插件</p></li><li><p>创建路由实例，传入路由映射配置，并且导出该路由实例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1、引入VueRouter</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//2、使用Vue.use安装VueRouter插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token comment">//3、创建VueRouter对象，命名routes不可改变</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token comment">//在这里配置映射关系</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token comment">//引入映射关系  </span>    routes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//4、将对象导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Vue实例中挂载创建的路由实例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token comment">//5、引入router</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      <span class="token comment">//6、在Vue实例中挂载路由  </span>    router<span class="token punctuation">,</span>      <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>在components文件夹中创建组件</p></li><li><p>配置路由映射</p><ol><li><p>导入组件</p></li><li><p>配置映射关系</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">//1、引入页面组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/about'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/home'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token comment">//2、配置映射关系</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>Home      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>About      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      routes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>在App.js中使用路由</p><ul><li>router-link标签：类似于a标签，其to属性可以在点击标签后改变url</li><li>router-view标签：占位符，在这里面可以显示路由指向的组件的内容</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    &lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;router-link&gt;    &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;关于&lt;&#x2F;router-link&gt;     &lt;router-view&gt;&lt;&#x2F;router-view&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="router-link标签"><a href="#router-link标签" class="headerlink" title="router-link标签"></a>router-link标签</h3><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>to</td><td>指定router-link标签点击后会调转到哪个url上</td></tr><tr><td>tag</td><td>指定router-link标签会被渲染成什么样的标签（button、li）</td></tr><tr><td>replace</td><td>表示使用history.replaceState()方式来替换路由，无法返回（可以没有值，默认为true）</td></tr><tr><td>active-class</td><td>在路由被点击时，框架会自动加上两个class（router-link-exact-active router-link-active），我们可以在标签上使用该属性来自定义router-link-active的值</td></tr></tbody></table><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    &lt;router-link to&#x3D;&quot;&#x2F;home&quot; tag&#x3D;&quot;button&quot; replace active-class&#x3D;&quot;active&quot;&gt;首页&lt;&#x2F;router-link&gt;    &lt;router-link to&#x3D;&quot;&#x2F;about&quot; replace active-class&#x3D;&quot;active&quot;&gt;关于&lt;&#x2F;router-link&gt;    &lt;router-view&gt;&lt;&#x2F;router-view&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于active-class我们也可以在路由实例中添加linkActiveClass属性来统一自定义router-link-active的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token comment">//引入映射关系  </span>    routes<span class="token punctuation">,</span>      <span class="token literal-property property">mode</span><span class="token operator">:</span><span class="token string">"history"</span><span class="token punctuation">,</span>      <span class="token literal-property property">linkActiveClass</span><span class="token operator">:</span><span class="token string">"active"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以通过这个类名来修改被触发了的样式</p><h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><h3 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h3><p>vuecli2默认使用的路由模式是hash模式，即在他的url上有一个#号，#号及以后的url就是hash值，并且不会包含在http请求中带给服务器。</p><h3 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h3><p>我们可以在路由实例中给他加一个mode参数，值为history来切换成history模式，以去除这个#号，但是若不经过服务端的处理，原本#号后面的url会被包含在http请求中带给服务器，导致404问题。</p><p>区别：</p><ul><li>hash模式兼容性较好，history模式兼容性较差。</li><li>hash模式一直要带个#号比较不美观，history模式比较美观。</li><li>若要将地址通过第三方手机分享，若app校验严格，hash模式的地址可能会被标记为不合法。</li><li>在项目要部署到服务器上时有区别：<ul><li>hash模式在项目打包完成部署到服务器上时，在url有了vue-router的前端路由时，再次向服务器请求静态资源时不会显示请求的静态资源不存在（404问题），因为此时浏览器会将hash的#号后面的url自动忽略，不会作为被包含在http请求中发送给服务器。</li><li>history模式在打包后，当url上有了vue-router的前端路由时，刷新页面时，前端路由的url会被浏览器包含在http请求中发送给服务器请求资源，此时会显示请求的资源不存在。</li><li>解决办法：<ul><li>如果我们要解决history模式打包后触发前端路由再刷新产生404的问题，需要后端配合，如：nodejs可以使用<code>connect-history-api-fallback</code>这个中间件。</li><li>可以使用<code>nginx</code>来分析传给后台的请求是前端路由还是后端路由。</li></ul></li></ul></li></ul><h2 id="router"><a href="#router" class="headerlink" title="$router"></a>$router</h2><p>通过这个对象，我们可以不用router-link标签而是在js中进行路由的切换</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    &lt;!-- &lt;router-link to&#x3D;&quot;&#x2F;home&quot; tag&#x3D;&quot;button&quot; replace&gt;首页&lt;&#x2F;router-link&gt;  &lt;router-link to&#x3D;&quot;&#x2F;about&quot; replace&gt;关于&lt;&#x2F;router-link&gt; --&gt;    &lt;button @click&#x3D;&quot;homeClick&quot;&gt;home&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;aboutClick&quot;&gt;about&lt;&#x2F;button&gt; &lt;router-view&gt;&lt;&#x2F;router-view&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;App&quot;,  methods: &#123;    homeClick() &#123;      this.$router.push(&quot;&#x2F;home&quot;);    &#125;,    aboutClick() &#123;      this.$router.push(&quot;&#x2F;about&quot;);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>$router</strong>的方法与pushState()和replaceState()相对应</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">homeClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// this.$router.push("/home")        </span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">aboutClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// this.$router.push("/about")        </span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/about"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由对象"><a href="#路由对象" class="headerlink" title="路由对象"></a>路由对象</h2><p>在路由关系表中，每一个对象都代表了一个路由以及他的配置，每个对象中都有固定的属性配置来管理该路由，如<code>path</code>属性的作用是当前url为该<code>path</code>的值时，使页面的router-view变成<code>component</code>属性指向的组件。</p><h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h3><p>当我们url内没有任何关于页面组件的参数时，我们可以以重定向的方式给他一个默认值，使他在没有具体路由的时候默认跳转到首页</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//映射关系</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token comment">//默认路由，重定向到/home  </span>    <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>            <span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token string">'/home'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>Home      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>About      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><p>children是一个数组，可以通过他来实现嵌套路由。</p><p>当我们希望在home页面中，通过/home/message和/home/news的一些内容，我们就需要用到嵌套路由。</p><p>一个路径映射一个组件，当我们访问这两个路径也会分别渲染两个组件。</p><p><strong>实现嵌套路由的步骤：</strong></p><ol><li><p>创建对应的子组件，并且在路由映射中配置对应的子路由。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Home'</span><span class="token punctuation">)</span>……<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  ……  <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>        <span class="token literal-property property">component</span><span class="token operator">:</span>Home<span class="token punctuation">,</span>        <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>         <span class="token comment">//嵌套路由同样可以实现路由的重定向      </span>    <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>            <span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token string">'news'</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span>                <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/HomeNews'</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>                <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span>                <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/HomeMessage'</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  ……<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在父组件内部使用<strong>router-view</strong>标签。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;home&lt;&#x2F;h2&gt;    &lt;!--父组件内的链接需要写完整的路由--&gt;    &lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;news&quot; tag&#x3D;&quot;button&quot;&gt;新闻&lt;&#x2F;router-link&gt;    &lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;message&quot; tag&#x3D;&quot;button&quot;&gt;消息&lt;&#x2F;router-link&gt;    &lt;router-view&gt;&lt;&#x2F;router-view&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><p>在路由对象里加上name属性，之后就可以使用name代替path进行跳转，在嵌套路由的路径过长时可以简化写法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'guanyu'</span><span class="token punctuation">,</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>About<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Home<span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>News<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Message<span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Detail<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 命名路由前 --&gt;&lt;router-link :to&#x3D;&quot;&#96;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;$&#123;m.id&#125;&amp;title&#x3D;$&#123;m.title&#125;&#96;&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;&#x2F;router-link&gt;&lt;!-- 命名路由后 --&gt;&lt;router-link :to&#x3D;&quot;&#123;name:&#39;xiangqing&#39;,query:&#123;id:m.id,title:m.title&#125;&#125;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><p><code>meta</code>（路由源信息），是设计者给开发者提供的一个用于存放自定义信息的容器。</p><p>因为路由对象中每组key——value都是设计者指定好的，我们没法随意更改，但是我们可以通过<code>meta</code>来自定义一些属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xinwen'</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span>News<span class="token punctuation">,</span> <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">isAuth</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'新闻'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态路由对象"><a href="#动态路由对象" class="headerlink" title="动态路由对象"></a>动态路由对象</h2><p>当我们在某种情况，例如进行修改操作时，我们需要在url上带上id，有以下步骤：</p><ol><li><p>在App.vue的data属性中获取到要修改的id</p></li><li><p>使用v-bind将他绑定到router-link标签上</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    ……    &lt;router-link :to&#x3D;&quot;&#39;&#x2F;user&#x2F;&#39; + id&quot; tag&#x3D;&quot;button&quot; replace&gt;用户&lt;&#x2F;router-link&gt;    ……  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;App&quot;,  &#x2F;&#x2F;动态地获取到id  data() &#123;    return &#123;      id: 2,    &#125;;  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    &lt;button @click&#x3D;&quot;userClick&quot;&gt;用户&lt;&#x2F;button&gt;     &lt;router-view&gt;&lt;&#x2F;router-view&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;App&quot;,  data() &#123;    return &#123; id: 2 &#125;;  &#125;,  methods: &#123;    userClick() &#123;      this.$router.push(&quot;&#x2F;user&#x2F;&quot; + this.id);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在路由中使用**:id**建立动态的路由映射</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>      ……      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>User      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="route"><a href="#route" class="headerlink" title="$route"></a>$route</h3><p>$route是当前正活跃的路由对象，在user.vue模板中用**$route**来获取动态路由传输过来的值</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;user&lt;&#x2F;h2&gt;    &lt;!-- &lt;h3&gt;当前档案的id为：&#123;&#123;$route.params.id&#125;&#125;&lt;&#x2F;h3&gt; --&gt;    &lt;h3&gt;当前用户的id为：&#123;&#123; id &#125;&#125;&lt;&#x2F;h3&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;user&quot;,  computed: &#123;    id() &#123;      return this.$route.params.id;    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问：$router和$route的区别？</p><p>答：$router是VueRouter路由实例，能通过$router.push等方法导航到不同的URL；$route指的是目前处于活跃的路由，也就是调转过来的URL，可以用他来取得该路由里面的内容</p><h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><ul><li>配置路由格式：/router/:id</li><li>传递方式：在path后跟上对应的值</li><li>传递后形成的路径：/router/1|/router/abc</li><li>当想使用params传参时，对象写法中必须使用<strong>命名路由</strong>，否则会使路径匹配混乱。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'guanyu'</span><span class="token punctuation">,</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>About<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Home<span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>News<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Message<span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'detail/:id/:title'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Detail<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link :to&#x3D;&quot;&#123;name:&#39;xiangqing&#39;,params:&#123;id:m.id,title:m.title&#125;&#125;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><ul><li><p>配置路由格式：/router（也就是普通配置）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>      ……  <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/profile'</span><span class="token punctuation">,</span>        <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Profile.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p> 传递的方式：对象中使用query的key作为传递方式（在router-link标签中使用v-bind绑定路由对象）</p></li></ul>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--方式一--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;path:<span class="token punctuation">'</span>/profile<span class="token punctuation">'</span>,query:&#123;id:2&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">replace</span><span class="token punctuation">></span></span>档案<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!--方式二--&gt;&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    &lt;button @click&#x3D;&quot;profileClick&quot;&gt;档案&lt;&#x2F;button&gt; &lt;router-view&gt;&lt;&#x2F;router-view&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;App&quot;,  data() &#123;    return &#123; id: 2 &#125;;  &#125;,  methods: &#123;    profileClick() &#123;      this.$router.push(&#123; path: &quot;&#x2F;profile&quot;, query: &#123; id: this.id &#125; &#125;);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>传递后形成的路径：/router?id=1|/router?id=abc</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">http:&#x2F;&#x2F;localhost:8080&#x2F;profile?id&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在路由组件中使用$route获取参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;profile&lt;&#x2F;h2&gt;    &lt;!-- &lt;h3&gt;当前档案的id为：&#123;&#123;$route.query.id&#125;&#125;&lt;&#x2F;h3&gt; --&gt;    &lt;h3&gt;当前档案的id为：&#123;&#123; id &#125;&#125;&lt;&#x2F;h3&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;Profile&quot;,  computed: &#123;    id() &#123;      return this.$route.query.id;    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>当我们需要使用<code>$route</code>来获取<code>query</code>或<code>params</code>传来的参数时，需要一个个去获取，当要获取的参数太多时，会产生很多冗余代码，此时我们就可以在路由中配置<code>props</code>参数用来优化代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h4><p>props的第一种写法，值为对象，该对象中的所有key-value都会以props的形式传给Detail组件。</p><p>缺点是这个写法都是死数据，一般不使用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>    <span class="token literal-property property">component</span><span class="token operator">:</span>Detail<span class="token punctuation">,</span><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token string">'hello'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;ul&gt;&lt;li&gt;消息编号：&#123;&#123;id&#125;&#125;&lt;&#x2F;li&gt;&lt;li&gt;消息标题：&#123;&#123;title&#125;&#125;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;name:&#39;Detail&#39;,props:[&#39;id&#39;,&#39;title&#39;],        &#x2F;&#x2F;获取方式与组件间通信相同，直接调用props中的属性就可以免去写许多冗余代码&#x2F;&#x2F; computed: &#123;&#x2F;&#x2F; id()&#123;&#x2F;&#x2F; return this.$route.query.id&#x2F;&#x2F; &#125;,&#x2F;&#x2F; title()&#123;&#x2F;&#x2F; return this.$route.query.title&#x2F;&#x2F; &#125;,&#x2F;&#x2F; &#125;,&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="布尔写法"><a href="#布尔写法" class="headerlink" title="布尔写法"></a>布尔写法</h4><p>props的第二种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给Detail组件。</p><p>缺点是无法传递query参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Detail<span class="token punctuation">,</span><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数写法"><a href="#函数写法" class="headerlink" title="函数写法"></a>函数写法</h4><p>props的第三种写法，值为函数，这只是把获取参数的方式放到路由里面，更加清晰。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span>Detail<span class="token punctuation">,</span> <span class="token function">props</span><span class="token punctuation">(</span><span class="token parameter">$route</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span>  <span class="token literal-property property">title</span><span class="token operator">:</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token string">'hello'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用解构赋值的连续写法来进一步简化代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span> <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span>Detail<span class="token punctuation">,</span>    <span class="token comment">//相当于从$route中取出query，接着在query中取出id和title</span> <span class="token function">props</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span><span class="token literal-property property">query</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">,</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span>  title<span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token string">'hello'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>当一个打包构建应用时，Javascript包会变得非常大，影响页面加载。如果我们将不同路由对应的组件分成不同的代码块，当路由被访问的时候才加载对应组件，这样就会变得更加高效。</p><p>即我们在路由中通常会定义许多页面，将这些包打包在一个js文件中会使这一个页面非常大，我们一次性请求下来会花费一定时间，甚至在电脑上出现了短暂空白的情况，此时可以用<strong>路由懒加载</strong>解决。</p><p>路由懒加载的主要作用时将路由对应的组件打包成一个个的JS代码块，只有当这个路由被访问到的时候才加载对应的组件。</p><p>写法：（在路由映射表内，使用到该路由再引入组件，此时就不需要再在上面引入路由组件）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入页面组件</span><span class="token comment">// import About from '../components/about'</span><span class="token comment">// import Home from '../components/home'</span><span class="token comment">// import User from '../components/user'</span>……<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>            <span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token string">'/home'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>            <span class="token comment">// component:Home    </span>        <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/home'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>            <span class="token comment">// component:About    </span>        <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/about'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>            <span class="token comment">// component:User    </span>        <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/user'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化写法：（定义一个常量，将箭头函数提取出去）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//懒加载写法</span><span class="token keyword">const</span> <span class="token function-variable function">About</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/about'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/home'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">User</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/user'</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token comment">//3、创建VueRouter对象</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>            <span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token string">'/home'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>Home      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>About      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>User      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><p>是一个前置钩子，能在路由跳转前调用此钩子进行各种操作，例如，在组件跳转时更改document.title的内容</p><ol><li><p>先在路由映射表里为路由添加一个对象meta，meta中用title属性存放该组件对应的document.title</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>            <span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token string">'/home'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>Home<span class="token punctuation">,</span>            <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                  <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">"主页"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>                  <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>                        <span class="token literal-property property">redirect</span><span class="token operator">:</span><span class="token string">'news'</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span>                        <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/HomeNews'</span><span class="token punctuation">)</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span>                        <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/HomeMessage'</span><span class="token punctuation">)</span>                  <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>            <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                  <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">"关于"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>About      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>            <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                  <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">"用户"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span>User      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/profile'</span><span class="token punctuation">,</span>            <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                  <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">"档案"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">component</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/Profile.vue'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用router对象内的beforeEach方法创建路由导航守卫</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">//使标题为目的组件的标题  </span>    <span class="token comment">//matched[0]能使有嵌套路由的组件也被捕获到，不会有undefined的状况  </span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title      <span class="token comment">//设置完标题后执行下一步  </span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>to：Route即将要进入的目标路由对象</li><li>from：Route当前导航正要离开的路由对象</li><li>next：是一个方法，一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数：<ul><li>next()：参数为空。进行管道中的下一个钩子，如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</li><li>next(false)：参数为false。中断当前的导航，如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</li><li>next(‘/‘) 或者 next({ path: ‘/‘ })：参数为一个路由地址或一个如同映射表里面一样的路由对象。跳转到一个不同的地址，当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置<strong>对象</strong>，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。</li><li>next(error)：参数为一个error实例。导航会被中止并且该错误会被传递给router.onError()注册过的回调。</li><li>注意：确保要调用 <strong>next</strong> 方法，否则钩子就不会被 resolved。</li></ul></li></ul></li></ol><h3 id="全局后置守卫"><a href="#全局后置守卫" class="headerlink" title="全局后置守卫"></a>全局后置守卫</h3><p>是一个后置钩子，在页面跳转后调用，与前置守卫不同的是，他只有to和from对象，无需主动调用next()函数。</p><p>通常用来改网站的title。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'后置守卫'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h3><p>在路由映射表内直接定义beforeEnter钩子函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>      ……  <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span>        <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">"用户"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">component</span><span class="token operator">:</span>User<span class="token punctuation">,</span>        <span class="token function">beforeEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">)</span>              <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  ……<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数与全局前置守卫一样</p><h3 id="组件内部守卫"><a href="#组件内部守卫" class="headerlink" title="组件内部守卫"></a>组件内部守卫</h3><p>能在路由组件内部直接定义以下路由导航守卫：</p><ul><li>beforeRouteEnter：通过路由规则进入组件时被调用</li><li>beforeRouteUpdate</li><li>beforeRouteLeave：通过路由规则离开组件时被调用</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;h2&gt;我是About的内容&lt;&#x2F;h2&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;name:&#39;About&#39;,&#x2F;&#x2F;通过路由规则，进入该组件时被调用beforeRouteEnter (to, from, next) &#123;console.log(&#39;About--beforeRouteEnter&#39;,to,from)if(to.meta.isAuth)&#123; &#x2F;&#x2F;判断是否需要鉴权if(localStorage.getItem(&#39;school&#39;)&#x3D;&#x3D;&#x3D;&#39;atguigu&#39;)&#123;next()&#125;else&#123;alert(&#39;学校名不对，无权限查看！&#39;)&#125;&#125;else&#123;next()&#125;&#125;,&#x2F;&#x2F;通过路由规则，离开该组件时被调用beforeRouteLeave (to, from, next) &#123;console.log(&#39;About--beforeRouteLeave&#39;,to,from)next()&#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数与前面的都一样</p><h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><p>keep-alive是Vue内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染，提高性能</p><p>他有两个重要的属性，值为字符串或正则表达式：</p><ul><li>include（包含）：只有匹配的组件会被缓存</li><li>exclude（排除）：任何匹配的组件都不会被缓存</li></ul><p>值里面不能加空格！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">exclude</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Profile,User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果要保留组件内嵌套路由的状态，思路如下：</p><ol><li>清除嵌套路由内的默认路由</li><li>给组件一个默认的path值，使用activated钩子函数使每次打开这个组件就跳转到这个默认值（替换了第一步的默认路由）</li><li>调用组件内部守卫beforeRouteLeave()更新记录当前组件的路由，使下次组件再被激活时就调用activated钩子函数打开这个默认路由</li></ol><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;home&lt;&#x2F;h2&gt;    &lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;news&quot; tag&#x3D;&quot;button&quot;&gt;新闻&lt;&#x2F;router-link&gt;    &lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;message&quot; tag&#x3D;&quot;button&quot;&gt;消息&lt;&#x2F;router-link&gt;    &lt;router-view&gt;&lt;&#x2F;router-view&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;Home&quot;,  data() &#123;    return &#123;      path: &quot;&#x2F;home&#x2F;news&quot;,    &#125;;  &#125;,  activated() &#123;    this.$router.push(this.path);  &#125;,  beforeRouteLeave(to, from, next) &#123;    this.path &#x3D; this.$route.path;    next();  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="activated"><a href="#activated" class="headerlink" title="activated()"></a>activated()</h3><p>钩子函数之一，只有该组件被keep-alive保持了状态才能生效，在被keep-alive标签包裹的组件激活后会调用此钩子函数。</p><h3 id="deactivated"><a href="#deactivated" class="headerlink" title="deactivated()"></a>deactivated()</h3><p>钩子函数之一，只有该组件被keep-alive保持了状态才能生效，在被keep-alive标签包裹的组件销毁后会调用此钩子函数。</p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>是一个转为Vue.js应用程序开发的<strong>状态管理</strong>模式。采用<strong>集中式存储管理</strong>应用的所有组件的状态，并且以相应的规则保证状态以一种可预测的方式发生变化。</p><p>例如多个组件组要判断是否登录的状态，而这个状态放在任意单独组件都不合适，Vuex就负责管理这个状态，组件需要该状态时就可以从Vuex里面取。并且Vuex里面的状态是<strong>响应式</strong>的，一旦一个组件改动了该状态，其他相关组件的状态也会跟着更改。</p><p>Vuex共享的状态如：登录状态（token）、用户名、头像、地理位置信息、商品的收藏、购物车中的物品等。</p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><pre class="line-numbers language-none"><code class="language-none">npm install vuex --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>我们一般在src文件夹创建一个store文件夹，在里面编写一个index.js文件用来引用Vuex插件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//1、导入安装插件</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">//2、创建对象</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">counter</span><span class="token operator">:</span><span class="token number">1000</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//3、导出store</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在main.js中引用Vuex并且挂载到Vue实例上</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      router<span class="token punctuation">,</span>      store<span class="token punctuation">,</span>      <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们就可以在组件上使用$store对象取得Vuex里面存的状态数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="单页面状态管理"><a href="#单页面状态管理" class="headerlink" title="单页面状态管理"></a>单页面状态管理</h3><p><img src="D:\课程资料\前端开发\自学笔记\img\单页面状态管理.png" alt="image-20210721110400536"></p><ul><li>State：状态（data中的数据）</li><li>View：视图层，对State的展示，有能对State进行操作的Actions</li><li>Actions：用户的操作，改变State</li></ul><h4 id="修改状态"><a href="#修改状态" class="headerlink" title="修改状态"></a>修改状态</h4><p>我们使用$store取得状态时，可以直接在方法里，把这个状态当成一个普通的值进行修改，但是这种方式不推荐</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;$store.state.counter&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$store.state.counter++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$store.state.counter--<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种方式当我们对state修改后，难以对这次修改进行跟踪</p><h3 id="多页面状态管理"><a href="#多页面状态管理" class="headerlink" title="多页面状态管理"></a>多页面状态管理</h3><p><img src="D:\课程资料\前端开发\自学笔记\img\多页面状态管理.png" alt="image-20210722171819598"></p><p>Vue官方提供的Devtools插件，在我们通过Mutations进行修改时，就可以跟踪到修改来源</p><ol><li><p>在Vuex实例的Mutations属性中添加方法，将想要对state进行修改的操作定义在这里面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">counter</span><span class="token operator">:</span><span class="token number">1000</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  state<span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  state<span class="token punctuation">.</span>counter<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在想要修改状态的组件的methods中，通过this.$store.commit()的方法去调用Vuex实例中的方法对state中的数据进行修改（commit()的参数为mutations里面预定义的方法名）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>      ……      <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"decrement"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>State、Getter、Mutation、Action、Module</p><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p><strong>State单一状态树</strong></p><p>如果我们将状态信息保存到多个Store对象中，那么之后的管理和维护都会变得特别困难，因此我们在一个项目中，只建一个Store</p><p>我们将所有状态信息都放在一个State中进行管理</p><h4 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h4><p>类似于单个组件内的计算属性</p><p>使用步骤：</p><ol><li><p>在store中定义getters属性，像计算属性一样定义方法，并且将state作为参数传入进行操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">counter</span><span class="token operator">:</span><span class="token number">1000</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">counterplus</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> state<span class="token punctuation">.</span>counter<span class="token operator">*</span>state<span class="token punctuation">.</span>counter            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      ……<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在组件中可以直接把这个设定的方法当作一个属性来调用</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;h2&gt;&#123;&#123;$store.getters.counterplus&#125;&#125;&lt;&#x2F;h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>当我们需要在state的学生信息中取出年龄大于20的学生信息</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">counter</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span>            <span class="token literal-property property">student</span><span class="token operator">:</span><span class="token punctuation">[</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"zs"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ls"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ww"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ml"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>      ……<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用计算属性实现</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    &lt;h3&gt;使用计算属性&lt;&#x2F;h3&gt;    &lt;h3&gt;&#123;&#123; more20stu &#125;&#125;&lt;&#x2F;h3&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;App&quot;,  computed: &#123;    more20stu() &#123;      return this.$store.state.student.filter((student) &#x3D;&gt; student.age &gt; 20);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这种方法如果要在另一个组件中也取得同样的数据，我们就需要在另一个组件中也使用计算属性，这就造成了代码的重复</p><p><strong>使用getters实现</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">counter</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span>            <span class="token literal-property property">student</span><span class="token operator">:</span><span class="token punctuation">[</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"zs"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ls"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ww"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ml"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">more20stu</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> state<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">student</span> <span class="token operator">=></span> student<span class="token punctuation">.</span>age <span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;$store.getters.more20stu&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>getters同样可以作为一个参数进行传递</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">more20stu</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> state<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">student</span> <span class="token operator">=></span> student<span class="token punctuation">.</span>age <span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">more20stuLen</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> getters<span class="token punctuation">.</span>more20stu<span class="token punctuation">.</span>length        <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;$store.getters.more20stuLen&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>getters内的方法的返回值可以是一个方法，组件内就可以将这个属性作为一个方法调用，对其进行传值</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">student</span><span class="token operator">:</span><span class="token punctuation">[</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"zs"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ls"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ww"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ml"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">more20stu</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> state<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">student</span> <span class="token operator">=></span> student<span class="token punctuation">.</span>age <span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">more20stuLen</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> getters<span class="token punctuation">.</span>more20stu<span class="token punctuation">.</span>length            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">moreAgeStu</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> <span class="token parameter">age</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> state<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">student</span> <span class="token operator">=></span> student<span class="token punctuation">.</span>age<span class="token operator">></span>age<span class="token punctuation">)</span>                  <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;$store.getters.more20stu&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;$store.getters.more20stuLen&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;$store.getters.moreAgeStu(30)&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h4><p>Vuex的store状态的唯一的更新方式：提交Mutation</p><p>Mutation主要包括两部分：</p><ul><li>字符串的事件类型（type）</li><li>一个回调函数（handler），该回调函数的第一个参数就是state</li></ul><p>使用例子见多页面状态管理</p><p>除了state，还可以给Mutation传入其他参数（甚至是一个对象），这些参数被称为是mutation的载荷（Payload）</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    &lt;h2&gt;&#123;&#123; $store.state.counter &#125;&#125;&lt;&#x2F;h2&gt;    &lt;button @click&#x3D;&quot;addCount(5)&quot;&gt;+5&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;addCount(10)&quot;&gt;+10&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;addStu&quot;&gt;添加学生&lt;&#x2F;button&gt;    &lt;h3&gt;&#123;&#123; $store.state.student &#125;&#125;&lt;&#x2F;h3&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &quot;App&quot;,  methods: &#123;    addCount(count) &#123;      this.$store.commit(&quot;incrementCount&quot;, count);    &#125;,    addStu() &#123;      this.$store.commit(&quot;addStudent&quot;);    &#125;,  &#125;,&#125;;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">counter</span><span class="token operator">:</span><span class="token number">1000</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">incrementCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>count</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  state<span class="token punctuation">.</span>counter <span class="token operator">+=</span> count<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">114</span><span class="token punctuation">,</span>                        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"qq"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">45</span>                  <span class="token punctuation">&#125;</span>                  state<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mutation的commit()除了上面那种普通提交格式，还能给他传入一个对象作为提交参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">addCount</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//普通提交方式    </span>    <span class="token comment">// this.$store.commit("incrementCount",count)</span>    <span class="token comment">//特殊提交方式    </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'incrementCount'</span><span class="token punctuation">,</span>                count        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果以这种提交风格，count会变成一个对象，需要取对象内的count才能获取到具体的值，因此我们要以这种风格传参时，一般把第二个参数写为payload</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">incrementCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//console.log(count)    </span>    <span class="token comment">//state.counter += count.count;    </span>    state<span class="token punctuation">.</span>counter <span class="token operator">+=</span> payload<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="响应规则"><a href="#响应规则" class="headerlink" title="响应规则"></a>响应规则</h5><p>Vuex的store中的state是响应式的, 当state中的数据发生改变时, Vue组件会自动更新。</p><p>因此我们需要遵守Vuex的一些规则：</p><ul><li><p>提前在store中初始化好所需的属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">info</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'wwh'</span><span class="token punctuation">,</span>                  <span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">'man'</span><span class="token punctuation">,</span>                  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">21</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>&#123;&#123;$store.state.info&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当初始化内容发生改变时，Vue会对该变化进行监听，并且通知使用到该内容的组件发生变化，但是如果我们直接往里面加东西，该信息只会进入state，但不会进入到Vue的响应式系统里面，就不会发生响应式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">// state.info.name='wh'      </span>    state<span class="token punctuation">.</span>info<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'福建泉州'</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当给state中的对象添加新属性时, 需要使用Vue的响应式方法，如使用下面的方式：</p><ul><li><p>使用Vue.set(obj, key, value)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// state.info.name='wh'    </span>    <span class="token comment">//非响应式    </span>    <span class="token comment">// state.info['addr']='福建泉州'    </span>    <span class="token comment">//响应式    </span>    Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>info<span class="token punctuation">,</span><span class="token string">'addr'</span><span class="token punctuation">,</span><span class="token string">'福建泉州'</span><span class="token punctuation">)</span>        Vue<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>info<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用新对象给旧对象重新赋值</p></li></ul></li></ul><h5 id="命名统一"><a href="#命名统一" class="headerlink" title="命名统一"></a>命名统一</h5><p>官方网站推荐将mutation里的方法名和组件里commit()的值做一个统一，我们可以将该名字以模块化的形式定义成常量导出，然后在我们需要用到该方法的地方引入，这样就做到的组件和Vuex的统一命名，便于管理、防止出错。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//store/mutation-types.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">INCREMENT</span> <span class="token operator">=</span> <span class="token string">'increment'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!--App.vue--&gt;……&lt;script&gt;    import HelloVuex from &#39;@&#x2F;components&#x2F;HelloVuex&#39;;    import &#123; INCREMENT &#125; from &#39;.&#x2F;store&#x2F;mutation-types&#39;;    ……      methods:&#123;            add()&#123;                  this.$store.commit(INCREMENT)            &#125;      &#125;    ……&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">……<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">INCREMENT</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mutation-types'</span>……  <span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">//类似数组的写法    </span>    <span class="token punctuation">[</span><span class="token constant">INCREMENT</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              state<span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="同步函数"><a href="#同步函数" class="headerlink" title="同步函数"></a>同步函数</h5><p>Vuex要求我们mutations中的方法必须是同步方法。</p><p>主要因为当我们使用devtools时，可以使用该插件帮我们捕捉mutation快照，但如果是异步操作则没法进行跟踪。</p><h4 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h4><p>当我们需要在Vuex里进行异步操作时，应该使用Actions来替代Mutations</p><p>使用步骤如下：</p><ol><li><p>定义好state和要对state进行操作的mutations方法</p></li><li><p>编写actions里的方法，在actions使用context.commit()将操作提交到mutations</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token comment">//1、定义state与mutations  </span>    <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">info</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'wwh'</span><span class="token punctuation">,</span>                  <span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">'man'</span><span class="token punctuation">,</span>                  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">21</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>info<span class="token punctuation">,</span><span class="token string">'addr'</span><span class="token punctuation">,</span><span class="token string">'福建泉州'</span><span class="token punctuation">)</span>                  Vue<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>info<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//2、定义actions  </span>    <span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">//方法的参数固定为context    </span>        <span class="token function">aUpdateInfo</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在页面里面通过dispatch调用actions里面的方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'aUpdateInfo'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>与mutations一样，actions也可以通过payload传递参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Vuex中</span><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">aUpdateInfo</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>message<span class="token punctuation">)</span>                    payload<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//组件中</span><span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'aUpdateInfo'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">"携带的信息"</span><span class="token punctuation">,</span>                <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"操作成功"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="异步写法"><a href="#异步写法" class="headerlink" title="异步写法"></a>异步写法</h5><p>说到异步就不得不提到Promise了，我们actions里面的方法可以将一个Promise对象作为返回值，并且他的resolve()跟着的then()方法可以写在调用了该actions方法的组件中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Vuex的Action</span><span class="token function">aUpdateInfo</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"操作成功"</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//App.vue</span><span class="token function">updateInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'aUpdateInfo'</span><span class="token punctuation">,</span><span class="token string">'携带的信息'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是哪个组件调用了actions中的方法后，Promise会把处理的信息返回给那个调用了actions中方法的组件，然后我们就可以在这个组件中的dispatch()方法后使用then()进行操作</p><h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><p>Vue运行时采用单一状态树，这导致Vuex可能需要处理许多状态，而这可能使store对象变得十分臃肿</p><p>因此我们可以将store分成许多块Module，每个Module拥有自己的state、mutations、actions、getters</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">……<span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'张三三'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>……<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>……<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>……<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>……<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            moduleA      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;$store.state.moduleA.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Mutations-1"><a href="#Mutations-1" class="headerlink" title="Mutations"></a>Mutations</h5><p>模块中的mutations的编写方法与Vuex实例中的一样，注意的是提交的方法不能与store中的Mutations中的方法重复</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//store的module中</span><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'张三三'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">updateName</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payload</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三'</span>            <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//组件中</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"updateName"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Getters-1"><a href="#Getters-1" class="headerlink" title="Getters"></a>Getters</h5><p><strong>getters的使用方法与设置方法与store中的一致</strong></p><p>但是他的getters中定义的方法多了一个参数<strong>rootState</strong>，用于取得store的state中的数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> state<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'11'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">fullName2</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters<span class="token punctuation">,</span>rootState</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> getters<span class="token punctuation">.</span>fullName <span class="token operator">+</span> rootState<span class="token punctuation">.</span>counter        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;$store.getters.fullName&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>&#123;&#123;$store.getters.fullName2&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="Actions-1"><a href="#Actions-1" class="headerlink" title="Actions"></a>Actions</h5><p>Actions中的编写方法也与store中的一样，不同的是，在module中的commit()方法，只<strong>对自己module中定义的子store的Mutation中的方法有用</strong>。</p><h3 id="方法属性映射"><a href="#方法属性映射" class="headerlink" title="方法属性映射"></a>方法属性映射</h3><h4 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h4><h4 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h4><p>当我们想要在组件模板中获取到Vuex中的数据需要像上方例子中，在Mustache语法中写一长串的表达式，而这在Vue的规范中并不推荐，因此我们更经常地将这些东西提取到计算属性中去计算完后再绑定在模板中。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;&#123;&#123;sum&#125;&#125;&lt;&#x2F;h1&gt;    &lt;h1&gt;&#123;&#123;bigSum&#125;&#125;&lt;&#x2F;h1&gt;    &lt;h3&gt;我叫&#123;&#123;name&#125;&#125;，学号&#123;&#123;stuNo&#125;&#125;&lt;&#x2F;h3&gt;……  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;App&#39;,  …………  computed: &#123;    sum() &#123;      return this.$store.state.sum    &#125;,    name() &#123;      return this.$store.state.name    &#125;,    stuNo() &#123;      return this.$store.state.stuNo    &#125;,    bigSum() &#123;      return this.$store.getters.bigSum    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个Vuex中的方法可以将store中state/getters中的属性映射到组件中，<strong>自动生成相应的计算属性</strong>，省去了自己写计算属性的麻烦。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;&#x2F;&#x2F; 引入两个方法import &#123;mapState,mapGetters&#125; from &#39;vuex&#39;;export default &#123;  name: &#39;App&#39;,  …………  computed: &#123;    &#x2F;&#x2F;对象写法：计算属性的名字对应Vuex中的属性名，key对应计算属性名，value对应Vuex中的属性名（要加引号）    &#x2F;&#x2F;用spread将方法返回的计算属性展开使用    ...mapState(&#123;      sum:&#39;sum&#39;,      name:&#39;name&#39;,      stuNo:&#39;stuNo&#39;    &#125;),    ...mapGetters(&#123;      bigSum:&#39;bigSum&#39;    &#125;)  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//数组写法：要求计算属性名和Vuex中的属性名一致，(数组元素既对应计算属性名也对应Vuex中的属性名，元素也需要加引号)</span>  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'stuNo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h4><h4 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h4><p>我们不仅可以借助mapState和mapGetters来帮我们自动生成计算属性，我们也可以借助mapMutations和mapActions来帮我自动生成对应的方法，在方法中通过调用commit/dispatch方法去联系Mutations/Actions中的值。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;&#123;&#123;sum&#125;&#125;&lt;&#x2F;h1&gt;    &lt;select v-model.number&#x3D;&quot;n&quot;&gt;      &lt;option value&#x3D;&quot;1&quot;&gt;1&lt;&#x2F;option&gt;      &lt;option value&#x3D;&quot;2&quot;&gt;2&lt;&#x2F;option&gt;      &lt;option value&#x3D;&quot;3&quot;&gt;3&lt;&#x2F;option&gt;    &lt;&#x2F;select&gt;    &lt;button @click&#x3D;&quot;increament&quot;&gt;+&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;decreament&quot;&gt;-&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;increamentOdd&quot;&gt;奇数时再加&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;increamentWait&quot;&gt;等一秒再加&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123;mapState,mapGetters&#125; from &#39;vuex&#39;;export default &#123;  name: &#39;App&#39;,  data() &#123;    return &#123;      n:1    &#125;  &#125;,  methods: &#123;    &#x2F;&#x2F;用commit调用Mutations中的方法    increament() &#123;      this.$store.commit(&#39;INCREAMENT&#39;,this.n)    &#125;,    decreament() &#123;      this.$store.commit(&#39;DECREAMENT&#39;,this.n)    &#125;,    &#x2F;&#x2F;用dispatch调用Actions中的方法    increamentOdd() &#123;      this.$store.dispatch(&#39;increamentOdd&#39;,this.n)    &#125;,    increamentWait() &#123;      this.$store.dispatch(&#39;increamentWait&#39;,this.n)    &#125;  &#125;,……&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不一样的是，自动生成的方法若没有在调用时传值则会将<strong>鼠标事件</strong>作为默认值传给Actions\Mutations，因此我们在调用生成后的方法时<strong>需要直接将要用的参数传入</strong>。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    ……    &lt;!--需要直接把n传给方法--&gt;    &lt;button @click&#x3D;&quot;increament(n)&quot;&gt;+&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;decreament(n)&quot;&gt;-&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;increamentOdd(n)&quot;&gt;奇数时再加&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;increamentWait(n)&quot;&gt;等一秒再加&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123;mapState,mapGetters,mapMutations, mapActions&#125; from &#39;vuex&#39;;export default &#123;  name: &#39;App&#39;,  data() &#123;    return &#123;      n:1    &#125;  &#125;,  methods: &#123;    &#x2F;&#x2F;对象写法：方法的名字对应Vuex中的方法名，key对应方法名，value对应Mutations中的方法名（要加引号）    &#x2F;&#x2F;用spread将映射方法返回的方法展开使用    ...mapMutations(&#123;      increament:&#39;INCREAMENT&#39;,      decreament:&#39;DECREAMENT&#39;    &#125;),          &#x2F;&#x2F;当两个地方的方法名相同时同样可以使用数组的写法    &#x2F;&#x2F; ...mapActions(&#123;    &#x2F;&#x2F;   increamentOdd:&#39;increamentOdd&#39;,    &#x2F;&#x2F;   increamentWait:&#39;increamentWait&#39;    &#x2F;&#x2F; &#125;)    ...mapActions([&#39;increamentOdd&#39;,&#39;increamentWait&#39;])  &#125;,  ……&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>若使用Store里面的module模块化导入参数时，可以在每个模块中开启命名空间</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> sumAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//开启模块内命名空间</span>  <span class="token literal-property property">namespaced</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">sum</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'wwh'</span><span class="token punctuation">,</span>    <span class="token literal-property property">stuNo</span><span class="token operator">:</span><span class="token string">'92'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token constant">INCREAMENT</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>sum <span class="token operator">+=</span> value    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token constant">DECREAMENT</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>sum <span class="token operator">-=</span> value    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increamentOdd</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>sum <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'INCREAMENT'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">increamentWait</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'INCREAMENT'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum<span class="token operator">*</span><span class="token number">10</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">personList</span><span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'zs'</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    sumAbout  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调用方式一"><a href="#调用方式一" class="headerlink" title="调用方式一"></a>调用方式一</h5><p>之后我们在使用上面四个方法进行映射时，可以在开头多加一个参数用来表示引用哪个模块（命名空间）中的方法，之后就不需要通过<code>.</code>的方式来获取Vuex中模块引入的参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;&#123;&#123;sum&#125;&#125;&lt;&#x2F;h1&gt;    &lt;h1&gt;&#123;&#123;bigSum&#125;&#125;&lt;&#x2F;h1&gt;    &lt;h3&gt;我叫&#123;&#123;name&#125;&#125;，学号&#123;&#123;stuNo&#125;&#125;&lt;&#x2F;h3&gt;    &lt;select v-model.number&#x3D;&quot;n&quot;&gt;      &lt;option value&#x3D;&quot;1&quot;&gt;1&lt;&#x2F;option&gt;      &lt;option value&#x3D;&quot;2&quot;&gt;2&lt;&#x2F;option&gt;      &lt;option value&#x3D;&quot;3&quot;&gt;3&lt;&#x2F;option&gt;    &lt;&#x2F;select&gt;    &lt;button @click&#x3D;&quot;increament(n)&quot;&gt;+&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;decreament(n)&quot;&gt;-&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;increamentOdd(n)&quot;&gt;奇数时再加&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;increamentWait(n)&quot;&gt;等一秒再加&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123;mapState,mapGetters,mapMutations, mapActions&#125; from &#39;vuex&#39;;export default &#123;  name: &#39;App&#39;,  data() &#123;    return &#123;      n:1    &#125;  &#125;,  methods: &#123;    ...mapMutations(&#39;sumAbout&#39;,&#123;      increament:&#39;INCREAMENT&#39;,      decreament:&#39;DECREAMENT&#39;    &#125;),    ...mapActions(&#39;sumAbout&#39;,[&#39;increamentOdd&#39;,&#39;increamentWait&#39;])  &#125;,  computed: &#123;    ...mapState(&#39;sumAbout&#39;,[&#39;sum&#39;,&#39;name&#39;,&#39;stuNo&#39;]),    ...mapGetters(&#39;sumAbout&#39;,[&#39;bigSum&#39;])  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调用方式二"><a href="#调用方式二" class="headerlink" title="调用方式二"></a>调用方式二</h5><p>常规写法下，我们可以在要调用的属性或方法名之前加上命名空间，用来调用不同module中的属性方法</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;import &#123;nanoid&#125; from &#39;nanoid&#39;export default &#123;name:&#39;Person&#39;,data() &#123;return &#123;name:&#39;&#39;&#125;&#125;,computed:&#123;personList()&#123;return this.$store.state.personAbout.personList&#125;,sum()&#123;return this.$store.state.countAbout.sum&#125;,firstPersonName()&#123;return this.$store.getters[&#39;personAbout&#x2F;firstPersonName&#39;]&#125;&#125;,methods: &#123;add()&#123;const personObj &#x3D; &#123;id:nanoid(),name:this.name&#125;this.$store.commit(&#39;personAbout&#x2F;ADD_PERSON&#39;,personObj)this.name &#x3D; &#39;&#39;&#125;,addWang()&#123;const personObj &#x3D; &#123;id:nanoid(),name:this.name&#125;this.$store.dispatch(&#39;personAbout&#x2F;addPersonWang&#39;,personObj)this.name &#x3D; &#39;&#39;&#125;,addPersonServer()&#123;this.$store.dispatch(&#39;personAbout&#x2F;addPersonServer&#39;)&#125;&#125;,&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="目录结构规范"><a href="#目录结构规范" class="headerlink" title="目录结构规范"></a>目录结构规范</h3><p>我们应该将Vuex中的mutations、getters、actions、modules抽离出来（state一般不抽出），以模块化的思想去建立store中的目录，然后全部导入到index.js将它们挂载到Vuex实例里面</p><ul><li>store<ul><li>modules<ul><li>moduleA.js</li><li>moduleB.js</li></ul></li><li>actions.js</li><li>getters.js</li><li>mutations.js</li><li>mutations-types.js</li><li>index.js</li></ul></li></ul><h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li><p>什么是vite？—— 新一代前端构建工具。</p></li><li><p>优势如下：</p><ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li><p>传统构建 与 vite构建对比图</p><ul><li><p>传统构建</p><ul><li><img src="https://cn.vitejs.dev/assets/bundler.37740380.png"/></li></ul></li><li><p>Vite构建</p><ul><li><img src="https://cn.vitejs.dev/assets/esm.3070012d.png"/></li></ul></li></ul></li></ul><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">## 创建工程npm init vite-app &lt;project-name&gt;## 进入工程目录cd &lt;project-name&gt;## 安装依赖npm install## 运行npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端工程化 </tag>
            
            <tag> 前端开发 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 框架学习 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app</title>
      <link href="/2022/05/16/uniapp/"/>
      <url>/2022/05/16/uniapp/</url>
      
        <content type="html"><![CDATA[<h1 id="Uniapp"><a href="#Uniapp" class="headerlink" title="Uniapp"></a>Uniapp</h1><h2 id="目录结构与配置"><a href="#目录结构与配置" class="headerlink" title="目录结构与配置"></a>目录结构与配置</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>使用HBuilderX自动生成的uniapp项目有以下文件</p><table><thead><tr><th>目录或文件</th><th>作用</th></tr></thead><tbody><tr><td>pages</td><td>存放所有页面的文件夹</td></tr><tr><td>static</td><td>存放所有静态资源的文件夹</td></tr><tr><td>unpackage</td><td>打包目录，存放各个平台的打包文件</td></tr><tr><td>components</td><td>存放组件的文件夹</td></tr><tr><td>App.vue</td><td>项目入口文件</td></tr><tr><td>index.html</td><td>项目初始页面</td></tr><tr><td>main.js</td><td>项目入口文件</td></tr><tr><td>manifest.json</td><td>应用配置文件，用于指定应用的名称、图标、权限等</td></tr><tr><td>pages.json</td><td>uniapp的全局配置文件，用来对uniapp进行全局配置</td></tr></tbody></table><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>在pages文件中可以在<code>globalStyle</code>对象中进行全局外观配置。</p><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F7F7F7</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新。</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持px。</td></tr></tbody></table><p><a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">https://uniapp.dcloud.io/collocation/pages?id=globalstyle</a></p><h3 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h3><p>可以直接在<code>pages</code>文件夹中使用鼠标右键创建页面，会自动生成一个文件夹与一个vue文件，这两个同名，并且会自动将此页面配置到<code>pages.json</code>中的<code>pages</code>数组中。</p><p><code>uni-app</code> 通过 pages 节点配置应用由哪些页面组成，pages 节点接收一个数组，数组每个项都是一个对象，其属性值如下：</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">path</td><td align="left">String</td><td align="left"></td><td align="left">配置页面路径</td></tr><tr><td align="left">style</td><td align="left">Object</td><td align="left"></td><td align="left">配置页面窗口表现，配置项参考下方 <a href="https://uniapp.dcloud.io/collocation/pages?id=style">pageStyle</a></td></tr></tbody></table><p><strong>Tips：</strong></p><ul><li>pages节点的第一项为应用入口页（即首页）</li><li><strong>应用中新增/减少页面</strong>，都需要对 pages 数组进行修改</li><li>文件名<strong>不需要写后缀</strong>，框架会自动寻找路径下的页面资源</li></ul><h3 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h3><p>页面样式配置会覆盖掉全局样式配置。</p><p>并且在style对象中，还可以通过其他的对象对不同的小程序中的样式进行配置。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;pages&quot;: [     &#123;        &quot;path&quot;: &quot;pages&#x2F;message&#x2F;message&quot;,        &quot;style&quot;: &#123;            &quot;navigationBarTitleText&quot;: &quot;消息页面&quot;,            &quot;enablePullDownRefresh&quot;: true,            &quot;h5&quot;: &#123;                &quot;pullToRefresh&quot;:&#123;                    &quot;color&quot;:&quot;#ff0000&quot;                &#125;            &#125;        &#125;    &#125;,    &#123;        &quot;path&quot;: &quot;pages&#x2F;index&#x2F;index&quot;,        &quot;style&quot;: &#123;            &quot;navigationBarTitleText&quot;: &quot;垃圾分类助手&quot;        &#125;    &#125;],<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://uniapp.dcloud.io/collocation/pages?id=pages">https://uniapp.dcloud.io/collocation/pages?id=pages</a></p><h3 id="Tabbar配置"><a href="#Tabbar配置" class="headerlink" title="Tabbar配置"></a>Tabbar配置</h3><p>可以直接通过<code>Tabbar</code>配置定制我们想要的Tabbar，并且点击后能跳转到对应的页面</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;tabBar&quot;: &#123;    &quot;color&quot;:&quot;#12aa9c&quot;,    &quot;selectedColor&quot;:&quot;#4CD964&quot;,    &#x2F;&#x2F;list属性内按钮个数为2-5个    &quot;list&quot;:[        &#123;            &quot;text&quot;:&quot;首页&quot;,            &quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,            &quot;iconPath&quot;:&quot;static&#x2F;tabsIcon&#x2F;search.png&quot;,            &quot;selectedIconPath&quot;:&quot;static&#x2F;tabsIcon&#x2F;search-active.png&quot;        &#125;,        &#123;            &quot;text&quot;:&quot;新闻&quot;,            &quot;pagePath&quot;:&quot;pages&#x2F;message&#x2F;message&quot;,            &quot;iconPath&quot;:&quot;static&#x2F;tabsIcon&#x2F;search.png&quot;,            &quot;selectedIconPath&quot;:&quot;static&#x2F;tabsIcon&#x2F;search-active.png&quot;        &#125;    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://uniapp.dcloud.io/collocation/pages?id=tabbar">https://uniapp.dcloud.io/collocation/pages?id=tabbar</a></p><h3 id="condition配置"><a href="#condition配置" class="headerlink" title="condition配置"></a>condition配置</h3><p>配置完成后可以实现直达某个页面的场景，但是仅仅开发时生效。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;condition&quot;:&#123;    &quot;current&quot;:0,    &quot;list&quot;:[        &#123;            &quot;name&quot;:&quot;详情页&quot;,            &quot;path&quot;:&quot;pages&#x2F;detail&#x2F;detail&quot;,            &quot;query&quot;:&quot;id&#x3D;1&quot;        &#125;    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://uniapp.dcloud.io/collocation/pages?id=condition">https://uniapp.dcloud.io/collocation/pages?id=condition</a></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p><a href="https://uniapp.dcloud.io/component/README">https://uniapp.dcloud.io/component/README</a></p><h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p>用于包裹文本内容（同<code>p</code>、<code>span</code>）</p><p><a href="https://uniapp.dcloud.io/component/text?id=text">https://uniapp.dcloud.io/component/text?id=text</a></p><h3 id="view"><a href="#view" class="headerlink" title="view"></a>view</h3><p>类似div</p><p>注意：hover-class将激活类的样式写在普通样式下面，要不然会不生效</p><table><thead><tr><th align="left">属性名</th><th align="left">类型</th><th align="left">默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">hover-class</td><td align="left">String</td><td align="left">none</td><td align="left">指定按下去的样式类。当 hover-class=”none” 时，没有点击态效果</td></tr><tr><td align="left">hover-stop-propagation</td><td align="left">Boolean</td><td align="left">false</td><td align="left">指定是否阻止本节点的祖先节点出现点击态，App、H5、支付宝小程序、百度小程序不支持（支付宝小程序、百度小程序文档中都有此属性，实测未支持）</td></tr><tr><td align="left">hover-start-time</td><td align="left">Number</td><td align="left">50</td><td align="left">按住后多久出现点击态，单位毫秒</td></tr><tr><td align="left">hover-stay-time</td><td align="left">Number</td><td align="left">400</td><td align="left">手指松开后点击态保留时间，单位毫秒</td></tr></tbody></table><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><p><a href="https://uniapp.dcloud.io/component/button?id=button">https://uniapp.dcloud.io/component/button?id=button</a></p><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p><a href="https://uniapp.dcloud.io/component/image?id=image">https://uniapp.dcloud.io/component/image?id=image</a></p><p>注意：</p><ul><li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；<code>app-nvue平台，暂时默认为屏幕宽度</code></li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image&#123;will-change: transform&#125;</code> ,可优化此问题。</li><li>自定义组件里面使用 <code>&lt;image&gt;</code>时，若 <code>src</code> 使用相对路径可能出现路径查找失败的情况，故建议使用绝对路径。</li><li>webp格式的图片在Android上是内置支持的。iOS上不同平台不一样，具体如下：app-vue下，iOS不支持；app-nvue下，iOS支持；微信小程序2.9.0起，iOS支持。</li><li>svg 格式的图片在不同的平台支持情况不同。具体为：app-nvue 不支持 svg 格式的图片，小程序上只支持网络地址。</li></ul><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><p>页面跳转。</p><p>该组件类似HTML中的<code>&lt;a&gt;</code>组件，但只能跳转本地页面。目标页面必须在pages.json中注册。</p><p><a href="https://uniapp.dcloud.io/component/navigator">https://uniapp.dcloud.io/component/navigator</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../detail/detail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>详情页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--使用redirect没有返回按钮--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>navigator</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../detail/detail<span class="token punctuation">"</span></span> <span class="token attr-name">open-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>redirect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>详情页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>navigator</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以调用API进行跳转</p><p><a href="https://uniapp.dcloud.io/api/router?id=navigateto">https://uniapp.dcloud.io/api/router?id=navigateto</a></p><h4 id="uni-navigateTo-OBJECT"><a href="#uni-navigateTo-OBJECT" class="headerlink" title="uni.navigateTo(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/router?id=navigateto">uni.navigateTo(OBJECT)</a></h4><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><p>可以直接在起始页面用url拼接的方式传参</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'test?id=1&amp;name=uniapp'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在跳转页的onLoad中使用<code>option</code>接收参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//option为object类型，会序列化上个页面传递的参数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印出上个页面传递的参数。</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印出上个页面传递的参数。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>页面跳转路径有层级限制，不能无限制跳转新页面</li><li>跳转到 tabBar 页面只能使用 switchTab 跳转</li><li>路由API的目标页面必须是在pages.json里注册的vue页面。如果想打开web url，在App平台可以使用 <a href="http://www.html5plus.org/doc/zh_cn/runtime.html#plus.runtime.openURL">plus.runtime.openURL</a>或web-view组件；H5平台使用 window.open；小程序平台使用web-view组件（url需在小程序的联网白名单中）。在hello uni-app中有个组件ulink.vue已对多端进行封装，可参考。</li><li>APP-NVUE平台暂不支持以<code>this.getOpenerEventChannel()</code>方式获取<code>eventChannel</code>，请换用<code>this.$scope.eventChannel</code>来获取，具体方式请参考上述示例。</li></ul><h4 id="uni-redirectTo-OBJECT"><a href="#uni-redirectTo-OBJECT" class="headerlink" title="uni.redirectTo(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/router?id=redirectto">uni.redirectTo(OBJECT)</a></h4><p>关闭当前页面，跳转到应用内的某个页面。</p><p><strong>注意：</strong></p><ul><li>跳转到 tabBar 页面只能使用 switchTab 跳转</li></ul><h4 id="uni-reLaunch-OBJECT"><a href="#uni-reLaunch-OBJECT" class="headerlink" title="uni.reLaunch(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/router?id=relaunch">uni.reLaunch(OBJECT)</a></h4><p>关闭所有页面，打开到应用内的某个页面。</p><p><strong>注意：</strong> 如果调用了 <a href="https://uniapp.dcloud.net.cn/api/preload-page">uni.preloadPage(OBJECT)</a> 不会关闭，仅触发生命周期 <code>onHide</code></p><h4 id="uni-navigateBack-OBJECT"><a href="#uni-navigateBack-OBJECT" class="headerlink" title="uni.navigateBack(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/router?id=navigateback">uni.navigateBack(OBJECT)</a></h4><p>关闭当前页面，返回上一页面或多级页面。可通过 <code>getCurrentPages()</code> 获取当前的页面栈，决定需要返回几层。</p><h4 id="uni-preloadPage-OBJECT"><a href="#uni-preloadPage-OBJECT" class="headerlink" title="uni.preloadPage(OBJECT)"></a><a href="https://uniapp.dcloud.io/api/preload-page?id=preloadpage">uni.preloadPage(OBJECT)</a></h4><p>预加载页面，是一种性能优化技术。被预载的页面，在打开时速度更快。</p><h3 id="uniapp事件总线"><a href="#uniapp事件总线" class="headerlink" title="uniapp事件总线"></a>uniapp事件总线</h3><p><a href="https://uniapp.dcloud.io/collocation/frame/communication">https://uniapp.dcloud.io/collocation/frame/communication</a></p><p>uniapp提供了一个<code>uni.$on</code>的api，用于绑定全局自定义事件（如同Vue中的全局事件总线），可以使用<code>uni.$emit</code>触发</p><h2 id="uniapp样式"><a href="#uniapp样式" class="headerlink" title="uniapp样式"></a>uniapp样式</h2><ul><li><p>定义在页面文件夹中的称为局部样式，写在App.vue中的为全局样式，可以使用@import去导入样式</p></li><li><p>局部样式会覆盖全局样式</p></li><li><p>uniapp支持图标字体，使用方式与web相同</p><ul><li>字体文件小于40kb，会自动转换为base64格式</li><li>字体大于40kb，需要手动转换，否则不生效</li><li>字体引用推荐使用~@开头的绝对路径</li></ul></li><li><p>rpx自适应字体大小</p></li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h3><p><a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%E5%BA%94%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%e5%ba%94%e7%94%a8%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f</a></p><p><strong>注意</strong></p><ul><li>应用生命周期仅可在<code>App.vue</code>中监听，在其它页面监听无效。</li><li>onlaunch里进行页面跳转，检测更新，网络监听，初始化数据，如遇白屏报错，请参考<a href="https://ask.dcloud.net.cn/article/35942">https://ask.dcloud.net.cn/article/35942</a></li><li>onPageNotFound 页面实际上已经打开了（比如通过分享卡片、小程序码）且发现页面不存在，才会触发，api 跳转不存在的页面不会触发（如 uni.navigateTo）</li></ul><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><p><a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%e9%a1%b5%e9%9d%a2%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f</a></p><h4 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//下拉刷新的生命周期钩子</span><span class="token function">onPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发了下拉刷新'</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'wwh'</span>        <span class="token comment">//停止当前下拉刷新</span>        uni<span class="token punctuation">.</span><span class="token function">stopPullDownRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">//同样可以使用API uni.startPullDownRefresh()来开启下拉刷新，下拉刷新的钩子就能监听到，常用于刷新按钮</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h4><p>可以在页面对象中配置距离下边多少触发上拉加载</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"pages"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string-property property">"path"</span><span class="token operator">:</span> <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span><span class="token string-property property">"style"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"navigationBarTitleText"</span><span class="token operator">:</span> <span class="token string">"垃圾分类助手"</span><span class="token punctuation">,</span><span class="token string-property property">"onReachBottomDistance"</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>…………    <span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//触底触发的生命周期函数</span><span class="token function">onReachBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'页面触底了'</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrs<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h3><p><a href="https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%e7%bb%84%e4%bb%b6%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f</a></p><p>与vue一样</p><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p><a href="https://uniapp.dcloud.io/api/request/request?id=request">https://uniapp.dcloud.io/api/request/request?id=request</a></p><p>跟axios的用法差不多，改了个API</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">bthClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"https://www.fastmock.site/mock/9843734bc8c44034f659599c76a53f73/erp/login/login"</span><span class="token punctuation">,</span>            <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">"GET"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h2><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage">https://uniapp.dcloud.io/api/storage/storage?id=setstorage</a></p><p>uniapp的本地存储与web端有所不同</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">uni<span class="token punctuation">.</span><span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'storage_key'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="媒体操作"><a href="#媒体操作" class="headerlink" title="媒体操作"></a>媒体操作</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><a href="https://uniapp.dcloud.io/api/media/image">https://uniapp.dcloud.io/api/media/image</a></p>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端开发 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> uni-app </tag>
            
            <tag> 移动端开发 </tag>
            
            <tag> 框架学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Think PHP5.1</title>
      <link href="/2022/05/16/thinkphp/"/>
      <url>/2022/05/16/thinkphp/</url>
      
        <content type="html"><![CDATA[<h1 id="ThinkPHP"><a href="#ThinkPHP" class="headerlink" title="ThinkPHP"></a>ThinkPHP</h1><p>TP5.1开发者手册：<a href="https://www.kancloud.cn/manual/thinkphp5_1/353955">https://www.kancloud.cn/manual/thinkphp5_1/353955</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ThinkPHP是一个免费开源的，快速、简单的面向对象的轻量级PHP开发框架，是为了敏捷WEB应用开发和简化企业应用开发而诞生的。</p><p>ThinkPHP诞生以来一直秉承简洁实用的设计原则，在保持出色的性能和至简的代码的同时，也注重易用性。</p><h3 id="选择ThinkPHP-5的原因"><a href="#选择ThinkPHP-5的原因" class="headerlink" title="选择ThinkPHP 5的原因"></a>选择ThinkPHP 5的原因</h3><ul><li>采用了全新的架构思想</li><li>在ThinkPHP 3的基础上对核心进行了优化</li><li>支持composer方式安装</li><li>对API进行了大量优化，更符合现代Web开发的方式</li><li>国人开发，文档齐全</li><li>国内很多软件公司的选择</li></ul><h3 id="学习MVC开发框架的前置要求"><a href="#学习MVC开发框架的前置要求" class="headerlink" title="学习MVC开发框架的前置要求"></a>学习MVC开发框架的前置要求</h3><ul><li>掌握PHP基础，熟悉命名空间的基本用法</li><li>掌握PHP面向对象编程的基础知识</li><li>熟悉MVC模式</li><li>熟悉使用一种关系型数据库管理系统（如MySQL）</li><li>对git与composer有一定的了解</li></ul><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><h3 id="MVC简介"><a href="#MVC简介" class="headerlink" title="MVC简介"></a>MVC简介</h3><p><strong>MVC模式</strong>(Model-view-controller)是软件工程中的一种<strong>软件架构</strong>模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p><ul><li>模型（Model）：程序员编写程序应有的功能（实现算法等）、数据库专家进行数据管理和数据库设计（可以实现具体的功能）。</li><li>视图（View）：界面设计人员进行图形界面设计。</li><li>控制器（Controller）：负责转发请求，对请求进行处理。</li></ul><p>MVC模式的目的是实现一种动态的程序设计，使后续对程序的修改和扩展简化，并且使程序的某一部分的重复利用成为可能。</p><p>除此之外，此模式通过对复杂度的简化，使程序结构更加直观。软件系统通过的对自身基本部分分离的同时也赋予了各个基本部分应有的功能。</p><h4 id="MVC模式输入输出流程"><a href="#MVC模式输入输出流程" class="headerlink" title="MVC模式输入输出流程"></a>MVC模式输入输出流程</h4><ol><li>Controller接收用户输入</li><li>Controller调用Model进行业务逻辑处理（控制）</li><li>Controller通知/调用View进行界面显示处理（控制）</li><li>View根据需要适当参照Model的值</li><li>View进行界面显示处理</li></ol><h4 id="传统开发模式与MVC开发模式的区别"><a href="#传统开发模式与MVC开发模式的区别" class="headerlink" title="传统开发模式与MVC开发模式的区别"></a>传统开发模式与MVC开发模式的区别</h4><h5 id="传统开发模式"><a href="#传统开发模式" class="headerlink" title="传统开发模式"></a>传统开发模式</h5><ul><li>显示和业务逻辑处理耦合</li><li>业务逻辑和数据操作耦合</li><li>显示和数据操作耦合</li></ul><h5 id="MVC开发模式"><a href="#MVC开发模式" class="headerlink" title="MVC开发模式"></a>MVC开发模式</h5><ul><li>结构清晰</li><li>职责清晰</li><li>不是具体技术，而是一种理念</li></ul><h4 id="MVC模式的优势"><a href="#MVC模式的优势" class="headerlink" title="MVC模式的优势"></a>MVC模式的优势</h4><ol><li><strong>各司其职，互不干涉</strong>——三个层一但哪一层的需求发生了变化，就只需要更改相应层中的代码而不会影响到其他层中的代码。</li><li><strong>有利于开发分工</strong>——由于按层把系统分开，那么就能更好的实现开发中的分工。</li><li><strong>有利于组件的重用</strong>——分层后更有利于组件的重用。如控制层可独立成一个能用的组件，视图层也可做成通用的操作界面。</li></ol><h4 id="MVC模式的不足"><a href="#MVC模式的不足" class="headerlink" title="MVC模式的不足"></a>MVC模式的不足</h4><ol><li><strong>增加了系统结构和实现的复杂性</strong>——对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。</li><li><strong>视图与控制器间的过于紧密的连接</strong>——视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。</li><li><strong>视图对模型数据的低效率访问</strong>——依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。</li></ol><h4 id="MVC的典型变形"><a href="#MVC的典型变形" class="headerlink" title="MVC的典型变形"></a>MVC的典型变形</h4><p>没有View的API接口开发</p><p>Model分层</p><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><p>应用项目：<a href="https://github.com/top-think/think">https://github.com/top-think/think</a></p><p>核心框架：<a href="https://github.com/top-think/framework">https://github.com/top-think/framework</a></p><p>将核心框架文件夹重命名为thinkphp，然后移动到应用项目的文件夹中即可</p><p>可以打开应用项目中public文件夹里的index.php文件测试是否安装成功</p><h3 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h3><p>tp5.1版本默认采用多模块的架构，并且支持单一模块设计，所有模块的命名空间均以app作为根命名空间（可通过环境变量——config文件夹里的app.php配置文件更改）。</p><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><h5 id="目录和文件"><a href="#目录和文件" class="headerlink" title="目录和文件"></a>目录和文件</h5><p>目录使用小写+下划线</p><p>类的文件名均以命名空间定义，并且命名空间的路径和类库文件所在路径一致</p><p><strong>类文件</strong>采用驼峰法命名（首字母大写），其它文件采用小写+下划线命名</p><p><strong>类名和类文件名保持一致</strong>，统一采用驼峰法命名（首字母大写）</p><h5 id="函数和类、属性名"><a href="#函数和类、属性名" class="headerlink" title="函数和类、属性名"></a>函数和类、属性名</h5><p>类采用驼峰法（首字母大写）</p><p>函数使用小写字母和下划线（小写字母开头）</p><p>方法使用驼峰法（首字母小写）</p><p>属性使用驼峰法（首字母小写）</p><p>以双下划线<code>__</code>打头的函数或方法作为魔术方法</p><h4 id="模块创建"><a href="#模块创建" class="headerlink" title="模块创建"></a>模块创建</h4><p>在application中创建新的文件夹作为子模块，每个模块文件夹中都有一个controller文件夹，在该文件夹中创建类，然后我们就可以在类里面实现我们想要实现的方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; &#x2F;frontend&#x2F;User&#x2F;login&lt;?phpnamespace app\frontend\controller;use app\backend\controller\Admin as Back;class User&#123;    function login()&#123;        echo &quot;吴炜瀚登录成功&quot;;    &#125;    function back()&#123;        $instant &#x3D; new Back();        return $instant-&gt;hello();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; &#x2F;backend&#x2F;Admin&#x2F;hello&lt;?phpnamespace app\backend\controller;class Admin&#123;    function hello()&#123;        return &quot;201841054092登录成功&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以用**use…as…**关键字，将其他模块的方法引入到自己模块里，通过实例化后进行调用</p><h4 id="模块调用"><a href="#模块调用" class="headerlink" title="模块调用"></a>模块调用</h4><p>我们打开public文件夹里的index.php后，在该url后面加上**/模块名/控制器名/方法名**即可完成方法调用</p><p><a href="http://localhost/thinkPHP/homeworkOne/public/index.php/frontend/User/login">http://localhost/thinkPHP/homeworkOne/public/index.php/frontend/User/login</a></p><p>我们也可以通过修改config/app.php文件夹里面的模块设置来简化打开的url</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 默认模块名&#39;default_module&#39;         &#x3D;&gt; &#39;frontend&#39;,&#x2F;&#x2F; 禁止访问模块&#39;deny_module_list&#39;       &#x3D;&gt; [&#39;common&#39;],&#x2F;&#x2F; 默认控制器名&#39;default_controller&#39;     &#x3D;&gt; &#39;User&#39;,&#x2F;&#x2F; 默认操作名&#39;default_action&#39;         &#x3D;&gt; &#39;login&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://localhost/thinkPHP/homeworkOne/public/">http://localhost/thinkPHP/homeworkOne/public/</a></p><p>注意：common是一个特殊的模块，一般用于放置一些公共的类库用于其他模块的重用或者继承，因此我们默认禁止直接访问该文件</p><h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><p>我们可以将app配置文件中的应用调试模式设置为true，这样在报错时就可以看到具体的错误</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 应用调试模式&#39;app_debug&#39;              &#x3D;&gt; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="惯例配置"><a href="#惯例配置" class="headerlink" title="惯例配置"></a>惯例配置</h4><p>ThinkPHP追寻惯例重于配置的原则，系统会按照一下顺序来加载配置文件（配置的优先顺序从右到左）</p><p>惯例配置-&gt;应用配置-&gt;模块配置-&gt;动态配置</p><ul><li>惯例配置：核心框架内置的配置文件，无需更改。</li><li>应用配置：每个应用的全局配置文件（框架安装后会生成初始的应用配置文件），有部分配置参数仅能在应用配置文件中设置。</li><li>模块配置：每个模块的配置文件（相同的配置参数会覆盖应用配置），有部分配置在参数模块配置中是无效的，因为已经使用过。</li><li>动态配置：主要是指在控制器或行为中进行（动态）更改配置，改配置方式只在当次请求有效，因为不会保存到配置文件中。</li></ul><p>与5.0版本最大的区别是：5.1版本的配置参数全部是二级配置，当没有制定一级配置名的时候，默认就是以app作为一级配置，一级配置名称通常来说就是所在的配置文件名。</p><h4 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h4><p>默认配置都在应用配置目录application下的config文件夹的app.php配置文件中，并且配置参数区分大小写。</p><h5 id="扩展配置"><a href="#扩展配置" class="headerlink" title="扩展配置"></a>扩展配置</h5><p>在config文件夹中知识列出了系统内置的配置文件，我们还可以增加其他的自定义配置文件（以email.php为例），配置文件的名称就是一级配置名。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;email.php&lt;?phpreturn[    &#39;username&#39; &#x3D;&gt; &#39;10001@qq.com&#39;,    &#39;password&#39; &#x3D;&gt; &#39;123456&#39;];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模块配置"><a href="#模块配置" class="headerlink" title="模块配置"></a>模块配置</h4><p>我们可以在模块下面创建一个config文件夹，在该文件夹中存放该模块的配置</p><p><strong>一但模块目录下存在config目录，则应用配置目录下的模块配置则无效</strong>，也不会对两个目录的配置进行合并</p><p>同样，我们也可以在应用配置目录下的config目录下再创建一个名字与模块名一样的文件夹用于存放该模块的配置</p><p><strong>涉及到配置参数的定义有效性问题，下列配置参数在模块配置中定义（包括动态配置）无效，必须在应用配置中设置</strong></p><table><thead><tr><th>配置参数</th><th>描述</th></tr></thead><tbody><tr><td>app_debug</td><td>应用调试模式（支持环境变量配置）</td></tr><tr><td>app_trace</td><td>应用trace（支持环境变量配置）</td></tr><tr><td>class_suffix</td><td>类后缀</td></tr><tr><td>default_filter</td><td>默认过滤机制</td></tr><tr><td>root_namespace</td><td>根命名空间</td></tr><tr><td>pathinfo_depr</td><td>PATH_INFO分隔符</td></tr><tr><td>uri_route_must</td><td>路由强制模式</td></tr><tr><td>auto_bind_must</td><td>路由强制模式</td></tr><tr><td>default_lang</td><td>默认语言</td></tr><tr><td>lang_switch_on</td><td>多语言切换</td></tr></tbody></table><h4 id="配置读取"><a href="#配置读取" class="headerlink" title="配置读取"></a>配置读取</h4><h5 id="Config类"><a href="#Config类" class="headerlink" title="Config类"></a>Config类</h5><p>要使用Config类需要先在类文件中引入</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">use think\facade\Config;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以用Config类来读取文件中的配置信息</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function getConf()&#123;    &#x2F;&#x2F;读取所有的配置参数    dump(Config::get());    &#x2F;&#x2F;读取某个一级配置的所有配置参数    dump(Config::get(&#39;app.&#39;));    dump(Config::pull(&#39;app&#39;));    &#x2F;&#x2F;读取特定配置参数的值    dump(Config::get(&#39;app.default_controller&#39;));    &#x2F;&#x2F;判断某个设置参数是否存在    dump(Config::has(&#39;app.default_controller&#39;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中get()方法与pull()方法的输出内容一样，只不过get方法要在文件名后面加一个 . ，而pull()方法只需要传入文件名即可</p><h5 id="助手函数"><a href="#助手函数" class="headerlink" title="助手函数"></a>助手函数</h5><p>系统定义了一个助手函数config</p><p>我们可以调用config()方法来读取配置文件中的配置信息</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function test()&#123;        &#x2F;&#x2F;读取全部配置文件        $configs &#x3D; config();        var_dump($configs);        &#x2F;&#x2F;读取应用文件配置        $appConfig &#x3D; config(&#39;app.&#39;);        var_dump($appConfig);        &#x2F;&#x2F;读取日志文件配置        $logConfig &#x3D; config(&#39;log.&#39;);        var_dump($logConfig);        &#x2F;&#x2F;读取特定文件配置        $appConfig &#x3D; config(&#39;app.app_name&#39;);        var_dump($appConfig);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="URL和路由"><a href="#URL和路由" class="headerlink" title="URL和路由"></a>URL和路由</h2><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><h4 id="单一入口"><a href="#单一入口" class="headerlink" title="单一入口"></a>单一入口</h4><p>ThinkPHP采用单一入口模式进行部署和访问，无论完成什么功能，一个应用都有一个统一（但不一定是唯一）的入口。</p><p>应该说，所有应用都是从入口文件开始的，并且不同应用的入口文件是类似的。</p><h4 id="单一入口的优势"><a href="#单一入口的优势" class="headerlink" title="单一入口的优势"></a>单一入口的优势</h4><ol><li>整体项目较为规范。同一入口往往其不同操作之间具有相同的规则。</li><li>控制较为灵活。拦截方便，譬如一些权限控制、用户登录方面的判断和操作可以统一处理。</li><li>所有网站都通过一个入口文件进行访问不会造成太大的压力。</li></ol><h4 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h4><p>5.1的默认应用入口文件位于<strong>public/index.php</strong></p><h4 id="隐藏入口文件"><a href="#隐藏入口文件" class="headerlink" title="隐藏入口文件"></a>隐藏入口文件</h4><ol><li><p>找到PHP环境里apache配置里的<strong>httpd.conf</strong>，打开配置（去掉#）LoadModule rewrite_module modules/mod_rewrite.so</p></li><li><p>找到PHP环境里apache配置里的<strong>httpd-vhosts.conf</strong>，添加配置</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VirtualHost</span> <span class="token attr-name"><span class="token namespace">*:</span>80</span><span class="token punctuation">></span></span>    ServerName localhost    DocumentRoot D:/wamp64/www    &lt;Directory "D:/wamp64/www/">        Options +Indexes +FollowSymLinks +MultiViews        AllowOverride All        Require local    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Directory</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VirtualHost</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        如果我们想使用域名的方式访问ThinkPHP5的项目，我们可以将目录的路径改变为框架中public文件夹的路径</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VirtualHost</span> <span class="token attr-name"><span class="token namespace">*:</span>80</span><span class="token punctuation">></span></span>    ServerName www.tp5.com    DocumentRoot D:\wamp64\www\thinkPHP\lesson\public    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Directory</span> <span class="token attr-name"><span class="token namespace">"D:</span>\wamp64\www\thinkPHP\lesson\public"</span><span class="token punctuation">></span></span>        Options +Indexes +FollowSymLinks +MultiViews        AllowOverride All        Require local    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Directory</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VirtualHost</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        然后在C:\Windows\System32\drivers\etc文件夹中的hosts文件中添加配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">#127.0.0.1 localhost::1 localhost192.168.30.128 root127.0.0.1 www.tp5.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>修改完配置文件需要重启wamp服务</li></ol><p>此时我们就已经能用<a href="http://www.tp5.com直接进入项目的index.php欢迎页面/">www.tp5.com直接进入项目的index.php欢迎页面</a></p><p>如果上述方法执行失败的话还需要在.htaccess定义重写规则（public\ .htaccess ），详情可见开发者文档URL重写</p><h4 id="入口文件的绑定"><a href="#入口文件的绑定" class="headerlink" title="入口文件的绑定"></a>入口文件的绑定</h4><h5 id="对入口文件进行修改（不推荐）"><a href="#对入口文件进行修改（不推荐）" class="headerlink" title="对入口文件进行修改（不推荐）"></a>对入口文件进行修改（不推荐）</h5><p>直接在初始的index.php入口文件中将</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Container::get(&#39;app&#39;)-&gt;run()-&gt;send();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Container::get(&#39;app&#39;)-&gt;bind(&#39;admin&#39;)-&gt;run()-&gt;send();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则我们初始的控制器就会被绑定为admin</p><h5 id="增加新的入口文件"><a href="#增加新的入口文件" class="headerlink" title="增加新的入口文件"></a>增加新的入口文件</h5><p>直接将初始的index.php入口文件复制并且重命名为admin.php</p><p>此时我们就可以从新复制出来的admin.php进入项目，进入的url为</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>路由是应用开发中比较关键的一个环节，其主要作用包括但不限于：</p><ul><li>让URL更规范以及优雅</li><li>隐式传入额外的请求参数</li><li>统一拦截并进行权限检查等操作（例如登录验证操作）</li><li>绑定请求数据（GET、POST）</li><li>使用请求缓存</li><li>路由中间件支持（5.1.6版本以上）</li></ul><p>路由解析的过程一般包括：</p><ul><li>路由定义：完成路由规则的定义和参数的设置</li><li>路由检测：检查当前的URL请求是否有匹配的路由</li><li>路由解析：解析当前路由实际对应的操作（方法或闭包）</li><li>路由调度：执行路由解析的结果调度（主业务逻辑）</li></ul><h4 id="强制路由（不推荐）"><a href="#强制路由（不推荐）" class="headerlink" title="强制路由（不推荐）"></a>强制路由（不推荐）</h4><p>在应用配置app.php中设置’url_route_must’=&gt;true，将开启强制使用路由。开启此配置之后必须严格给每一个访问地址定义路由规则（<strong>包括首页</strong>），否则将抛出异常。</p><p>修改之前我们可以直接使用域名<strong>tp5.com</strong>进入项目，修改之后再访问该域名则会报错：当前访问路由未定义或不匹配。</p><p>我们也可以在route文件夹中的route.php进行修改，首页的路由规则采用 / 定义即可。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpRoute::get(&#39;think&#39;, function () &#123;    return &#39;hello,ThinkPHP5!&#39;;&#125;);Route::get(&#39;hello&#x2F;:name&#39;, &#39;index&#x2F;hello&#39;);return [];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可在route文件夹中注册一个路由文件api.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;这里使用get方式访问，同样也可以使用post方式访问Route::get(&#39;alipay&#39;, function () &#123;    return &#39;使用支付宝支付&#39;;&#125;);return [];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在路由中定义了新的路由方式会使之前默认的路由方式失效</p><p>我们配置路由：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;&#x2F;home&#39;,&#39;index&#x2F;index&#x2F;index&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次访问<a href="http://www.tp5.com/index/index/index">http://www.tp5.com/index/index/index</a> ，报错：<em>非法请求:index/index/index</em></p><p>此时只能通过<a href="http://www.tp5.com/home%E8%BF%9B%E5%85%A5%E5%88%B0%E8%AF%A5%E9%A1%B5%E9%9D%A2%E4%B8%AD">http://www.tp5.com/home进入到该页面中</a></p><h4 id="变量规则"><a href="#变量规则" class="headerlink" title="变量规则"></a>变量规则</h4><p>可以通过定义正则表达式来规范传入的参数</p><p>我们在模块中定义方法，并且传入参数id，可以直接在路由中访问</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">public function getUser($id)&#123;    return &quot;id为$id&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们再次从route/api.php定义路由去简化访问方式（:id表示动态地传入参数）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;&#x2F;user&#x2F;:id&#39;, &#39;index&#x2F;index&#x2F;getUser&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时再次用原来的方式访问则报错<em>非法请求:index/Index/getUser/id/5</em></p><h5 id="全局变量规则"><a href="#全局变量规则" class="headerlink" title="全局变量规则"></a>全局变量规则</h5><p>全局变量规则对全部路由都生效</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;设置ID的变量规则Route::pattern(&#39;id&#39;,&#39;\d+&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时输出的参数会只有符合变量规则的数字</p><p>当传入的参数没有符合变量规则的存在，则报错</p><p>参数可以传入一个<strong>数组</strong>来实现批量添加变量规则</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::pattern([    &#39;name&#39; &#x3D;&gt; &#39;\w+&#39;,    &#39;id&#39;   &#x3D;&gt; &#39;\d+&#39;,]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="局部变量规则"><a href="#局部变量规则" class="headerlink" title="局部变量规则"></a>局部变量规则</h5><p>局部变量规则仅对当前设置的路由生效，并且优先级更高</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;&#x2F;user&#x2F;:id&#39;, &#39;index&#x2F;index&#x2F;getUser&#39;)        -&gt;pattern([&#39;id&#39;&#x3D;&gt;&#39;[a-zA-Z]+&#39;]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不需要开头添加<code>^</code>或者在最后添加<code>$</code>，也不支持模式修饰符，系统会自动添加。</p><h5 id="组合变量规则"><a href="#组合变量规则" class="headerlink" title="组合变量规则"></a>组合变量规则</h5><p>若路由规则较为特殊，可定义组合变量规则</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">public function getUserinfo()&#123;    return &quot;组合变量&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>组合变量的优势是路由规则中<strong>没有固定的分隔符</strong>，<strong>可以随意组合</strong>需要的变量规则和分割符</p><p>在变量后加上一个？表示此变量为可选变量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;&#x2F;userinfo-&lt;id&gt;&#x2F;&lt;name?&gt;&#39;,&#39;index&#x2F;index&#x2F;getUserinfo&#39;)        -&gt;parttern([&#39;id&#39;&#x3D;&gt;&#39;\d+&#39;,&#39;name&#39;&#x3D;&gt;&#39;[a-zA-Z]+&#39;]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="http://www.tp5.com/userinfo-2/a">http://www.tp5.com/userinfo-2/a</a></p><p><a href="http://www.tp5.com/userinfo-2">http://www.tp5.com/userinfo-2</a></p><p>以上两个连接都可以访问到getUserinfo()方法</p><p>在TP5.1中我们可以直接使用以下方法定义组合变量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;userinfo&#x2F;:id-&#x2F;:name?&#39;,&#39;index&#x2F;index&#x2F;getUserinfo&#39;)        -&gt;parttern([&#39;id&#39;&#x3D;&gt;&#39;\d+&#39;,&#39;name&#39;&#x3D;&gt;&#39;[a-zA-Z]+&#39;]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="http://www.tp5.com/userinfo/2-/a">http://www.tp5.com/userinfo/2-/a</a></p><p><a href="http://www.tp5.com/userinfo-2">http://www.tp5.com/userinfo-2</a></p><h5 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h5><p>可以把路由规则中的变量传入路由地址中，就可以实现一个动态路由</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;hello&#x2F;:name&#39;, &#39;index&#x2F;:name&#x2F;hello&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="路由地址"><a href="#路由地址" class="headerlink" title="路由地址"></a>路由地址</h4><h5 id="路由到模块-控制器-操作"><a href="#路由到模块-控制器-操作" class="headerlink" title="路由到模块/控制器/操作"></a>路由到模块/控制器/操作</h5><p>最常用的一种路由方式</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;路由到app.php中的默认模块Route::get(&#39;&#x2F;home&#39;,&#39;&#39;);&#x2F;&#x2F;路由到index控制器下的hello操作Route::get(&#39;hello&#x2F;:name&#39;, &#39;index&#x2F;hello&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>路由地址中支持多级控制器（不常用）</p><p>我们可以在index/controller目录下创建user文件夹，其中User类如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller\user;class user&#123;    function test()&#123;        return &#39;多级控制器&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;配置多级控制器路由Route::get(&#39;group&#39;,&#39;user.user&#x2F;test&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同样支持路由到动态模块、控制器或者操作</p><p><strong>我们可以传入额外的参数</strong></p><p>将参数隐式传入需要的操作中，有时能起一定的安全防护作用，在需要的时候才会调用该参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;&#x2F;user&#x2F;:id&#39;, &#39;index&#x2F;index&#x2F;getUser?name&#x3D;admin&#39;)        -&gt;pattern([&#39;id&#39;&#x3D;&gt;&#39;\d+&#39;]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>路由中若没有给出name的值，则name的默认值为null</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">public function getUser($id,$name&#x3D;&#39;null&#39;)&#123;        return &quot;id为$id,name为$name&quot;;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h5 id="路由到操作方法"><a href="#路由到操作方法" class="headerlink" title="路由到操作方法"></a>路由到操作方法</h5><p>与第一种方法差不多，本质的区别是直接执行某个控制器类的方法，而不需要去解析 <strong>模块/控制器/操作</strong>这些，同时也不会去初始化模块（因此不会调用模块的初始化方法）。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;user&#x2F;:id&#39;, &#39;@getUser?name&#x3D;admin&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h5 id="路由到类的方法"><a href="#路由到类的方法" class="headerlink" title="路由到类的方法"></a>路由到类的方法</h5><p>较为繁琐，一般不用</p><p><strong>动态方法格式</strong></p><p>\类的命名空间\类名@方法名</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;user&#x2F;:id&#39;, &#39;app\index\controller\Index@getUser?name&#x3D;admin&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>静态方法格式</strong></p><p>\类的命名空间\类名::方法名</p><hr><h5 id="路由到重定向地址"><a href="#路由到重定向地址" class="headerlink" title="路由到重定向地址"></a>路由到重定向地址</h5><p>重定向的外部地址必须以“/”或者http开头的地址。</p><p>如果路由地址以“/”或者“http”开头则会认为是一个重定向地址或者外部地址</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;路由到操作Route::get(&#39;user&#x2F;:id&#39;, &#39;@getUser?name&#x3D;admin&#39;);&#x2F;&#x2F;路由到重定向地址Route::get(&#39;&#x2F;baidu&#39;,&#39;http:&#x2F;&#x2F;www.baidu.com&#39;);Route::get(&#39;&#x2F;redirect&#39;,&#39;&#x2F;user&#x2F;30&#39;);&#x2F;&#x2F;id为30,name为admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以从控制台看到状态码为301，有两种方式可以自己设置状态码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;&#x2F;redirect&#39;,&#39;&#x2F;user&#x2F;30&#39;)-&gt;status(302);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::redirect(&#39;&#x2F;redirect&#39;,&#39;&#x2F;user&#x2F;30&#39;,302);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h5 id="路由到闭包函数"><a href="#路由到闭包函数" class="headerlink" title="路由到闭包函数"></a>路由到闭包函数</h5><p>（实际项目很少用）</p><p>我们的路由内可以是一个闭包函数，此函数同样支持参数的传递</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;think&#39;, function () &#123;    return &#39;hello,ThinkPHP5!&#39;;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;hello&#x2F;:name&#39;, function ($name) &#123;    return &#39;Hello,&#39; . $name;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h4 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h4><p>路由分组及规则定义支持指定路由参数，这些参数主要完成路由匹配检测以及行为执行</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th><th align="left">方法名</th></tr></thead><tbody><tr><td align="left">method</td><td align="left">请求类型检测，支持多个请求类型</td><td align="left">method</td></tr><tr><td align="left">ext</td><td align="left">URL后缀检测，支持匹配多个后缀</td><td align="left">ext</td></tr><tr><td align="left">deny_ext</td><td align="left">URL禁止后缀检测，支持匹配多个后缀</td><td align="left">denyExt</td></tr><tr><td align="left">https</td><td align="left">检测是否https请求</td><td align="left">https</td></tr><tr><td align="left">domain</td><td align="left">域名检测</td><td align="left">domain</td></tr><tr><td align="left">before</td><td align="left">前置行为（检测）</td><td align="left">before</td></tr><tr><td align="left">after</td><td align="left">后置行为（执行）</td><td align="left">after</td></tr><tr><td align="left">merge_extra_vars</td><td align="left">合并额外参数</td><td align="left">mergeExtraVars</td></tr><tr><td align="left">complete_match</td><td align="left">是否完整匹配路由</td><td align="left">completeMatch</td></tr><tr><td align="left">model</td><td align="left">绑定模型</td><td align="left">model</td></tr><tr><td align="left">cache</td><td align="left">请求缓存</td><td align="left">cache</td></tr><tr><td align="left">param_depr</td><td align="left">路由参数分隔符</td><td align="left">depr</td></tr><tr><td align="left">ajax</td><td align="left">Ajax检测</td><td align="left">ajax</td></tr><tr><td align="left">pjax</td><td align="left">Pjax检测</td><td align="left">pjax</td></tr><tr><td align="left">response</td><td align="left">绑定response_send行为</td><td align="left">response</td></tr><tr><td align="left">validate</td><td align="left">绑定验证器类进行数据验证</td><td align="left">validate</td></tr><tr><td align="left">header</td><td align="left">设置Response的header信息</td><td align="left">header</td></tr><tr><td align="left">append</td><td align="left">追加额外的参数（<code>5.1.5+</code>）</td><td align="left">append</td></tr><tr><td align="left">middleware</td><td align="left">注册路由中间件（<code>5.1.6+</code>）</td><td align="left">middleware</td></tr><tr><td align="left">merge_rule_regex</td><td align="left">合并路由规则（<code>V5.1.6+</code>）</td><td align="left">mergeRuleRegex</td></tr><tr><td align="left">filter</td><td align="left">请求变量过滤（<code>V5.1.16+</code>）</td><td align="left">filter</td></tr></tbody></table><h5 id="路由参数设置方法"><a href="#路由参数设置方法" class="headerlink" title="路由参数设置方法"></a>路由参数设置方法</h5><p>可批量添加路由参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;hello&#x2F;:name&#39;, &#39;index&#x2F;hello&#39;)    -&gt;ext(&#39;&#39;)    -&gt;https(false)    -&gt;domain(&#39;tp5demo.com&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="URL后缀"><a href="#URL后缀" class="headerlink" title="URL后缀"></a>URL后缀</h5><p>URL后缀若是全局统一的话，可以在应用配置文件app.php中设置url_html_suffix参数，若当前访问的URL地址中的URL是允许的伪静态后缀，那么后缀本身是不会被作为参数值传入</p><p>url_html_suffix参数设置如下</p><table><thead><tr><th align="left">配置值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>false</code></td><td align="left">禁止伪静态访问</td></tr><tr><td align="left">空字符串</td><td align="left">允许任意伪静态后缀</td></tr><tr><td align="left"><code>html</code></td><td align="left">只允许设置的伪静态后缀</td></tr></tbody></table><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;设置URL后缀检测Route::get(&#39;hello&#x2F;:name&#39;, &#39;index&#x2F;hello&#39;)    -&gt;ext(&#39;&#39;);&#x2F;&#x2F;不传入任何值表示不允许使用任何后缀访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;匹配多种后缀Route::get(&#39;hello&#x2F;:name&#39;, &#39;index&#x2F;hello&#39;)    -&gt;ext(&#39;html|shtml&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;设置禁止访问的URL后缀Route::get(&#39;hello&#x2F;:name&#39;, &#39;index&#x2F;hello&#39;)    -&gt;denyExt(&#39;jpg|png|gif&#39;);&#x2F;&#x2F;若denyExt不传入任何值则表示必须使用后缀访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="域名检测"><a href="#域名检测" class="headerlink" title="域名检测"></a>域名检测</h5><p>支持使用完整域名或者子域名进行检测</p><p>只有输入的url与domain中的域名相匹配时，该路由才会生效</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;&#x2F;&#39;, &#39;index&#x2F;hello&#39;)    -&gt;domain(&#39;www.tp5.com&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h5 id="HTTPS检测"><a href="#HTTPS检测" class="headerlink" title="HTTPS检测"></a>HTTPS检测</h5><p>检测当前是否使用HTTPS进行访问</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;hello&#x2F;:name&#39;, &#39;index&#x2F;hello&#39;)    -&gt;https(true);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>当该值为空或true时，表示必须使用https进行访问</li><li>当该值为false时，表示必须使用http进行访问</li></ul><hr><h5 id="缓存路由请求"><a href="#缓存路由请求" class="headerlink" title="缓存路由请求"></a>缓存路由请求</h5><p>对当前的路由请求进行缓存</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;think&#39;, function () &#123;    return &#39;hello,ThinkPHP5!&#39;;&#125;)-&gt;cache(10);&#x2F;&#x2F;缓存10s，即当修改return的内容后，10s后刷新才会生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们可以将应用配置文件app.php中的route_check_cache设置为true，之后在进行路由缓存的时候就可以在runtime/cache文件夹中查看到缓存的内容</p><hr><h4 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h4><p>设置跨域请求</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;hello&#x2F;:name&#39;, &#39;index&#x2F;hello&#39;)    -&gt;ext(&#39;html&#39;)    -&gt;allowCrossDomain();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>跨域请求一般会发送一条<code>OPTIONS</code>的请求，一旦设置了跨域请求的话，不需要自己定义<code>OPTIONS</code>请求的路由，系统会自动加上。</p><p>跨域请求系统会默认带上一些Header</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;来源Access-Control-Allow-Origin:*&#x2F;&#x2F;方法Access-Control-Allow-Methods:GET, POST, PATCH, PUT, DELETE&#x2F;&#x2F;响应头Access-Control-Allow-Headers:Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-Requested-With<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以自定义Header信息（header信息可在浏览器控制台查看）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;hello&#x2F;:name&#39;, &#39;index&#x2F;hello&#39;)    -&gt;ext(&#39;html&#39;)    -&gt;header(&#39;Access-Control-Allow-Origin&#39;,&#39;tp5.com&#39;)    -&gt;header(&#39;Access-Control-Allow-Credentials&#39;, &#39;true&#39;)    -&gt;allowCrossDomain();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注解路由"><a href="#注解路由" class="headerlink" title="注解路由"></a>注解路由</h4><p>要使用注解路由要现在app.php中将route_annotation设置为true</p><p>我们可以直接在类中建立一个新的方法，并且通过注释的方式直接注册一个路由</p><p>传统方法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;&#x2F;routeTest&#39;,&#39;routeTest&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注解路由：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;** * @route(&#39;&#x2F;routeTest&#39;) *&#x2F;function routeTest()&#123;    return &#39;注解路由&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们就可以直接访问</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;** * @param  string  $id id * @return mixed * @route(&#39;user&#x2F;:id&#39;,&#39;get&#39;)    -&gt;https(false)    -&gt;pattern([&#39;name&#39;&#x3D;&gt;&#39;\d+&#39;]) * *&#x2F;public function getUser($id,$name&#x3D;&#39;wwh&#39;)&#123;    return &quot;id为$id,name为$name&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在第二个参数中指定请求类型，并且我们可以直接在注解路由后面加上需要的规则</p><p>注意：必须严格使用<code>@route(</code>（区分大小写，<code>route</code>和<code>(</code>之间不能有空格），<strong>建议路由定义写在注释最后一段，否则后面需要一个空行</strong>。</p><h4 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h4><p>该功能允许把相同前缀的路由定义合并分组</p><p>优点：简化路由定义；提高路由匹配效率</p><p>传统定义路由的方式，每个路由之前都有一个/user开头</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::post(&#39;&#x2F;user&#x2F;login&#39;,&#39;user.user&#x2F;login&#39;);Route::get(&#39;&#x2F;user&#x2F;query&#39;,&#39;user.user&#x2F;query&#39;);Route::post(&#39;&#x2F;user&#x2F;add&#39;,&#39;user.user&#x2F;add&#39;);Route::put(&#39;&#x2F;user&#x2F;edit&#39;,&#39;user.user&#x2F;edit&#39;);Route::delete(&#39;&#x2F;user&#x2F;delete&#39;,&#39;user.user&#x2F;delete&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>采用路由分组，可以直接将开头的/user提取出来，并且在闭包函数里面注册路由</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;路由分组Route::group(&#39;&#x2F;user&#39;,function ()&#123;    Route::post(&#39;&#x2F;login&#39;,&#39;user.user&#x2F;login&#39;);    Route::get(&#39;&#x2F;query&#39;,&#39;user.user&#x2F;query&#39;);    Route::post(&#39;&#x2F;add&#39;,&#39;user.user&#x2F;add&#39;);    Route::put(&#39;&#x2F;edit&#39;,&#39;user.user&#x2F;edit&#39;);    Route::delete(&#39;&#x2F;delete&#39;,&#39;user.user&#x2F;delete&#39;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用prefix()方法简化相同路由地址的定义</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::group(&#39;&#x2F;user&#39;,function ()&#123;    Route::post(&#39;&#x2F;login&#39;,&#39;login&#39;);    Route::get(&#39;&#x2F;query&#39;,&#39;query&#39;);    Route::post(&#39;&#x2F;add&#39;,&#39;add&#39;);    Route::put(&#39;&#x2F;edit&#39;,&#39;edit&#39;);    Route::delete(&#39;&#x2F;delete&#39;,&#39;delete&#39;);&#125;)-&gt;prefix(&#39;user.user&#x2F;&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，路由分组的方式也支持路由参数和变量规则</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::group(&#39;userinfo&#39;, function () &#123;    Route::rule(&#39;&#x2F;:id&#39;, &#39;index&#x2F;index&#x2F;getUserinfo&#39;);    Route::rule(&#39;&#x2F;:name&#39;, &#39;index&#x2F;index&#x2F;getUserinfo&#39;);&#125;)-&gt;ext(&#39;html&#39;)-&gt;pattern([&#39;id&#39; &#x3D;&gt; &#39;\d+&#39;, &#39;name&#39; &#x3D;&gt; &#39;\w+&#39;]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以用append()传入额外的参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::group(&#39;userinfo&#39;, function () &#123;    Route::rule(&#39;&#x2F;:id&#39;, &#39;index&#x2F;index&#x2F;getUserinfo&#39;);    Route::rule(&#39;&#x2F;:name&#39;, &#39;index&#x2F;index&#x2F;getUserinfo&#39;);&#125;)-&gt;ext(&#39;html&#39;)-&gt;pattern([&#39;id&#39; &#x3D;&gt; &#39;\d+&#39;, &#39;name&#39; &#x3D;&gt; &#39;\w+&#39;])-&gt;append([&#39;group_id&#39;&#x3D;&gt;1]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的分组路由统一传入了<code>group_id</code>参数，该参数的值可以通过<code>Request</code>类的<code>param</code>方法获取。</p><h4 id="延迟路由解析"><a href="#延迟路由解析" class="headerlink" title="延迟路由解析"></a>延迟路由解析</h4><p>定义的路由规则（主要是分组路由和域名路由规则）在加载路由定义文件的时候并没有实际注册，而是在匹配到路由分组或者域名的情况下，才会实际进行注册和解析，大大提高了路由注册和解析的性能。</p><p>可以通过app.php的url_lazy_route配置打开延迟路由解析</p><p>开启延迟路由解析后，如果需要生成路由反解URL，需要使用命令行指令<strong>php think optimize:route</strong>来生成路由缓存解析。</p><h4 id="MISS路由"><a href="#MISS路由" class="headerlink" title="MISS路由"></a>MISS路由</h4><p>在没有匹配到路由规则后执行一条设定好的规则（比较少用，一旦设置相当于开启了强制路由模式）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::miss(&#39;public&#x2F;miss&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MISS路由同样支持路由分组</p><h4 id="资源路由"><a href="#资源路由" class="headerlink" title="资源路由"></a>资源路由</h4><p>支持设置RESTFul请求的资源路由（常用）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;资源路由Route::resource(&#39;user&#39;,&#39;index&#x2F;user.user&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注册了一个名为user的路由资源，到index模块下的user/user控制器，系统会自动给我们注册7个路由规则</p><table><thead><tr><th>标识</th><th>请求类型</th><th>生成路由规则</th><th>对应操作方法（默认）</th></tr></thead><tbody><tr><td>index</td><td>GET</td><td>user</td><td>index</td></tr><tr><td>create</td><td>GET</td><td>user/create</td><td>create</td></tr><tr><td>save</td><td>POST</td><td>user</td><td>save</td></tr><tr><td>read</td><td>GET</td><td>user/:id</td><td>read</td></tr><tr><td>edit</td><td>GET</td><td>user/:id/edit</td><td>edit</td></tr><tr><td>update</td><td>PUT</td><td>user/:id</td><td>update</td></tr><tr><td>delete</td><td>DELETE</td><td>user/:id</td><td>delete</td></tr></tbody></table><p>注册资源路由后，我们就可以在路由指向的控制器中编写相对应的操作</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller\user;class user&#123;    function index()&#123;        return &#39;获取所有用户数据&#39;;    &#125;    function create()&#123;        return &#39;创建用户&#39;;    &#125;    function save()&#123;        return &#39;保存用户&#39;;    &#125;    function read()&#123;        return &#39;读取用户&#39;;    &#125;    function edit($id)&#123;        return &#39;修改用户id为&#39;.$id;    &#125;    function update($id)&#123;        return &#39;增加用户id为&#39;.$id;    &#125;    function delete($id)&#123;        return &#39;删除用户id为&#39;.$id;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后我们就可以直接在REST Client中用对应的路由去访问这些操作</p><p>以此类推</p><h4 id="快捷路由"><a href="#快捷路由" class="headerlink" title="快捷路由"></a>快捷路由</h4><p>可以快速给控制器注册路由，并且针对不同的请求类型可以设置方法前缀（知道即可）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;快捷路由Route::controller(&#39;admin&#39;,&#39;admin&#x2F;Admin&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;class Admin&#123;    public function getList()&#123;        return &#39;获取用户信息&#39;;    &#125;    public function getPhone()&#123;        return &#39;获取电话号码&#39;;    &#125;    public function getOne($id)&#123;        return &#39;id为&#39;.$id;    &#125;    public function postInfo()&#123;        return &#39;postInfo&#39;;    &#125;    public function putInfo()&#123;        return &#39;putInfo&#39;;    &#125;    public function deleteInfo()&#123;        return &#39;deleteInfo&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过观察可以发现，每个方法名都由驼峰命名法命名，前一个单词代表了HTTP的方法，后一个单词代表了路由的资源</p><p>访问getList操作：</p><p>访问postInfo操作：</p><p>当需要传参时，需要额外在路由中加入需要传递的参数，否则会找不到该参数（访问getOne操作）：</p><h4 id="路由别名"><a href="#路由别名" class="headerlink" title="路由别名"></a>路由别名</h4><p>路由别名功能能够使用一条规则，批量定义一系列的路由规则（不常用）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; admin 别名路由到 index&#x2F;User 控制器Route::alias(&#39;admin&#39;,&#39;admin&#x2F;Admin&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与上述快捷路由不同的是：</p><ul><li>可以用所有和HTTP方法访问admin模块Admin控制器中的所有方法</li><li>在路由中传入的应该是方法的全名</li></ul><h4 id="路由绑定"><a href="#路由绑定" class="headerlink" title="路由绑定"></a>路由绑定</h4><p>很少使用</p><h5 id="绑定到模块-控制器-操作"><a href="#绑定到模块-控制器-操作" class="headerlink" title="绑定到模块/控制器/操作"></a>绑定到模块/控制器/操作</h5><p>可以使用路由绑定简化URL或者路由规则的定义</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 绑定当前的URL到 index模块Route::bind(&#39;index&#39;);&#x2F;&#x2F; 绑定当前的URL到 index模块的blog控制器Route::bind(&#39;index&#x2F;blog&#39;);&#x2F;&#x2F; 绑定当前的URL到 index模块的blog控制器的read操作Route::bind(&#39;index&#x2F;blog&#x2F;read&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://servername/index/blog/read/id/5">http://serverName/index/blog/read/id/5</a></p><p>简化为<a href="http://servername/read/id/5">http://serverName/read/id/5</a></p><p>若定义了路由</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;index&#x2F;blog&#x2F;:id&#39;,&#39;index&#x2F;blog&#x2F;read&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则最终可以简化为<a href="http://servername/5">http://serverName/5</a></p><h5 id="绑定到命名空间"><a href="#绑定到命名空间" class="headerlink" title="绑定到命名空间"></a>绑定到命名空间</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 绑定命名空间Route::bind(&#39;:\app\index\controller&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么，我们接下来只需要通过</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;serverName&#x2F;blog&#x2F;read&#x2F;id&#x2F;5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以直接访问 <code>\app\index\controller\Blog</code>类的read方法。</p><h5 id="绑定到类"><a href="#绑定到类" class="headerlink" title="绑定到类"></a>绑定到类</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 绑定到类Route::bind(&#39;\app\index\controller\Blog&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么，我们接下来只需要通过</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;serverName&#x2F;read&#x2F;id&#x2F;5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以直接访问 <code>\app\index\controller\Blog</code>类的read方法。</p><p>相关手册：<a href="https://www.kancloud.cn/manual/thinkphp5_1/353973">https://www.kancloud.cn/manual/thinkphp5_1/353973</a></p><hr><h4 id="域名路由"><a href="#域名路由" class="headerlink" title="域名路由"></a>域名路由</h4><p>很少使用</p><p><a href="https://www.kancloud.cn/manual/thinkphp5_1/353976">https://www.kancloud.cn/manual/thinkphp5_1/353976</a></p><hr><h4 id="URL生成"><a href="#URL生成" class="headerlink" title="URL生成"></a>URL生成</h4><p>使用**\think\facade\Url::build()<strong>方法或</strong>url()**助手函数</p><p>Url::build(‘地址表达式’,[‘参数’],[‘URL后缀’],[‘域名’])</p><p>url(‘地址表达式’,[‘参数’],[‘URL后缀’],[‘域名’])</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;class Url&#123;    function index()&#123;    return &#39;index&#39;;    &#125;    &#x2F;*     * 生成URL地址     * *&#x2F;    function testUrl()&#123;        return \think\facade\Url::build(&#39;index&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时访问生成的路由就能访问到该类中的方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;class Url&#123;    function delete($id,)&#123;        return &#39;删除用户id为&#39;.$id;    &#125;    &#x2F;*     * 生成URL地址     * *&#x2F;    function testUrl()&#123;        &#x2F;&#x2F;传入参数的方法        return \think\facade\Url::build(&#39;delete&#39;,&#39;id&#x3D;2&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>支持数组传入</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function delete($id,$name)&#123;    return &#39;删除用户id为&#39;.$id.&#39;用户名为&#39;.$name;&#125;function testUrl()&#123;    return \think\facade\Url::build(&#39;delete&#39;,&#39;id&#x3D;2&amp;name&#x3D;wwh&#39;);    &#x2F;&#x2F;return \think\facade\Url::build(&#39;delete&#39;,[&#39;id&#39;&#x3D;&gt;2,&#39;name&#39;&#x3D;&gt;&#39;wwh&#39;]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果环境支持REWRITE，那么我们可以更改配置</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#39;url_common_param&#39;&#x3D;&gt;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后再次运行则会生成不同的URL</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">\think\facade\Url::build(&#39;delete&#39;,&#39;id&#x3D;2&amp;name&#x3D;wwh&#39;,&#39;shtml&#39;,true);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加上shtml会使生成的路由为shtml为后缀；加上true会将域名附在路由之前<a href="http://www.tp5.com/admin/url/delete.shtml?id=2&amp;name=wwh">http://www.tp5.com/admin/url/delete.shtml?id=2&amp;name=wwh</a></p><h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><h3 id="请求对象调用"><a href="#请求对象调用" class="headerlink" title="请求对象调用"></a>请求对象调用</h3><p>当前的请求对象由think\Request类负责，在很多场合下并不需要实例化调用，通常使用依赖注入即可。在其它场合（例如模板输出等）则可以使用think\facade\Request静态类操作</p><p>在控制器中通常情况下有两种方式进行<strong>依赖注入</strong></p><h4 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller\user;&#x2F;&#x2F;使用think\Request类use think\Request;class user&#123;    private $request;    function __construct(Request $request)    &#123;        $this-&gt;request&#x3D;$request;    &#125;    function test()&#123;        &#x2F;&#x2F;会以数组形式返回请求的信息        dump($this-&gt;request);        return &#39;多级控制器&#39;;    &#125;        function edit($id)&#123;        &#x2F;&#x2F;调用对应方法，可以读取我们想要的信息        &#x2F;&#x2F;param()方法可以查看所有传参信息        &#x2F;&#x2F;在param()里面放入参数可以查看特定的参数信息        dump($this-&gt;request-&gt;param(&quot;id&quot;));        return &#39;修改用户id为&#39;.$id;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们就可以通过调用操作方法来查看当前的请求对象的信息</p><p>若我们继承了控制器基类think\Controller，系统就已经自动完成了请求对象的构造方法注入，可以免去写构造方法这一步，直接使用**$this-&gt;request**属性调用当前的请求对象</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller\user;use think\Controller;class user extends Controller&#123;    protected $request;    function test()&#123;        dump($this-&gt;request);        return &#39;多级控制器&#39;;    &#125;    function edit($id)&#123;        dump($this-&gt;request-&gt;config());        return &#39;修改用户id为&#39;.$id;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：因为继承的Controlller类中已经为我们定义了许多参数，所以我们在user类中定义的$request类型需要是protected</p><h4 id="操作方法注入"><a href="#操作方法注入" class="headerlink" title="操作方法注入"></a>操作方法注入</h4><p>每个方法中使用依赖注入</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller\user;use think\Controller;use think\Request;class user &#x2F;&#x2F;extends Controller&#123;    function login(Request $request,$name)&#123;        dump($request-&gt;param(&#39;name&#39;));        return &#39;login&#39;.$name;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论是否继承系统的控制器基类，都可以使用操作方法注入</p><p>我们可以在REST Client中Request选项的Request Parameters添加参数，之后可以使用param()方法读取</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function save(Request $request)&#123;return &#39;保存用户,password&#39;.$request-&gt;param(&#39;password&#39;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Facade调用"><a href="#Facade调用" class="headerlink" title="Facade调用"></a>Facade调用</h4><p>在<strong>没有使用依赖注入</strong>的场合，可以通过Facade机制来<strong>静态调用</strong>请求对象的方法（注意use引入的类库应该是think\facade\Request）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;use think\facade\Request;class testRequest&#123;    function login($name)&#123;        return Request::param(&#39;name&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无法使用依赖注入的场合同样适用</p><h4 id="助手函数-1"><a href="#助手函数-1" class="headerlink" title="助手函数"></a>助手函数</h4><p>为了简化调用，系统还提供了**request()**助手函数，可以在任何需要的时候直接调用当前请求对象</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;&#x2F;&#x2F;需要继承Controller类use think\Controller;class testRequest extends Controller&#123;    public function index()    &#123;        return request()-&gt;param(&#39;name&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求对象参数获取"><a href="#请求对象参数获取" class="headerlink" title="请求对象参数获取"></a>请求对象参数获取</h3><h4 id="请求信息"><a href="#请求信息" class="headerlink" title="请求信息"></a>请求信息</h4><p>Request对象支持获取当前的请求信息</p><table><thead><tr><th align="left">方法</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>host</code></td><td align="left">当前访问域名或者IP</td></tr><tr><td align="left"><code>scheme</code></td><td align="left">当前访问协议</td></tr><tr><td align="left"><code>port</code></td><td align="left">当前访问的端口</td></tr><tr><td align="left"><code>remotePort</code></td><td align="left">当前请求的REMOTE_PORT</td></tr><tr><td align="left"><code>protocol</code></td><td align="left">当前请求的SERVER_PROTOCOL</td></tr><tr><td align="left"><code>contentType</code></td><td align="left">当前请求的CONTENT_TYPE</td></tr><tr><td align="left"><code>domain</code></td><td align="left">当前包含协议的域名</td></tr><tr><td align="left"><code>subDomain</code></td><td align="left">当前访问的子域名</td></tr><tr><td align="left"><code>panDomain</code></td><td align="left">当前访问的泛域名</td></tr><tr><td align="left"><code>rootDomain</code></td><td align="left">当前访问的根域名（<code>V5.1.6+</code>）</td></tr><tr><td align="left"><code>url</code></td><td align="left">当前完整URL</td></tr><tr><td align="left"><code>baseUrl</code></td><td align="left">当前URL（不含QUERY_STRING）</td></tr><tr><td align="left"><code>query</code></td><td align="left">当前请求的QUERY_STRING参数</td></tr><tr><td align="left"><code>baseFile</code></td><td align="left">当前执行的文件</td></tr><tr><td align="left"><code>root</code></td><td align="left">URL访问根地址</td></tr><tr><td align="left"><code>rootUrl</code></td><td align="left">URL访问根目录</td></tr><tr><td align="left"><code>pathinfo</code></td><td align="left">当前请求URL的pathinfo信息（含URL后缀）</td></tr><tr><td align="left"><code>path</code></td><td align="left">请求URL的pathinfo信息(不含URL后缀)</td></tr><tr><td align="left"><code>ext</code></td><td align="left">当前URL的访问后缀</td></tr><tr><td align="left"><code>time</code></td><td align="left">获取当前请求的时间</td></tr><tr><td align="left"><code>type</code></td><td align="left">当前请求的资源类型</td></tr><tr><td align="left"><code>method</code></td><td align="left">当前请求类型</td></tr></tbody></table><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;use think\facade\Request;class testRequest&#123;    public function test()&#123;        &#x2F;&#x2F;url地址，不带域名        echo Request::url();        echo &#39;&lt;br&gt;&#39;;        &#x2F;&#x2F;url地址，带域名        echo Request::url(true);        echo &#39;&lt;br&gt;&#39;;        &#x2F;&#x2F;当前url，不带域名        echo Request::baseFile();        echo &#39;&lt;br&gt;&#39;;        &#x2F;&#x2F;当前rul，带域名        echo Request::baseFile(true);        echo &#39;&lt;br&gt;&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对与上述请求方法一般无需传参，某些方法传入参数true表示获取完整的带域名的地址</p><h4 id="输入变量"><a href="#输入变量" class="headerlink" title="输入变量"></a>输入变量</h4><p>可以通过<code>Request</code>对象完成全局输入变量的检测、获取和安全过滤，支持包括<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUEST</code>、<code>$_SERVER</code>、<code>$_SESSION</code>、<code>$_COOKIE</code>、<code>$_ENV</code>等系统变量，以及文件上传信息</p><p>需要先引入<strong>use think\facade\Request;</strong></p><h5 id="检查函数是否设置"><a href="#检查函数是否设置" class="headerlink" title="检查函数是否设置"></a>检查函数是否设置</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;&#x2F;&#x2F;必要的类库use think\facade\Request;class testRequest&#123;    public function test()&#123;        dump(Request::has(&#39;id&#39;,&#39;get&#39;)) ;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>has()方法，当变量被设置时返回true，未被设置时返回false</p><p>变量检测可以支持所有支持的系统变量，包括<code>get/post/put/request/cookie/server/session/env/file</code>。</p><h5 id="变量获取"><a href="#变量获取" class="headerlink" title="变量获取"></a>变量获取</h5><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">param</td><td align="left">获取当前请求的变量</td></tr><tr><td align="left">get</td><td align="left">获取 $_GET 变量</td></tr><tr><td align="left">post</td><td align="left">获取 $_POST 变量</td></tr><tr><td align="left">put</td><td align="left">获取 PUT 变量</td></tr><tr><td align="left">delete</td><td align="left">获取 DELETE 变量</td></tr><tr><td align="left">session</td><td align="left">获取 $_SESSION 变量</td></tr><tr><td align="left">cookie</td><td align="left">获取 $_COOKIE 变量</td></tr><tr><td align="left">request</td><td align="left">获取 $_REQUEST 变量</td></tr><tr><td align="left">server</td><td align="left">获取 $_SERVER 变量</td></tr><tr><td align="left">env</td><td align="left">获取 $_ENV 变量</td></tr><tr><td align="left">route</td><td align="left">获取 路由（包括PATHINFO） 变量</td></tr><tr><td align="left">file</td><td align="left">获取 $_FILES 变量</td></tr></tbody></table><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;&#x2F;&#x2F;必要的类库use think\facade\Request;class testRequest&#123;    public function test()&#123;        dump(Request::get(&#39;id&#39;));        dump(Request::post(&#39;id&#39;));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="获取param变量"><a href="#获取param变量" class="headerlink" title="获取param变量"></a>获取param变量</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;use think\facade\Request;class testRequest&#123;    public function test()&#123;        &#x2F;&#x2F; 获取当前请求的name变量        echo Request::param(&#39;name&#39;);echo &#39;&lt;br&gt;&#39;;        &#x2F;&#x2F; 获取当前请求的所有变量（经过过滤）        echo Request::param();echo &#39;&lt;br&gt;&#39;;        &#x2F;&#x2F; 获取当前请求的所有变量（原始数据）        echo Request::param(false);echo &#39;&lt;br&gt;&#39;;        &#x2F;&#x2F; 获取当前请求的所有变量（包含上传文件）        echo Request::param(true);echo &#39;&lt;br&gt;&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依赖注入的方式</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">namespace app\index\controller;use think\Request;class testRequest &#123;public function test(Request $request)    &#123;    &#x2F;&#x2F; 获取name请求变量    return $request-&gt;name;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="支持默认值"><a href="#支持默认值" class="headerlink" title="支持默认值"></a>支持默认值</h5><p>我们获取输入变量时，可以在方法的第二个参数设置一个用于返回的默认值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;use think\facade\Request;class testRequest&#123;    public function test()&#123;        echo Request::param(&#39;name&#39;);&#x2F;&#x2F;返回值为null        echo Request::param(&#39;name&#39;,&#39;wwh&#39;);&#x2F;&#x2F;输出wwh    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="变量过滤"><a href="#变量过滤" class="headerlink" title="变量过滤"></a>变量过滤</h5><p>我们可以在app.php文件中配置过滤方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 默认全局过滤方法 用逗号分隔多个&#39;default_filter&#39;         &#x3D;&gt; &#39;htmlspecialchars,strip_tags&#39;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在过滤时会按照设置的顺序进行过滤</p><p>也可以使用Request对象进行全局变量的获取过滤</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Request::filter([&#39;strip_tags&#39;,&#39;htmlspecialchars&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以在获取变量时添加过滤方法（支持传入多个过滤规则，用逗号隔开）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Request::get(&#39;name&#39;,&#39;&#39;,&#39;htmlspecialchars&#39;);Request::param(&#39;username&#39;,&#39;&#39;,&#39;strip_tags&#39;);Request::post(&#39;name&#39;,&#39;&#39;,&#39;org\Filter::safeHtml&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Request对象还支持PHP内置提供的Filter ID过滤</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Request::post(&#39;email&#39;,&#39;&#39;,FILTER_VALIDATE_EMAIL);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>框架对FilterID做了转换支持，因此也可以使用字符串的方式</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Request::post(&#39;email&#39;,&#39;&#39;,&#39;email&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：采用Filter ID进行过滤时，若不符合过滤要求，则会返回false，因此我们需要传入默认值来确保最终的值符合规范</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;若不符合规范，返回空字符串Request::post(&#39;email&#39;,&#39;&#39;,FILTER_VALIDATE_EMAIL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若不需要过滤，可以使用null，及时设置了全局过滤</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Request::get(&#39;name&#39;, &#39;&#39;, null); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="获取部分变量"><a href="#获取部分变量" class="headerlink" title="获取部分变量"></a>获取部分变量</h5><p>获取当前请求的部分参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 只获取当前请求的id和name变量Request::only(&#39;id,name&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;使用数组的方式传入参数Request::only([&#39;id&#39;,&#39;name&#39;]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>支持批量设置默认值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;id默认值为0，name默认值为空字符串Request::only([&#39;id&#39;&#x3D;&gt;0,&#39;name&#39;&#x3D;&gt;&#39;&#39;]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认获取的是当前请求参数（param类型变量），若要获取其他类型的参数，可在第二个参数传入</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 只获取GET请求的id和name变量Request::only([&#39;id&#39;,&#39;name&#39;], &#39;get&#39;);&#x2F;&#x2F; 只获取POST请求的id和name变量Request::only([&#39;id&#39;,&#39;name&#39;], &#39;post&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以用except()排除部分变量后获取</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 排除id和name变量Request::except(&#39;id,name&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>except()方法的使用方法与传入参数与only()相同</p><h5 id="变量修饰符"><a href="#变量修饰符" class="headerlink" title="变量修饰符"></a>变量修饰符</h5><p>能实现简单的过滤变量，获取变量时返回的值只会是符合变量修饰符类型的值</p><table><thead><tr><th align="left">修饰符</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">s</td><td align="left">强制转换为字符串类型</td></tr><tr><td align="left">d</td><td align="left">强制转换为整型类型</td></tr><tr><td align="left">b</td><td align="left">强制转换为布尔类型</td></tr><tr><td align="left">a</td><td align="left">强制转换为数组类型</td></tr><tr><td align="left">f</td><td align="left">强制转换为浮点类型</td></tr></tbody></table><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;若id的值为10d，使用变量修饰符后只会返回10Request::get(&#39;id&#x2F;d&#39;);Request::post(&#39;name&#x2F;s&#39;);Request::post(&#39;ids&#x2F;a&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="助手函数input"><a href="#助手函数input" class="headerlink" title="助手函数input()"></a>助手函数input()</h5><p>判断变量是否定义</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">input(&#39;?get.id&#39;);input(&#39;?post.name&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取PARAM参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">input(&#39;param.name&#39;); &#x2F;&#x2F; 获取单个参数input(&#39;param.&#39;); &#x2F;&#x2F; 获取全部参数&#x2F;&#x2F; 下面是等效的input(&#39;name&#39;); input(&#39;&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取GET参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 获取单个变量input(&#39;get.id&#39;);&#x2F;&#x2F; 使用过滤方法获取 默认为空字符串input(&#39;get.name&#39;);&#x2F;&#x2F; 获取全部变量input(&#39;get.&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用过滤方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">input(&#39;get.name&#39;,&#39;&#39;,&#39;htmlspecialchars&#39;); &#x2F;&#x2F; 获取get变量 并用htmlspecialchars函数过滤input(&#39;username&#39;,&#39;&#39;,&#39;strip_tags&#39;); &#x2F;&#x2F; 获取param变量 并用strip_tags函数过滤input(&#39;post.name&#39;,&#39;&#39;,&#39;org\Filter::safeHtml&#39;); &#x2F;&#x2F; 获取post变量 并用org\Filter类的safeHtml方法过滤<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用变量修饰符</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">input(&#39;get.id&#x2F;d&#39;);input(&#39;post.name&#x2F;s&#39;);input(&#39;post.ids&#x2F;a&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以用input()获取传过来的信息，例如用户名和密码，再去判断他符不符合我们的规范</p><h3 id="请求类型"><a href="#请求类型" class="headerlink" title="请求类型"></a>请求类型</h3><p>在很多情况下面，我们需要判断当前操作的请求类型是<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>或者<code>HEAD</code>，一方面可以针对请求类型作出不同的逻辑处理，另外一方面有些情况下面需要验证安全性，过滤不安全的请求。</p><p>请求对象<code>Request</code>类提供了下列方法来获取或判断当前请求类型：</p><table><thead><tr><th align="left">用途</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">获取当前请求类型</td><td align="left">method</td></tr><tr><td align="left">判断是否GET请求</td><td align="left">isGet</td></tr><tr><td align="left">判断是否POST请求</td><td align="left">isPost</td></tr><tr><td align="left">判断是否PUT请求</td><td align="left">isPut</td></tr><tr><td align="left">判断是否DELETE请求</td><td align="left">isDelete</td></tr><tr><td align="left">判断是否AJAX请求</td><td align="left">isAjax</td></tr><tr><td align="left">判断是否PJAX请求</td><td align="left">isPjax</td></tr><tr><td align="left">判断是否为JSON请求</td><td align="left">isJson（<code>V5.1.38+</code>）</td></tr><tr><td align="left">判断是否手机访问</td><td align="left">isMobile</td></tr><tr><td align="left">判断是否HEAD请求</td><td align="left">isHead</td></tr><tr><td align="left">判断是否PATCH请求</td><td align="left">isPatch</td></tr><tr><td align="left">判断是否OPTIONS请求</td><td align="left">isOptions</td></tr><tr><td align="left">判断是否为CLI执行</td><td align="left">isCli</td></tr><tr><td align="left">判断是否为CGI模式</td><td align="left">isCgi</td></tr></tbody></table><p><code>method</code>方法返回的请求类型始终是大写，这些方法都不需要传入任何参数。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;use think\facade\Request;class testRequest&#123;    public function test()&#123;        dump(request()-&gt;isPut());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求类型伪装"><a href="#请求类型伪装" class="headerlink" title="请求类型伪装"></a>请求类型伪装</h4><p>支持请求类型伪装，可以在<code>POST</code>表单里面提交<code>_method</code>变量，传入需要伪装的请求类型</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PUT<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交后的请求类型会被系统识别为<code>PUT</code>请求</p><p>可以设置为任何合法的请求类型，包括<code>GET</code>、<code>POST</code>、<code>PUT</code>和<code>DELETE</code>等，但伪装变量<code>_method</code>只<strong>能通过POST请求进行提交</strong></p><p>如果要获取原始的请求类型，可以使用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Request::method(true);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在命令行下面执行的话，请求类型返回的始终是<code>GET</code>。</p></blockquote><p>如果你需要改变伪装请求的变量名，可以修改应用配置文件：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 表单请求类型伪装变量&#39;var_method&#39;             &#x3D;&gt; &#39;_m&#39;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>AJAX/PJAX伪装很少使用，忽略</strong></p><h3 id="响应输出"><a href="#响应输出" class="headerlink" title="响应输出"></a>响应输出</h3><p>Response响应对象由think\Response类或子类完成，，ThinkPHP的响应输出是自动的（命令行模式除外），最终会调用<code>Response</code>对象的<code>send</code>方法完成输出</p><p>大多数情况，我们不需要关注<code>Response</code>对象本身，只需要在控制器的操作方法中返回数据即可</p><p>最简单的响应输出是直接在路由闭包或者控制器操作方法中返回一个字符串，例如：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Route::get(&#39;hello&#x2F;:name&#39;, function ($name) &#123;    return &#39;Hello,&#39; . $name . &#39;!&#39;;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;class Index&#123;    public function hello($name&#x3D;&#39;thinkphp&#39;)    &#123;        return &#39;Hello,&#39; . $name . &#39;!&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过修改配置修改响应时输出的类型</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 默认输出类型&#39;default_return_type&#39;    &#x3D;&gt; &#39;json&#39;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="left">输出类型</th><th align="left">快捷方法</th><th align="left">对应Response类</th></tr></thead><tbody><tr><td align="left">HTML输出</td><td align="left">response</td><td align="left">\think\Response</td></tr><tr><td align="left">渲染模板输出</td><td align="left">view</td><td align="left">\think\response\View</td></tr><tr><td align="left">JSON输出</td><td align="left">json</td><td align="left">\think\response\Json</td></tr><tr><td align="left">JSONP输出</td><td align="left">jsonp</td><td align="left">\think\response\Jsonp</td></tr><tr><td align="left">XML输出</td><td align="left">xml</td><td align="left">\think\response\Xml</td></tr><tr><td align="left">页面重定向</td><td align="left">redirect</td><td align="left">\think\response\Redirect</td></tr><tr><td align="left">附件下载（<code>V5.1.21+</code>）</td><td align="left">download</td><td align="left">\think\response\Download</td></tr></tbody></table><h4 id="返回JSON数据"><a href="#返回JSON数据" class="headerlink" title="返回JSON数据"></a>返回JSON数据</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;class Index&#123;    public function hello()    &#123;        $data &#x3D; [&#39;name&#39; &#x3D;&gt; &#39;thinkphp&#39;, &#39;status&#39; &#x3D;&gt; &#39;1&#39;];        return json($data);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回HTML格式"><a href="#返回HTML格式" class="headerlink" title="返回HTML格式"></a>返回HTML格式</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;class Index&#123;    public function hello()    &#123;        $data &#x3D; &#39;Hello,ThinkPHP!&#39;;        return response($data);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者当default_return_type配置为html时</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;class Index&#123;    public function hello()    &#123;        return &#39;Hello,ThinkPHP!&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\index\controller;class testRequest&#123;    public function responseTest()    &#123;        return redirect(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用with()方法向重定向的地址传入参数</p><h2 id="视图和模板"><a href="#视图和模板" class="headerlink" title="视图和模板"></a>视图和模板</h2><h3 id="视图渲染"><a href="#视图渲染" class="headerlink" title="视图渲染"></a>视图渲染</h3><h4 id="控制器基类"><a href="#控制器基类" class="headerlink" title="控制器基类"></a>控制器基类</h4><h5 id="fetch"><a href="#fetch" class="headerlink" title="fetch()"></a>fetch()</h5><p>继承系统控制器基类<strong>\think\Controller</strong>，然后调用fetch方法</p><p>模板文件的写法支持下面几种：</p><table><thead><tr><th align="left">用法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">不带任何参数</td><td align="left">自动定位当前操作的模板文件</td></tr><tr><td align="left">模块@控制器/操作</td><td align="left">常用写法，支持跨模块</td></tr><tr><td align="left">完整的模板文件名</td><td align="left">直接使用完整的模板文件名（包括模板后缀）</td></tr></tbody></table><p>我们需要在模块内创建view文件夹用于存放模板文件，而后在controller文件夹中编写模板渲染的操作</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;use think\Controller;class Admin extends Controller&#123;    public function admin_list()&#123;        &#x2F;&#x2F;指定当前模块默认文件夹的文件        &#x2F;&#x2F;return $this-&gt;fetch(&#39;list&#39;);        &#x2F;&#x2F;指定当前模块其他目录的文件        &#x2F;&#x2F;return $this-&gt;fetch(&#39;user&#x2F;create&#39;);        &#x2F;&#x2F;指定其他模块的文件&#x2F;&#x2F;return $this-&gt;fetch(&#39;index@user&#x2F;show&#39;);        &#x2F;&#x2F;指定一个存在的文件路径(特殊情况，很少用)return $this-&gt;fetch(&#39;..&#x2F;template&#x2F;public&#x2F;index.html&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fetch中若不传入任何参数，则文件路径的默认值为<strong>当前模块@当前类名/当前操作名</strong></p><h4 id="助手函数-2"><a href="#助手函数-2" class="headerlink" title="助手函数"></a>助手函数</h4><p>我们想要使用**fetch()<strong>必须继承Controller基类，若不继承，可以使用助手函数</strong>view()<strong>，助手函数的使用方法与传入参数与</strong>fetch()**相同</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;class Admin&#123;    public function admin_list()&#123;        &#x2F;&#x2F;return view();        return view(&#39;index@user&#x2F;show&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="直接渲染内容"><a href="#直接渲染内容" class="headerlink" title="直接渲染内容"></a>直接渲染内容</h4><p>直接解析内容而不通过模板文件的话，可以使用display方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">namespace app\admin\controller;use think\Controller;class admin extends Controller&#123;    public function admin_list()    &#123;        &#x2F;&#x2F;用getContent()方法直接获取要渲染的内容        &#x2F;&#x2F;$content &#x3D; $this-&gt;fetch()-&gt;getContent();        &#x2F;&#x2F;渲染时可以直接返回        &#x2F;&#x2F;return $content;        &#x2F;&#x2F;也可以使用display()方法返回获取道德内容        &#x2F;&#x2F;return $this-&gt;display($content);        &#x2F;&#x2F; 直接渲染内容        $content &#x3D; &#39;&#123;$name&#125;-&#123;$email&#125;&#39;;        return $this-&gt;display($content, [&#39;name&#39; &#x3D;&gt; &#39;thinkphp&#39;, &#39;email&#39; &#x3D;&gt; &#39;thinkphp@qq.com&#39;]);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图赋值与输出"><a href="#视图赋值与输出" class="headerlink" title="视图赋值与输出"></a>视图赋值与输出</h3><p>除了系统变量与配置参数输出无需赋值外，其他变量若要在模板中输出必须先进行赋值操作</p><h4 id="assign"><a href="#assign" class="headerlink" title="assign()"></a>assign()</h4><p>使用前先继承<strong>\think\Controller</strong>类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;use think\Controller;class Admin extends Controller&#123;    public function admin_list()&#123;        &#x2F;&#x2F;$this-&gt;assign(&#39;name&#39;,&#39;wwh&#39;);        &#x2F;&#x2F;$this-&gt;assign(&#39;sex&#39;,&#39;man&#39;);        &#x2F;&#x2F;如果像上面有多个变量建议使用数组进行批量赋值                &#x2F;&#x2F;$this-&gt;assign([        &#x2F;&#x2F;    &#39;name&#39;&#x3D;&gt;&#39;wwh&#39;,        &#x2F;&#x2F;    &#39;sex&#39;&#x3D;&gt;&#39;man&#39;        &#x2F;&#x2F;]);        &#x2F;&#x2F;可以给数组命个名        $this-&gt;assign(&#39;user&#39;,[            &#39;name&#39;&#x3D;&gt;&#39;wwh&#39;,            &#39;sex&#39;&#x3D;&gt;&#39;man&#39;        ]);        return $this-&gt;fetch();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>未给数组命名前变量为<strong>普通变量</strong>（如字符串变量）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;普通变量调用&#123;$name&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>给数组命名后变量为<strong>数组</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;数组调用&#123;$user.name&#125;&#x2F;&#x2F;或&#123;$user[&#39;name&#39;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以将各种变量赋给一个<strong>对象</strong>，再使用对象来输出</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;利用\stdClass预定义类写入参数$user &#x3D; new \stdClass();$user-&gt;name&#x3D;&#39;wwh&#39;;$user-&gt;sex&#x3D;&#39;man&#39;;$this-&gt;assign(&#39;user&#39;,$user);&#x2F;&#x2F;或实例化外部的类$this-&gt;assign(&#39;person&#39;,new Person());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;class Person&#123;    &#x2F;&#x2F;静态变量    static $type &#x3D; &#39;type&#39;;    &#x2F;&#x2F;常量    const TYPE &#x3D; &#39;TYPE&#39;;    &#x2F;&#x2F;方法    function show()&#123;        return &#39;Person show&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">调用对象用户名：&#123;$user-&gt;name&#125;&lt;br&gt;调用常量：&#123;$person::TYPE&#125;&lt;br&gt;调用静态变量：&#123;$person::$type&#125;&lt;br&gt;调用方法：&#123;$person-&gt;show()&#125;&lt;br&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法传入参数"><a href="#方法传入参数" class="headerlink" title="方法传入参数"></a>方法传入参数</h4><p>在方法fetch()与display()的第二个参数可以直接传入模板变量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;use think\Controller;class Admin extends Controller&#123;    public function admin_list()&#123;         return $this-&gt;fetch(&#39;admin_list&#39;, [            &#39;name&#39;  &#x3D;&gt; &#39;wwh&#39;,            &#39;sex&#39; &#x3D;&gt; &#39;man&#39;        ]);        &#x2F;*         *$content &#x3D; &#39;&#123;$name&#125;-&#123;$sex&#125;&#39;;         *return $this-&gt;display($content, [         *&#39;name&#39;  &#x3D;&gt; &#39;wwh&#39;,         *&#39;sex&#39; &#x3D;&gt; &#39;man&#39;        ]);*&#x2F;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="助手函数-3"><a href="#助手函数-3" class="headerlink" title="助手函数"></a>助手函数</h4><p>助手函数view内可以传入属性，也可以传入对象，传入的参数不同，视图调用的方法也不同</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;class Admin&#123;    public function admin_list()&#123;        &#x2F;&#x2F;return view(&#39;admin_list&#39;, [        &#x2F;&#x2F;    &#39;name&#39;  &#x3D;&gt; &#39;wwh&#39;,        &#x2F;&#x2F;    &#39;sex&#39; &#x3D;&gt; &#39;man&#39;        &#x2F;&#x2F;]);            &#x2F;&#x2F;利用\stdClass预定义类写入参数        $user &#x3D; new \stdClass();        $user-&gt;name&#x3D;&#39;wwh&#39;;        $user-&gt;sex&#x3D;&#39;man&#39;;            return view(&#39;admin_list&#39;,[            &#39;user&#39;&#x3D;&gt;$user,            &#39;person&#39;&#x3D;&gt;new Person()                         return view(&#39;admin_list&#39;)-&gt;assign(&#39;user&#39;,$user)-&gt;assign(&#39;person&#39;,new Person());        ]);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者可以使用助手函数view()与assign()相结合，可以使用assign()向视图内不断地传入变量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;class Admin&#123;    public function admin_list()&#123;   $user &#x3D; new \stdClass();        $user-&gt;name&#x3D;&#39;wwh&#39;;        $user-&gt;sex&#x3D;&#39;man&#39;;        return view(&#39;admin_list&#39;)-&gt;assign(&#39;user&#39;,$user)-&gt;assign(&#39;person&#39;,new Person());        ]);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="公共模板变量赋值"><a href="#公共模板变量赋值" class="headerlink" title="公共模板变量赋值"></a>公共模板变量赋值</h4><p>如果需要在控制器之外进行模板变量赋值，可以使用视图类的<code>share</code>静态方法进行全局公共模板变量赋值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;use think\Controller;&#x2F;&#x2F;使用公共模板必须先引入该类库use think\facade\View;class Admin extends Controller&#123;    public function admin_list()&#123;        $user &#x3D; new \stdClass();        $user-&gt;name&#x3D;&#39;wwh&#39;;        $user-&gt;sex&#x3D;&#39;man&#39;;        View::share([            &#39;user&#39;&#x3D;&gt;$user,            &#39;person&#39;&#x3D;&gt;new Person()        ]);        return $this-&gt;fetch();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局静态模板变量最终会和前面使用方法赋值的模板变量合并</p><h3 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h3><p>支持对模板文件输出的内容进行字符替换，定义后在渲染模板或者内容输出的时候就会自动根据设置的替换规则自动替换</p><p>5.1系统没有任何内置的替换规则</p><p>如果需要全局替换的话，可以直接在template.php配置文件中添加：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 变量替换规则&#39;tpl_replace_string&#39; &#x3D;&gt; [    &#39;__STATIC__&#39;&#x3D;&gt;&#39;&#x2F;static&#39;,    &#39;__JS__&#39; &#x3D;&gt; &#39;&#x2F;static&#x2F;javascript&#39;,    &#39;__CSS__&#39; &#x3D;&gt; &#39;&#x2F;static&#x2F;css&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>替换规则严格区分大小写</p><h4 id="替换代码"><a href="#替换代码" class="headerlink" title="替换代码"></a>替换代码</h4><p>在public/static文件夹中创建css文件admin_list.css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后直接在视图文件中引入css文件即可生效</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/css/admin_list.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：css中外部链接的优先级会比较低，如果存在多个同名的样式，其行内样式和内部样式会先生效</p><p><strong>JS文件同理</strong></p><h3 id="变量输出"><a href="#变量输出" class="headerlink" title="变量输出"></a>变量输出</h3><p>有一部分内容在**视图渲染与输出的assign()**中</p><h4 id="使用默认值"><a href="#使用默认值" class="headerlink" title="使用默认值"></a>使用默认值</h4><p>我们可以给变量输出提供默认值，当该变量获取不到时，会输出设置的默认值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;$user.age|default&#x3D;20&#125;&#x2F;&#x2F;对系统变量也支持&#123;$Think.get.name|default&#x3D;&quot;名称为空&quot;&#125;&#x2F;&#x2F;默认值与函数可同时使用&#123;$Think.get.name|getName|default&#x3D;&quot;名称为空&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="系统变量输出"><a href="#系统变量输出" class="headerlink" title="系统变量输出"></a>系统变量输出</h4><p>普通的模板变量需要首先赋值后才能在模板中输出，但是系统变量则不需要，可以直接在模板中输出，系统变量的输出通常以<code>&#123;$Think.</code>（大小写一致） 打头</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;$Think.server.script_name&#125; &#x2F;&#x2F; 输出$_SERVER[&#39;SCRIPT_NAME&#39;]变量&#123;$Think.session.user_id&#125; &#x2F;&#x2F; 输出$_SESSION[&#39;user_id&#39;]变量&#123;$Think.get.page&#125; &#x2F;&#x2F; 输出$_GET[&#39;page&#39;]变量&#123;$Think.cookie.name&#125;  &#x2F;&#x2F; 输出$_COOKIE[&#39;name&#39;]变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>支持输出 <code>$_SERVER</code>、<code>$_ENV</code>、 <code>$_POST</code>、 <code>$_GET</code>、 <code>$_REQUEST</code>、<code>$_SESSION</code>和 <code>$_COOKIE</code>变量。</p><h5 id="常量输出"><a href="#常量输出" class="headerlink" title="常量输出"></a>常量输出</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;$Think.const.PHP_VERSION&#125;&#x2F;&#x2F;或&#123;$Think.PHP_VERSION&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="配置输出"><a href="#配置输出" class="headerlink" title="配置输出"></a>配置输出</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;$Think.config.default_module&#125;&#123;$Think.config.default_controller&#125;&#x2F;&#x2F;上面默认搜索的是app.php文件中的配置，若想输出其他配置文件的配置可以使用以下方法&#123;$Think.config.template.view_suffix&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h4><p>可以使用函数对输出的值进行规范</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;use think\Controller;use think\facade\View;class Admin extends Controller&#123;    public function admin_list()&#123;        &#x2F;&#x2F;利用\stdClass预定义类写入参数，调用时要使用箭头        $user &#x3D; new \stdClass();        $user-&gt;name&#x3D;&#39;wwh&#39;;        $user-&gt;sex&#x3D;&#39;man&#39;;        $user-&gt;password&#x3D;123456;        $user-&gt;addr&#x3D;&#39;集美大学诚毅学院十三号宿舍楼211&#39;;        View::share([            &#39;user&#39;&#x3D;&gt;$user        ]);        return $this-&gt;fetch();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php+html" data-language="php+html"><code class="language-php+html">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    姓名：&#123;$user-&gt;name|upper&#125;&lt;br&gt;    地址：&#123;$user-&gt;addr|default&#x3D;&#39;无&#39;|mb_substr&#x3D;0,8&#125;&lt;br&gt;    密码：&#123;$user-&gt;password|md5&#125;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">过滤方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">date</td><td align="left">日期格式化（支持各种时间类型）</td></tr><tr><td align="left">format</td><td align="left">字符串格式化</td></tr><tr><td align="left">upper</td><td align="left">转换为大写</td></tr><tr><td align="left">lower</td><td align="left">转换为小写</td></tr><tr><td align="left">first</td><td align="left">输出数组的第一个元素</td></tr><tr><td align="left">last</td><td align="left">输出数组的最后一个元素</td></tr><tr><td align="left">default</td><td align="left">默认值</td></tr><tr><td align="left">raw</td><td align="left">不使用（默认）转义</td></tr><tr><td align="left">md5</td><td align="left">将字符串加密</td></tr><tr><td align="left">substr</td><td align="left">从x开始截取x位字符</td></tr><tr><td align="left">mb_substr</td><td align="left">与上面相同，不同在于他将汉字当作一个字符</td></tr></tbody></table><p>使用函数通过解析后，其根本是使用php的各种函数对字符串进行处理，支持多个函数一起使用，用|隔开</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>模板输出支持运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">使用示例</th></tr></thead><tbody><tr><td align="left"><code>+</code></td><td align="left"><code>&#123;$a+$b&#125;</code></td></tr><tr><td align="left"><code>-</code></td><td align="left"><code>&#123;$a-$b&#125;</code></td></tr><tr><td align="left"><code>*</code></td><td align="left"><code>&#123;$a*$b&#125;</code></td></tr><tr><td align="left"><code>/</code></td><td align="left"><code>&#123;$a/$b&#125;</code></td></tr><tr><td align="left"><code>%</code></td><td align="left"><code>&#123;$a%$b&#125;</code></td></tr><tr><td align="left"><code>++</code></td><td align="left"><code>&#123;$a++&#125;</code> 或 <code>&#123;++$a&#125;</code></td></tr><tr><td align="left"><code>--</code></td><td align="left"><code>&#123;$a--&#125;</code> 或<code>&#123;--$a&#125;</code></td></tr><tr><td align="left">综合运算</td><td align="left"><code>&#123;$a+$b*10+$c&#125;</code></td></tr></tbody></table><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;$user.score+10&#125; &#x2F;&#x2F;正确的&#123;$user[&#39;score&#39;]+10&#125; &#x2F;&#x2F;正确的&#123;$user[&#39;score&#39;]*$user[&#39;level&#39;]&#125; &#x2F;&#x2F;正确的&#123;$user[&#39;score&#39;]|myFun*10&#125; &#x2F;&#x2F;错误的&#123;$user[&#39;score&#39;]+myFun($user[&#39;level&#39;])&#125; &#x2F;&#x2F;正确的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h5><p>支持三元运算符</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">性别：&#123;$user-&gt;sex&#x3D;&#x3D;&#39;man&#39;?&#39;男&#39;:&#39;女&#39;&#125;&lt;br&gt;&#x2F;&#x2F;男，?前表达式为真输出第一个，否则输出第二个<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>特殊写法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;表示如果有设置$name则输出$name,否则输出默认值&#123;$name ?? &#39;默认值&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;表示$name为真时才输出默认值&#123;$name?&#x3D;&#39;默认值&#39;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;表示如果$name为真则输出$name，否则输出NO&#123;$name ?: &#39;NO&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="模板注释"><a href="#模板注释" class="headerlink" title="模板注释"></a>模板注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>注意<code>&#123;</code>和注释标记之间不能有空格。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;&#x2F;* 注释内容 *&#x2F; &#125; 或 &#123;&#x2F;&#x2F; 注释内容 &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;&#x2F;* 这是模板注释内容*&#x2F; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>模板注释支持多行，模板注释在生成编译缓存文件后会自动删除，这一点和Html的注释不同</p><h3 id="原样输出"><a href="#原样输出" class="headerlink" title="原样输出"></a>原样输出</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;literal&#125;应用文件配置，默认模块：&#123;$Think.config.default_module&#125;&lt;br&gt;&#123;&#x2F;literal&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在literal标签中的PHP代码不会被解析，视图代码是什么样子，浏览器代码就输出什么样子</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;literal&#125;&lt;script&gt;    function test() &#123;    let $name&#x3D;&#39;test&#39;;    return &#123;$name&#125;&#125;$result&#x3D;test();console.log($result);&lt;&#x2F;script&gt;&#123;&#x2F;literal&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>literal</code>标签还可以用于页面的JS代码外层，确保JS代码中的某些用法和模板引擎不产生混淆</p><p>总之，所有可能和内置模板引擎的解析规则冲突的地方都可以使用<code>literal</code>标签处理</p><h3 id="内置标签"><a href="#内置标签" class="headerlink" title="内置标签"></a>内置标签</h3><h4 id="资源文件加载"><a href="#资源文件加载" class="headerlink" title="资源文件加载"></a>资源文件加载</h4><p>传统引入外部文件的方式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>text/javascript<span class="token punctuation">'</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/static/js/common.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/css/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在框架中可以简化为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;load href&#x3D;&quot;&#x2F;static&#x2F;js&#x2F;common.js&quot; &#x2F;&#125;&#123;load href&#x3D;&quot;&#x2F;static&#x2F;css&#x2F;style.css&quot; &#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>支持同时加载多个资源文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;load href&#x3D;&quot;&#x2F;static&#x2F;js&#x2F;common.js,&#x2F;static&#x2F;css&#x2F;style.css&quot; &#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提供了两个标签别名</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;js href&#x3D;&quot;&#x2F;static&#x2F;js&#x2F;common.js&quot; &#x2F;&#125;&#123;css href&#x3D;&quot;&#x2F;static&#x2F;css&#x2F;style.css&quot; &#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="循环标签"><a href="#循环标签" class="headerlink" title="循环标签"></a>循环标签</h4><p>控制器内先对模板进行赋值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">public function index()&#123;        $users &#x3D; [            [                &#39;name&#39;&#x3D;&gt;&#39;admin&#39;,                &#39;gender&#39;&#x3D;&gt;&#39;男&#39;,                &#39;age&#39;&#x3D;&gt;18            ],            [                &#39;name&#39;&#x3D;&gt;&#39;zhangsan&#39;,                &#39;gender&#39;&#x3D;&gt;&#39;男&#39;,                &#39;age&#39;&#x3D;&gt;20            ],            [                &#39;name&#39;&#x3D;&gt;&#39;lisi&#39;,                &#39;gender&#39;&#x3D;&gt;&#39;女&#39;,                &#39;age&#39;&#x3D;&gt;21            ]        ];        return $this-&gt;fetch(&#39;&#39;,[&#39;users&#39;&#x3D;&gt;$users]);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的视图模板</p><pre class="line-numbers language-php+html" data-language="php+html"><code class="language-php+html">&lt;table border&#x3D;&quot;1&quot; cellspacing&#x3D;&quot;0&quot;&gt;    &lt;tr&gt;        &lt;th&gt;no&lt;&#x2F;th&gt;        &lt;th&gt;name&lt;&#x2F;th&gt;        &lt;th&gt;gender&lt;&#x2F;th&gt;        &lt;th&gt;age&lt;&#x2F;th&gt;    &lt;&#x2F;tr&gt;    &#123;volist name&#x3D;&quot;users&quot; id&#x3D;&quot;user&quot;&#125;    &lt;tr&gt;        &lt;td&gt;&#123;$i&#125;&lt;&#x2F;td&gt;        &lt;td&gt;&#123;$user.name&#125;&lt;&#x2F;td&gt;        &lt;td&gt;            &#123;$user.gender&#125;        &lt;&#x2F;td&gt;        &lt;td&gt;            &#123;egt name&#x3D;&quot;user.age&quot; value&#x3D;&quot;20&quot;&#125;                青年            &#123;else&#x2F;&#125;                &#123;$user.age&#125;            &#123;&#x2F;egt&#125;        &lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;    &#123;&#x2F;volist&#125;&lt;&#x2F;table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>volist标签</strong>标签通常用于查询数据集或者二维数组的结果输出</p><p><code>Volist</code>标签的<code>name</code>属性表示<strong>模板赋值的变量名称</strong>，因此不可随意在模板文件中改变。<code>id</code>表示<strong>当前的循环变量</strong>，可以随意指定，但确保不要和<code>name</code>属性冲突</p><p>可以在volist标签后面设置参数来达到想要的效果</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;支持输出查询结果中的部分数据，例如输出其中的第5～15条记录&#123;volist name&#x3D;&quot;list&quot; id&#x3D;&quot;vo&quot; offset&#x3D;&quot;5&quot; length&#x3D;&#39;10&#39;&#125;&#123;$vo.name&#125;&#123;&#x2F;volist&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="比较标签"><a href="#比较标签" class="headerlink" title="比较标签"></a>比较标签</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;比较标签 name&#x3D;&quot;变量&quot; value&#x3D;&quot;值&quot;&#125;内容&#123;&#x2F;比较标签&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">标签</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">eq或者 equal</td><td align="left">等于</td></tr><tr><td align="left">neq 或者notequal</td><td align="left">不等于</td></tr><tr><td align="left">gt</td><td align="left">大于</td></tr><tr><td align="left">egt</td><td align="left">大于等于</td></tr><tr><td align="left">lt</td><td align="left">小于</td></tr><tr><td align="left">elt</td><td align="left">小于等于</td></tr><tr><td align="left">heq</td><td align="left">恒等于</td></tr><tr><td align="left">nheq</td><td align="left">不恒等于</td></tr></tbody></table><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;td&gt;    &#x2F;&#x2F;当gender值为男，输出man&#123;eq name &#x3D;&quot;user.gender&quot; value&#x3D;&#39;男&#39;&#125;man&#123;else&#x2F;&#125;&#x2F;&#x2F;其他情况输出womanwoman&#123;&#x2F;eq&#125;&lt;&#x2F;td&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;td&gt;    &#x2F;&#x2F;当age值&#x3D;20，输出青年，其他情况直接输出该值    &#123;egt name&#x3D;&quot;user.age&quot; value&#x3D;&quot;20&quot;&#125;    青年    &#123;else&#x2F;&#125;    &#123;$user.age&#125;    &#123;&#x2F;egt&#125;&lt;&#x2F;td&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="条件判断标签"><a href="#条件判断标签" class="headerlink" title="条件判断标签"></a>条件判断标签</h4><h5 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;switch User.level&#125;    &#123;case 1&#125;value1&#123;&#x2F;case&#125;    &#123;case 2&#125;value2&#123;&#x2F;case&#125;    &#123;default &#x2F;&#125;default&#123;&#x2F;switch&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>支持函数以及系统变量</p><p>对于case属性可以支持多个条件的判断，使用”|”进行分割，例如：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;switch Think.get.type&#125;    &#123;case gif|png|jpg&#125;图像格式&#123;&#x2F;case&#125;    &#123;default &#x2F;&#125;其他格式&#123;&#x2F;switch&#125;&#x2F;&#x2F;表示如果$_GET[&quot;type&quot;]是gif、png或者jpg的话，就判断为图像格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以对case的value属性使用变量，例如：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;switch $User.userId&#125;    &#123;case $adminId&#125;admin&#123;&#x2F;case&#125;    &#123;case $memberId&#125;member&#123;&#x2F;case&#125;&#123;&#x2F;switch&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<strong>使用变量方式的情况下，不再支持<code>|</code>分割的多个条件判断用法。</strong></p><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;if ( $name &#x3D;&#x3D; 1) OR ( $name &gt; 100) &#125; value1&#123;elseif $name &#x3D;&#x3D; 2 &#x2F;&#125;value2&#123;else &#x2F;&#125; value3&#123;&#x2F;if&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="包含文件"><a href="#包含文件" class="headerlink" title="包含文件"></a>包含文件</h3><p>在当前模板文件中可以使用include标签来引入其他模板文件中的代码</p><p>注意：包含的模板文件中不能再使用模板布局或者模板继承</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;Controller中的方法 public function index()&#123;        $users &#x3D; [            [                &#39;name&#39;&#x3D;&gt;&#39;admin&#39;,                &#39;gender&#39;&#x3D;&gt;&#39;男&#39;,                &#39;age&#39;&#x3D;&gt;18            ],            [                &#39;name&#39;&#x3D;&gt;&#39;zhangsan&#39;,                &#39;gender&#39;&#x3D;&gt;&#39;男&#39;,                &#39;age&#39;&#x3D;&gt;20            ],            [                &#39;name&#39;&#x3D;&gt;&#39;lisi&#39;,                &#39;gender&#39;&#x3D;&gt;&#39;女&#39;,                &#39;age&#39;&#x3D;&gt;21            ]        ];        return $this-&gt;fetch(&#39;&#39;,[&#39;users&#39;&#x3D;&gt;$users]);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在对应的控制器的视图文件夹下创建视图文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//index.html<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在view文件夹下面创建public文件夹用于存放会被包含的模板文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//header.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>包含文件的操作有三种：</p><h4 id="模板表达式"><a href="#模板表达式" class="headerlink" title="模板表达式"></a>模板表达式</h4><p>模版表达式的定义规则为：<strong>模块@控制器/操作</strong></p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &#123;include file&#x3D;&quot;public&#x2F;header&quot;&#125;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能直接将header模板文件中的代码引入到当前模板中</p><p><strong>一次可以包含多个模板</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;include file&#x3D;&quot;public&#x2F;header,public&#x2F;menu&quot; &#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是一次包含多个模板会按照顺序将引入的模板渲染到浏览器，可能与我们想要的界面不同，因此比较少用</p><p>注意：包含模版文件并不会自动调用控制器的方法，也就是说包含的其他模版文件中的变量赋值需要在当前操作中完成。</p><p>若我们创建一个被包含的模板文件，模板文件中为一个待渲染的列表</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//public/user_list.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>no<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>age<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    &#123;volist name="users" id="user"&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;$i&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;$user.name&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            &#123;eq name ="user.gender" value='男'&#125;            man            &#123;else/&#125;            woman            &#123;/eq&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            &#123;egt name="user.age" value="20"&#125;            青年            &#123;else/&#125;            &#123;$user.age&#125;            &#123;/egt&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    &#123;/volist&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将文件导入到视图模板</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &#123;include file&#x3D;&quot;public&#x2F;header&quot;&#125;    &#123;include file&#x3D;&quot;public&#x2F;user_list&quot;&#125;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时控制器中的方法会将数据渲染到admin/index.html中</p><p>可以理解为仅仅是把被包含的模板文件的那部分代码与include标签的地方相替换</p><h4 id="模版文件"><a href="#模版文件" class="headerlink" title="模版文件"></a>模版文件</h4><p>可以直接包含一个模版文件名（包含完整路径）</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &#123;include file&#x3D;&quot;..&#x2F;application&#x2F;admin&#x2F;view&#x2F;public&#x2F;header.html&quot;&#125;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="传入参数"><a href="#传入参数" class="headerlink" title="传入参数"></a>传入参数</h4><p>include标签支持在包含文件的同时传入参数</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&#x2F;&#x2F;header&lt;header&gt;标题[title]&#123;$title&#125;&lt;&#x2F;header&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[title]可以在include标签中传入</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;include file&#x3D;&quot;public&#x2F;header&quot; title&#x3D;&quot;中括号&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>{$title}可以在控制器中传入</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">public function index()&#123;    $users &#x3D; [        [            &#39;name&#39;&#x3D;&gt;&#39;admin&#39;,            &#39;gender&#39;&#x3D;&gt;&#39;男&#39;,            &#39;age&#39;&#x3D;&gt;18        ],        [            &#39;name&#39;&#x3D;&gt;&#39;zhangsan&#39;,            &#39;gender&#39;&#x3D;&gt;&#39;男&#39;,            &#39;age&#39;&#x3D;&gt;20        ],        [            &#39;name&#39;&#x3D;&gt;&#39;lisi&#39;,            &#39;gender&#39;&#x3D;&gt;&#39;女&#39;,            &#39;age&#39;&#x3D;&gt;21        ]    ];    return $this-&gt;fetch(&#39;&#39;,[&#39;users&#39;&#x3D;&gt;$users,&#39;footer&#39;&#x3D;&gt;&#39;footer&#39;,&#39;title&#39;&#x3D;&gt;&#39;大括号&#39;]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板布局"><a href="#模板布局" class="headerlink" title="模板布局"></a>模板布局</h3><p>TP5可以实现模板布局以及布局嵌套的功能</p><p>三种布局模板的支持方式：</p><p>全局配置方式</p><p>模板标签方式</p><p>动态方法布局</p><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>是一种更加灵活的模板布局方式，模板继承不同于模板布局，甚至在模板布局的上层。</p><p>好比类的继承，模板也可以定义一个基础模板（布局），并且在其中定义相关区块（block），然后继承（extend）该基础模板的子模板就可队基础模板中定义的区块进行重载</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//admin/view/base.html<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&#123;block name="title"&#125;标题&#123;/block&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    &#123;block name="style"&#125;&#123;/block&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    &#123;block name="header"&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>&#123;/block&#125;    &#123;block name="content"&#125;主要内容&#123;/block&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>2021<span class="token entity named-entity" title="&copy;">&amp;copy;</span>诚毅学院<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>    &#123;block name="script"&#125;&#123;/block&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在对应模块下的view文件夹中可以创建一个基础模板，其中有在我们想要的地方定义block块，用name属性做他的标签</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function create()&#123;        return $this-&gt;fetch();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在控制器类中指向想要渲染的模板文件</p><p>在该子模板文件中可以用extend继承这个基础模板的布局，并且对其重写</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;extend name&#x3D;&quot;base&quot; &#x2F;&#125;&#123;block name&#x3D;&quot;style&quot;&#125;&lt;style&gt;    body&#123;        background: greenyellow;    &#125;&lt;&#x2F;style&gt;&#123;&#x2F;block&#125;&#123;block name&#x3D;&quot;header&quot;&#125;&#123;&#x2F;block&#125;&#123;block name&#x3D;&quot;title&quot;&#125;添加管理员&#123;&#x2F;block&#125;&#123;block name&#x3D;&quot;content&quot;&#125;&#123;__block__&#125;中间&#123;&#x2F;block&#125;&#123;block name&#x3D;&quot;script&quot;&#125;    &lt;script&gt;        window.onload &#x3D; function () &#123;            alert(&#39;hello&#39;);        &#125;    &lt;&#x2F;script&gt;&#123;&#x2F;block&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若在子模板中的block标签中没有传值，则会使该block消失</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;block name&#x3D;&quot;content&quot;&#125;&#123;__block__&#125;中间&#123;&#x2F;block&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该标签会将基础模板中的内容包含进来</p><p>extend标签的用法和include标签一样，也可以加载其他模板（比较少用）</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="设计表"><a href="#设计表" class="headerlink" title="设计表"></a>设计表</h3><ul><li>表的字符集与排序规则常选择utf8mb4<ul><li>与utf8的不同在于，utf8mb4能存储四个字节长度的字而utf8只能存三个字节长度的字，如果在该行中可能需要存表情一类的字符，使用utf8就存不下，只能用utf8bm4</li></ul></li><li>根据数据量大小，主键一般选择int或bigint，自增，非空</li><li>用户密码使用MD5加密后长度固定32位，类型可以选择char</li><li>年龄在数据库中主要用生日去计算，而不是用一个固定的年龄，类型一般为date，若用datetime，前端input标签中的date会无法输出该日期</li></ul><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>通过更改database.php配置文件中的参数可以实现与数据库的连接</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;其中有改动的部分，其他部分可根据需求改动&lt;?phpreturn [    &#x2F;&#x2F; 数据库类型    &#39;type&#39;            &#x3D;&gt; &#39;mysql&#39;,    &#x2F;&#x2F; 服务器地址    &#39;hostname&#39;        &#x3D;&gt; &#39;127.0.0.1&#39;,    &#x2F;&#x2F; 数据库名    &#39;database&#39;        &#x3D;&gt; &#39;tp5&#39;,    &#x2F;&#x2F; 用户名    &#39;username&#39;        &#x3D;&gt; &#39;root&#39;,    &#x2F;&#x2F; 密码    &#39;password&#39;        &#x3D;&gt; &#39;123456&#39;,    &#x2F;&#x2F; 端口    &#39;hostport&#39;        &#x3D;&gt; &#39;3306&#39;,    &#x2F;&#x2F; 数据库编码默认采用utf8    &#39;charset&#39;         &#x3D;&gt; &#39;utf8mb4&#39;,    &#x2F;&#x2F; 数据库表前缀    &#39;prefix&#39;          &#x3D;&gt; &#39;php_&#39;,    &#x2F;&#x2F; 数据库调试模式    &#39;debug&#39;           &#x3D;&gt; true,    &#x2F;&#x2F; 是否需要断线重连    &#39;break_reconnect&#39; &#x3D;&gt; true,];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="query"><a href="#query" class="headerlink" title="query()"></a>query()</h4><p>原生查询，参数为sql语句，直接执行sql语句进行查询</p><h4 id="Db-table"><a href="#Db-table" class="headerlink" title="Db::table()"></a>Db::table()</h4><p>指定一个表，参数为表名，需要继承think\Db基类</p><h4 id="DB-name"><a href="#DB-name" class="headerlink" title="DB::name()"></a>DB::name()</h4><p>若在datebase.php中有配置数据表前缀，表名可以省略前缀</p><h4 id="db"><a href="#db" class="headerlink" title="db()"></a>db()</h4><p>助手函数，DB::name()的进一步简化，与上面俩个的效果一样，可以更方便的查询</p><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>查询一条数据，相当于limit 1，若查询结果不存在，返回null</p><h4 id="select"><a href="#select" class="headerlink" title="select()"></a>select()</h4><p>查询所有数据，若查询结果不存在，返回空数组</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">public function index()&#123;    &#x2F;&#x2F;$result &#x3D; Db::query(&#39;select * from php_user&#39;);    &#x2F;&#x2F;$result &#x3D; Db::table(&#39;php_user&#39;)-&gt;find();    &#x2F;&#x2F;$result &#x3D; db(&#39;user&#39;)-&gt;select();    $result &#x3D; Db::table(&#39;php_user&#39;)-&gt;select();    return $this-&gt;fetch(&#39;&#39;,[&#39;users&#39;&#x3D;&gt;$result]);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--admin/view/public/user_list.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>no<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>birth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>opration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    &#123;volist name="users" id="user"&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;$i&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;$user.name&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            &#123;$user.gender&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            &#123;$user.birth&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:url(<span class="token punctuation">'</span>reset_password<span class="token punctuation">'</span>,[<span class="token punctuation">'</span>id<span class="token punctuation">'</span>=>$user.id])&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:url(<span class="token punctuation">'</span>update_user<span class="token punctuation">'</span>,[<span class="token punctuation">'</span>id<span class="token punctuation">'</span>=>$user.id])&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:url(<span class="token punctuation">'</span>delete_user<span class="token punctuation">'</span>,[<span class="token punctuation">'</span>id<span class="token punctuation">'</span>=>$user.id])&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    &#123;/volist&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&#x2F;&#x2F;index.html&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;信息列表&lt;&#x2F;title&gt;    &lt;style&gt;        a&#123;            text-decoration:none;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;button&gt;添加用户&lt;&#x2F;button&gt;&lt;a href&#x3D;&quot;&#123;:url(&#39;tologin&#39;)&#125;&quot;&gt;注销&lt;&#x2F;a&gt;    &#123;include file&#x3D;&quot;..&#x2F;application&#x2F;admin&#x2F;view&#x2F;public&#x2F;header.html&quot; title&#x3D;&quot;header&quot;&#125;    &#123;include file&#x3D;&quot;public&#x2F;user_list&quot;&#125;    &#123;include file&#x3D;&quot;public&#x2F;footer&quot;&#125;&lt;&#x2F;body&gt;&lt;script&gt;    window.onload&#x3D;function () &#123;        var btn &#x3D; document.querySelectorAll(&#39;button&#39;);        btn[0].onclick &#x3D; function () &#123;            window.location&#x3D;&quot;&#123;:url(&#39;create_user&#39;)&#125;&quot;        &#125;    &#125;&lt;&#x2F;script&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在href中写**{:url(‘tologin’)}**会自动解析到当前页面所属的控制器类中的另一个方法</p><h4 id="where"><a href="#where" class="headerlink" title="where()"></a>where()</h4><p>指定查询的条件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;查询id与传入的id相同的一条信息$user &#x3D; Db::table(&#39;php_user&#39;)-&gt;where(&#39;id&#39;,$id)-&gt;find();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="value"><a href="#value" class="headerlink" title="value()"></a>value()</h4><p>查询某个字段的值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 返回id&#x3D;1的name的值&#x2F;&#x2F;select name from php_user where id&#x3D;1;Db::table(&#39;php_user&#39;)-&gt;where(&#39;id&#39;,1)-&gt;value(&#39;name&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="column"><a href="#column" class="headerlink" title="column()"></a>column()</h4><p>查询某一列的值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 查询status&#x3D;1的所name的值Db::table(&#39;php_user&#39;)-&gt;where(&#39;status&#39;,1)-&gt;column(&#39;name&#39;);&#x2F;&#x2F; 指定id字段的值作为索引Db::table(&#39;php_user&#39;)-&gt;where(&#39;status&#39;,1)-&gt;column(&#39;name&#39;,&#39;id&#39;);&#x2F;&#x2F; 指定id字段的值作为索引 返回所有数据Db::table(&#39;php_user&#39;)-&gt;where(&#39;status&#39;,1)-&gt;column(&#39;*&#39;,&#39;id&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:url(<span class="token punctuation">'</span>login<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">function toLogin()&#123;    &#x2F;&#x2F;跳转到登录页面    return $this-&gt;fetch(&#39;login&#39;);&#125;function login()&#123;    &#x2F;&#x2F;获取前端输入的用户名密码    $name &#x3D; input(&#39;name&#39;);    &#x2F;&#x2F;密码使用MD5加密    $password &#x3D; md5(input(&#39;password&#39;));    &#x2F;&#x2F;若输入的用户名密码能与数据库匹配到，则跳转到主页面    $result &#x3D; Db::table(&#39;php_user&#39;)-&gt;where([&#39;name&#39;&#x3D;&gt;$name,&#39;password&#39;&#x3D;&gt;$password])-&gt;find();    if ($result!&#x3D;null)&#123;        $this-&gt;success(&#39;登陆成功&#39;,&#39;index&#39;);    &#125;else&#123;        &#x2F;&#x2F;error不加第二个参数会保留在当前页面        $this-&gt;error(&#39;登录失败&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><p>向数据库提交数据</p><h4 id="strict"><a href="#strict" class="headerlink" title="strict()"></a>strict()</h4><p>参数为false时，若要插入的字段不存在，也能插入成功</p><h4 id="insertGetId"><a href="#insertGetId" class="headerlink" title="insertGetId()"></a>insertGetId()</h4><p>添加数据后返回新增数据的自增主键</p><h4 id="insertAll"><a href="#insertAll" class="headerlink" title="insertAll()"></a>insertAll()</h4><p>insertAll 方法添加数据成功返回添加成功的条数，很少用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--在index中添加用户的按钮--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            window<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">"&#123;:url('create_user')&#125;"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--admin/view/admin/create_user.html--></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:url(<span class="token punctuation">'</span>save_user<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--伪装请求方法--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        性别：        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>男        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>出生日期：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>保存<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">function create_user()&#123;    &#x2F;&#x2F;跳转到添加用户的界面    return $this-&gt;fetch(&#39;&#39;);&#125;&#x2F;&#x2F;保存用户信息function save_user()&#123;    &#x2F;&#x2F;获取表单输入的所有信息    $data&#x3D;input();    &#x2F;&#x2F;保存密码前先转为MD5格式    $data[&#39;password&#39;]&#x3D;md5($data[&#39;password&#39;]);    Db::name(&#39;php_user&#39;)-&gt;strict(false)-&gt;insertGetId($data);    return $this-&gt;success(&#39;添加成功&#39;,url(&#39;index&#39;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><h4 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h4><p>修改数据库中的数据，可在后面拼接方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Db::name(&#39;user&#39;)    -&gt;where(&#39;id&#39;, 1)    -&gt;update([&#39;name&#39; &#x3D;&gt; &#39;thinkphp&#39;]);&#x2F;&#x2F;UPDATE &#39;think_user&#39;  SET &#39;name&#39;&#x3D;&#39;thinkphp&#39;  WHERE  &#39;id&#39; &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">Db::name(&#39;user&#39;)    -&gt;where(&#39;id&#39;,1)    -&gt;inc(&#39;read_time&#39;)&#x2F;&#x2F;read+1    -&gt;dec(&#39;score&#39;,3)&#x2F;&#x2F;score-3    -&gt;exp(&#39;name&#39;,&#39;UPPER(name)&#39;)&#x2F;&#x2F;name次幂    -&gt;update();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--update_user--></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>修改用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:url(<span class="token punctuation">'</span>edit_user<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;$user.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;$user.name&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        性别：        &lt;input type="radio" name="gender" value="男" &#123;if $user['gender']=='男'&#125;checked&#123;/if&#125;>男        &lt;input type="radio" name="gender" value="女" &#123;if $user['gender']=='女'&#125;checked&#123;/if&#125;>女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>出生日期：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;$user.birth&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>保存<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;要修改数据时应该先获取要修改的数据对象，并且传到视图中function update_user($id)&#123;    $user &#x3D; Db::table(&#39;php_user&#39;)-&gt;where(&#39;id&#39;,$id)-&gt;find();    return $this-&gt;fetch(&#39;&#39;,[&#39;user&#39;&#x3D;&gt;$user]);&#125;&#x2F;&#x2F;获取表单中的所有信息进行修改function edit_user($id)&#123;    dump(input());    Db::table(&#39;php_user&#39;)-&gt;where(&#39;id&#39;,$id)-&gt;update(input());    return $this-&gt;success(&#39;修改成功&#39;,url(&#39;index&#39;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><h4 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h4><p>传入参数为要删除的数据的主键</p><p>当参数为true时，无条件删除所有数据</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Db::name(&#39;user&#39;)-&gt;delete(true);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 根据主键删除Db::table(&#39;think_user&#39;)-&gt;delete(1);&#x2F;&#x2F; 条件删除    Db::table(&#39;think_user&#39;)-&gt;where(&#39;id&#39;,1)-&gt;delete();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="物理删除"><a href="#物理删除" class="headerlink" title="物理删除"></a>物理删除</h4><p>直接将数据从磁盘上删除，再也找不到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function delete_user($id)&#123;    $result&#x3D;Db::table(&#39;php_user&#39;)-&gt;where(&#39;id&#39;,$id)-&gt;delete();    return $this-&gt;success($result&gt;0?&#39;删除成功&#39;:&#39;删除失败&#39;,url(&#39;index&#39;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4><p>软删除，将数据删除，但是还是保存在磁盘上，只是给了一个独立的字段记录它是否被删除</p><h5 id="useSoftDelete"><a href="#useSoftDelete" class="headerlink" title="useSoftDelete()"></a>useSoftDelete()</h5><p>将第一个参数的值改成第二个参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function delete_user($id)&#123;    $result&#x3D;Db::table(&#39;php_user&#39;)-&gt;useSoftDelete(&#39;deleted&#39;,1)-&gt;delete($id);    return $this-&gt;success($result&gt;0?&#39;删除成功&#39;:&#39;删除失败&#39;,url(&#39;index&#39;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时记得将查询操作中加上一个条件，将已经软删除的数据排除出去</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">public function index()&#123;    $result &#x3D; Db::table(&#39;php_user&#39;)-&gt;where(&#39;deleted&#39;,0)-&gt;select();    return $this-&gt;fetch(&#39;&#39;,[&#39;users&#39;&#x3D;&gt;$result]);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以用删除的时间当作软删除的记录</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 软删除数据 使用delete_time字段标记删除Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;, 1)-&gt;useSoftDelete(&#39;delete_time&#39;,time())    -&gt;delete();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h3><p>查询表达式支持大部分的SQL查询语法</p><h4 id="where-1"><a href="#where-1" class="headerlink" title="where()"></a>where()</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">where(&#39;字段名&#39;,&#39;表达式&#39;,&#39;查询条件&#39;);whereOr(&#39;字段名&#39;,&#39;表达式&#39;,&#39;查询条件&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="left">表达式</th><th align="left">含义</th><th align="left">快捷查询方法</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等于</td><td align="left"></td></tr><tr><td align="left">&lt;&gt;</td><td align="left">不等于</td><td align="left"></td></tr><tr><td align="left">&gt;</td><td align="left">大于</td><td align="left"></td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于</td><td align="left"></td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left"></td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于</td><td align="left"></td></tr><tr><td align="left">[NOT] LIKE</td><td align="left">模糊查询</td><td align="left"><code>whereLike/whereNotLike</code></td></tr><tr><td align="left">[NOT] BETWEEN</td><td align="left">（不在）区间查询</td><td align="left"><code>whereBetween/whereNotBetween</code></td></tr><tr><td align="left">[NOT] IN</td><td align="left">（不在）IN 查询</td><td align="left"><code>whereIn/whereNotIn</code></td></tr><tr><td align="left">[NOT] NULL</td><td align="left">查询字段是否（不）是NULL</td><td align="left"><code>whereNull/whereNotNull</code></td></tr><tr><td align="left">[NOT] EXISTS</td><td align="left">EXISTS查询</td><td align="left"><code>whereExists/whereNotExists</code></td></tr><tr><td align="left">[NOT] REGEXP</td><td align="left">正则（不）匹配查询（仅支持Mysql）</td><td align="left"></td></tr><tr><td align="left">[NOT] BETWEEM TIME</td><td align="left">时间区间比较</td><td align="left">whereBetweenTime</td></tr><tr><td align="left">&gt; TIME</td><td align="left">大于某个时间</td><td align="left"><code>whereTime</code></td></tr><tr><td align="left">&lt; TIME</td><td align="left">小于某个时间</td><td align="left"><code>whereTime</code></td></tr><tr><td align="left">&gt;= TIME</td><td align="left">大于等于某个时间</td><td align="left"><code>whereTime</code></td></tr><tr><td align="left">&lt;= TIME</td><td align="left">小于等于某个时间</td><td align="left"><code>whereTime</code></td></tr><tr><td align="left">EXP</td><td align="left">表达式查询，支持SQL语法</td><td align="left"><code>whereExp</code></td></tr></tbody></table><pre class="line-numbers language-php" data-language="php"><code class="language-php">Db::name(&#39;user&#39;)-&gt;where(&#39;id&#39;,&#39;&lt;&gt;&#39;,100)-&gt;select();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若只有字段名与查询条件，则默认中间的表达式为 = </p><h3 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h3><h4 id="快捷查询"><a href="#快捷查询" class="headerlink" title="快捷查询"></a>快捷查询</h4><p>快捷查询方式是<strong>一种多字段相同查询条件</strong>的简化写法，可以进一步简化查询条件的写法，在多个字段之间用<code>|</code>分割表示<code>OR</code>查询，用<code>&amp;</code>分割表示<code>AND</code>查询</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function login()&#123;    $name &#x3D; input(&#39;name&#39;);    $password &#x3D; md5(input(&#39;password&#39;));    &#x2F;&#x2F;只能支持用户名与密码登录    &#x2F;*$result &#x3D; Db::table(&#39;php_user&#39;)    -&gt;where([&#39;name&#39;&#x3D;&gt;$name,&#39;password&#39;&#x3D;&gt;$password])    -&gt;find();*&#x2F;    &#x2F;&#x2F;能支持用户名|手机号与密码登录    $result &#x3D; Db::table(&#39;php_user&#39;)        -&gt;where(&#39;name|phone&#39;,$name)        -&gt;where(&#39;password&#39;,$password)        -&gt;find();    if ($result!&#x3D;null)&#123;        $this-&gt;success(&#39;登陆成功&#39;,&#39;index&#39;);    &#125;else&#123;        $this-&gt;error(&#39;登录失败&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h3><p>数据库提供的链式操作方法，可以有效的提高数据存取的代码清晰度和开发效率，并且支持所有的CURD操作（原生查询不支持链式操作）。</p><p>以分页查询为例子</p><p><strong>page()</strong></p><p>第一个参数为页数，第二个参数为每页体现的数据条数</p><p>可以将第一个参数设置为变量，通过前端改变此变量的方式来实现分页查询</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">public function index()&#123;    $result &#x3D; Db::table(&#39;php_user&#39;)        -&gt;where(&#39;deleted&#39;,0)        -&gt;page(2,3)        -&gt;select();    return $this-&gt;fetch(&#39;&#39;,[&#39;users&#39;&#x3D;&gt;$result]);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>我们可以使用模型来进行增删改查以及一些聚合操作</p><p>在application下创建common\model目录用于存放模型文件</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义User类，模型的类名应该为数据表去除前缀，首字母大写，并且采用驼峰命名法</p><table><thead><tr><th align="left">型名</th><th align="left">约定对应数据表（假设数据库的前缀定义是 <code>think_</code>）</th></tr></thead><tbody><tr><td align="left">User</td><td align="left">think_user</td></tr><tr><td align="left">UserType</td><td align="left">think_user_type</td></tr></tbody></table><p>模型自动对应的数据表名称都是遵循<strong>小写+下划线</strong>规范，如果你的表名有大写的情况，必须通过设置模型的table属性。</p><p>定义模型时应该继承think\Model类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\common\model;use think\Model;class User extends Model&#123;    &#x2F;&#x2F;一般数据表主键为id时可不写，若不为id需要加上此定义protected $pk &#x3D; &#39;uid&#39;;    &#x2F;&#x2F;若想连接指定的数据库&#x2F;&#x2F; 设置当前模型对应的完整数据表名称    protected $table &#x3D; &#39;think_user&#39;;    &#x2F;&#x2F; 设置当前模型的数据库连接    protected $connection &#x3D; &#39;db_config&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以登录功能为例</p><p>在我们控制器中继承我们刚刚定义好的模型</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">……&#x2F;&#x2F;采用别名的方法更加易于使用use app\common\model\User as UserModel;……class Admin &#123;……  function login()&#123;        &#x2F;&#x2F;能支持用户名|手机号与密码登录        $name &#x3D; input(&#39;name&#39;);        $password &#x3D; input(&#39;password&#39;);        $result &#x3D; UserModel::where(&#39;name|phone&#39;,$name)            -&gt;where(&#39;password&#39;,$password)            -&gt;find();        if ($result!&#x3D;null)&#123;            $this-&gt;success(&#39;登陆成功&#39;,&#39;index&#39;);        &#125;else&#123;            $this-&gt;error(&#39;登录失败&#39;);        &#125;    &#125;  ……&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写Service"><a href="#编写Service" class="headerlink" title="编写Service"></a>编写Service</h4><p>为了提高代码的可重用性，我们原则上应该编写Service类</p><p>创建common\serviece用于存放Service的文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\common\service;&#x2F;&#x2F;引入模型文件use app\common\model\User as UserModel;class User&#123;    &#x2F;**     * 用户登录     * @param $account     * 账号     * @param $password     * 密码     * @return     * bool true:成功 false:失败     *&#x2F;    function login($account,$password)&#123;        &#x2F;&#x2F;有必要的话账号加密也可以在Service中完成&#x2F;&#x2F;$password &#x3D; md5($password);        $result &#x3D; UserModel::where(&#39;name|phone&#39;,$account)            -&gt;where(&#39;password&#39;,$password)            -&gt;find();        return $result!&#x3D;null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在控制器中就可以引入Service</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;……use app\common\service\User as UserService;class Admin&#123;……    function login()&#123;        &#x2F;&#x2F;能支持用户名|手机号与密码登录        $name &#x3D; input(&#39;name&#39;);        $password &#x3D; input(&#39;password&#39;);        $result &#x3D; (new UserService())-&gt;login($name,$password);        if ($result)&#123;            $this-&gt;success(&#39;登陆成功&#39;,&#39;index&#39;);        &#125;else&#123;            $this-&gt;error(&#39;登录失败&#39;);        &#125;    &#125;……&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据调用关系"><a href="#数据调用关系" class="headerlink" title="数据调用关系"></a>数据调用关系</h3><p>—-&gt;箭头所指方向表示调用该模块</p><p>视图（view）&lt;—-&gt;控制器（Controller）—-&gt;Service—-&gt;模型（model）—-&gt;数据库（database）</p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><p>原理：在Service中，通过对模型的方法的调用对数据库进行操作；在控制器中，对Service进行实例化，并且调用其中的方法</p><p>注意：在Service中的操作写法与直接在Controller中的操作写法不一样，因为在Service中是对<strong>模型内的方法</strong>进行调用；而在Controller中，是对<strong>DB类中的方法</strong>进行调用，所继承的类不同，所调用的方法也不同，详见手册</p><p>推荐方式为静态方法，静态方法返回值都是<strong>一个实例</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\common\service;use app\common\model\User as UserModel;class User&#123;    &#x2F;**     * 用户登录     * @param $account 账号     * @param $password 密码     * @return bool true:成功 false:失败     *&#x2F;    function login($account,$password)&#123;        &#x2F;&#x2F;$password &#x3D; md5($password);        $result &#x3D; UserModel::where(&#39;name|phone&#39;,$account)            -&gt;where(&#39;password&#39;,$password)            -&gt;find();        return $result!&#x3D;null;    &#125;    &#x2F;**     * 查询所有数据（包括已删除）     * @return UserModel[]|\think\Collection     *&#x2F;    function getAllUsers()&#123;        return UserModel::select();    &#125;    &#x2F;**     * 查询所用数据（不包括已删除）     * @return UserModel[]|\think\Collection     * 返回有效数据     *&#x2F;    function getValidUsers()&#123;        return UserModel::where(&#39;deleted&#39;,0)-&gt;select();    &#125;    &#x2F;**     * 查询指定数据     * @param $id 要查找的id     * @return UserModel     *&#x2F;    function findOne($id)&#123;        return UserModel::get($id);    &#125;    &#x2F;**     * 更新数据     * @param $id 要修改的id     * @param $data 修改后的数据     * @return UserModel     *&#x2F;    function edit($data)&#123;        UserModel::update($data);    &#125;    &#x2F;**     * 新增数据     * @param $data 要新增的数据     * @return int|string     *&#x2F;    function create($data)&#123;        &#x2F;&#x2F;根据实际情况选择是否要将密码进行MD5加密        &#x2F;&#x2F;$data[&#39;password&#39;]&#x3D;md5($data[&#39;password&#39;]);        UserModel::create($data);    &#125;    &#x2F;**     * 删除数据     * @param $id 要删除的id     * @return bool 用于判断是否删除成功     * @throws \Exception     *&#x2F;    function delete($id)&#123;        return UserModel::useSoftDelete(&#39;deleted&#39;,1)-&gt;delete($id);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\admin\controller;use think\Controller;use think\Db;use think\facade\View;use app\common\service\User as UserService;class Admin extends Controller&#123;    function toLogin()&#123;        return $this-&gt;fetch(&#39;login&#39;);    &#125;    function login()&#123;        &#x2F;&#x2F;能支持用户名|手机号与密码登录        $name &#x3D; input(&#39;name&#39;);        $password &#x3D; input(&#39;password&#39;);        $result &#x3D; (new UserService())-&gt;login($name,$password);        if ($result)&#123;            $this-&gt;success(&#39;登陆成功&#39;,&#39;index&#39;);        &#125;else&#123;            $this-&gt;error(&#39;登录失败&#39;);        &#125;    &#125;        public function index()&#123;        $result &#x3D; (new UserService())-&gt;getValidUsers();        return $this-&gt;fetch(&#39;&#39;,[&#39;users&#39;&#x3D;&gt;$result,&#39;footer&#39;&#x3D;&gt;&#39;footer&#39;,&#39;title&#39;&#x3D;&gt;&#39;大括号&#39;]);    &#125;    function save_user()&#123;        $data&#x3D;input();        (new UserService())-&gt;create($data);        return $this-&gt;success(&#39;添加成功&#39;,url(&#39;index&#39;));    &#125;    function create_user()&#123;        return $this-&gt;fetch(&#39;&#39;);    &#125;    function update_user($id)&#123;        $user &#x3D; (new UserService())-&gt;findOne($id);        return $this-&gt;fetch(&#39;&#39;,[&#39;user&#39;&#x3D;&gt;$user]);    &#125;    function edit_user()&#123;        (new UserService())-&gt;edit(input());        return $this-&gt;success(&#39;修改成功&#39;,url(&#39;index&#39;));    &#125;    function delete_user($id)&#123;        $result&#x3D;(new UserService())-&gt;delete($id);        return $this-&gt;success($result&gt;0?&#39;删除成功&#39;:&#39;删除失败&#39;,url(&#39;index&#39;));    &#125;    function reset_password($id)&#123;        $password &#x3D; &#39;&#39;;        Db::table(&#39;php_user&#39;)-&gt;where(&#39;id&#39;,$id)-&gt;update([&#39;password&#39;&#x3D;&gt;$password]);        return $this-&gt;success(&#39;重置密码成功&#39;,url(&#39;index&#39;));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h3><p>软删除的原理是在数据库加上一个字段，通过修改此标识字段来标记此字段是否被删除</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;Service传统使用DB类的写法&#x2F;**     * 删除数据     * @param $id 要删除的id     * @return bool 用于判断是否删除成功     * @throws \Exception     *&#x2F;function delete($id)&#123;    return UserModel::useSoftDelete(&#39;deleted&#39;,1)-&gt;delete($id);&#125;&#x2F;&#x2F;Controller中function delete_user($id)&#123;    $result&#x3D;(new UserService())-&gt;delete($id);    return $this-&gt;success($result&gt;0?&#39;删除成功&#39;:&#39;删除失败&#39;,url(&#39;index&#39;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;Service通过修改标识字段的写法function deleteUser($id)&#123;    return UserModel::update([&#39;id&#39;&#x3D;&gt;$id,&#39;deleted&#39;&#x3D;&gt;1]);&#125;&#x2F;&#x2F;Controller中&#x2F;&#x2F;因为在Service中调用的是静态方法，返回的是一个实例，所以我们可以直接判断实例内的属性是否为1来判断是否软删除成功function delete_user($id)&#123;        $result&#x3D;(new UserService())-&gt;deleteUser($id);        return $this-&gt;success($result-&gt;deleted&#x3D;&#x3D;&#x3D;1?&#39;删除成功&#39;:&#39;删除失败&#39;,url(&#39;index&#39;));    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以用框架进行软删除，在model中使用SoftDelete的trait，将标识$deleteTime定义为我们数据表中的删除时间的字段，类型为int，长度为11</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;通过框架进行的软删除&#x2F;&#x2F;Modelclass User extends Model&#123;    use SoftDelete;    protected $deleteTime &#x3D; &#39;delete_time&#39;;&#125;&#x2F;&#x2F;Servicefunction sofeDelete($id)&#123;    return UserModel::destroy($id);    &#x2F;&#x2F;若要真实删除则传参改为destroy($id,true)&#125;&#x2F;&#x2F;Controllerfunction delete_user($id)&#123;    $result&#x3D;(new UserService())-&gt;sofeDelete($id);    return $this-&gt;success($result&gt;0?&#39;删除成功&#39;:&#39;删除失败&#39;,url(&#39;index&#39;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用这种方式进行软删除时，再使用模型去查询数据会自动过滤已经软删除了的方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;Service&#x2F;&#x2F;此时已经不会显示已经软删除的信息，无需再使用where去指定function getAllUsers()&#123;    &#x2F;&#x2F;使用模板的方式进行软删除前    &#x2F;&#x2F;return UserModel::where(&#39;deleted&#39;,0)-&gt;select();    &#x2F;&#x2F;&#x2F;&#x2F;使用模板的方式进行软删除后    return UserModel::select();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要查看软删除了的数据可以使用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;Servicefunction getValidUsers()&#123;    return UserModel::withTrashed()-&gt;select();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>withTrashed</td><td>获取包含软删除的数据</td></tr><tr><td>onlyTrashed</td><td>仅获取软删除的数据</td></tr><tr><td>restore</td><td>恢复被软删除的数据</td></tr></tbody></table><h3 id="获取器"><a href="#获取器" class="headerlink" title="获取器"></a>获取器</h3><p>对模型实例的原始数据做出自动处理，不改变数据库内的数据</p><p>也就是说通过获取器处理后，对于PHP框架来说，数据库中的数据内容为在模型中处理过的数据</p><p>命名规范为：</p><p>getFileNameAttr</p><p>FileName为数据表字段的驼峰转换</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function getGenderAttr($val)&#123;    $data&#x3D;[&#39;男&#39;&#x3D;&gt;&#39;男士&#39;,&#39;女&#39;&#x3D;&gt;&#39;女士&#39;];    return $data[$val];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>设置完改获取器后对于框架来说，数据库中值为男变成了男士，女变成了女士，在视图调用的时候也需要进行修改</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;男&quot; &#123;if $user.gender&#x3D;&#x3D;&#39;男士&#39;&#125;checked&#123;&#x2F;if&#125;&gt;男    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;女&quot; &#123;if $user.gender&#x3D;&#x3D;&#39;女士&#39;&#125;checked&#123;&#x2F;if&#125;&gt;女<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="动态获取器"><a href="#动态获取器" class="headerlink" title="动态获取器"></a>动态获取器</h4><p>使用动态获取器，无需在模型类中定义获取器方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;定义动态获取器，在查询数据时将name字段中的英文全部转为大写function getValidUsers()&#123;    return UserModel::withAttr(&#39;name&#39;,function ($val,$data)&#123;        return strtoupper($val);    &#125;)-&gt;select();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a>修改器</h3><p>和获取器相反，修改器的主要作用是对模型设置的数据对象值进行处理</p><p>命名规范为：</p><p>setFileNameAttr</p><p>FileName为数据表字段的驼峰转换</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;定义动态修改器，在前端页面传入name字段的数据时将英文全部转为大写&#x2F;**  * @param $val 数据表中gender字段的数据  * @return string  *&#x2F;function getGenderAttr($val)&#123;    $data&#x3D;[&#39;男&#39;&#x3D;&gt;&#39;男士&#39;,&#39;女&#39;&#x3D;&gt;&#39;女士&#39;];    return $data[$val];&#125;&#x2F;**  * @param $val delete_time字段的数据  * @param $data 表中所有的数据  * @return string  *&#x2F;function getDeleteTimeAttr($val,$data)&#123;    dump($val);    dump($data);    return $data[&#39;delete_time&#39;]?&#39;无效&#39;:&#39;有效&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据自动完成"><a href="#数据自动完成" class="headerlink" title="数据自动完成"></a>数据自动完成</h3><p>指不需要手动赋值的情况下对字段的值进行处理后写入数据库</p><p>系统支持<strong>auto</strong>、<strong>insert</strong>、<strong>update</strong>三个属性，分别在写入、新增和更新时进行字段的自动完成机制，<strong>auto</strong>属性自动完成包含新增和更新操作</p><p>例如我们要在新建用户时获取该用户的ip</p><p>先在数据库加上ip字段，类型为varchar</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;Model&#x2F;&#x2F;在模型中定义ip字段protected $auto &#x3D; [&#39;ip&#39;];&#x2F;&#x2F;自动写入ip地址function setIpAttr()&#123;    return request()-&gt;ip();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>系统支持自动写入创建和更新的时间戳（默认关闭），有两种方法配置支持：</p><h5 id="全局开启"><a href="#全局开启" class="headerlink" title="全局开启"></a>全局开启</h5><p>在database.php配置文件中</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 开启自动写入时间戳字段&#39;auto_timestamp&#39; &#x3D;&gt; true,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="模型开启"><a href="#模型开启" class="headerlink" title="模型开启"></a>模型开启</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">protected $autoWriteTimestamp &#x3D; true;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以在database.php中全局开启，之后在不需要自动写入时间戳的模型类中单独关闭</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">protected $autoWriteTimestamp &#x3D; false;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置开启时会自动写入create_time和update_time两个字段的值，默认为整形（int），所以我们需要在数据库中创建对应的字段</p><p>若我们的时间字段不是int类型，我们可以指定他自动写入的类型</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 开启自动写入时间戳字段&#39;auto_timestamp&#39; &#x3D;&gt; &#39;datetime&#39;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">protected $autoWriteTimestamp &#x3D; &#39;datetime&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：更改自动写入时间戳字段后，使用模型基类Model进行的软删除中的date_time自动写入的数据类型也会变成datetime，数据库中也需要进行相对应的更改！</p><h5 id="自定义时间戳字段名"><a href="#自定义时间戳字段名" class="headerlink" title="自定义时间戳字段名"></a>自定义时间戳字段名</h5><p>当数据库中的字段名不为create_time和update_time时，我们可以在模型中对这两个字段名进行自定义</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 定义时间戳字段名protected $createTime &#x3D; &#39;create_at&#39;;protected $updateTime &#x3D; &#39;update_at&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果只需要写入其中一个时间戳，我们可以单独关闭某个字段</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 关闭自动写入update_time字段protected $updateTime &#x3D; false;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>通过模型关联操作把数据表的关联关系对象化，解决大部分常用的关联场景，封装的关联操作比起常规的数据库操作更加智能高效。</p><h4 id="一对一关联"><a href="#一对一关联" class="headerlink" title="一对一关联"></a>一对一关联</h4><p>一个用户对应一个地址</p><p>此时用户表php_user有一个拓展表php_user_extend，在TP5中也为这个表创建一个UserExtend的Model</p><p>拓展表中记录了用户所处的省市区的信息，以user_id作为外键与php_user关联，但在php_user_extend表中没有创建外键关联</p><p>可以在User的model里为这两个表创建关联</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;Modelfunction extend2()&#123;    &#x2F;&#x2F;一个用户有一个信息对应的拓展表    return $this-&gt;hasOne(&#39;UserExtend&#39;,&#39;user_id&#39;,&#39;id&#39;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>hasOne</code>方法的参数包括：</p><p><strong>hasOne(‘关联模型’,’外键’,’主键’);</strong></p><p>除了关联模型外，其它参数都是可选。</p><ul><li><strong>关联模型</strong>（必须）：关联的模型名或者类名</li><li><strong>外键</strong>：默认的外键规则是当前模型名（不含命名空间，下同）+<code>_id</code> ，例如<code>user_id</code></li><li><strong>主键</strong>：当前模型主键，默认会自动获取也可以指定传入</li></ul><p>此时就可以在控制器中调用模型中的方法去查询拓展表的数据</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function test()&#123;    &#x2F;&#x2F;1为id为1的数据    $user &#x3D; UserModel::get(1);    dump($user-&gt;extend2-&gt;province);&#125;&#x2F;&#x2F;D:\wamp64\www\thinkPHP\lesson\thinkphp\library\think\Debug.php:226:string &#39;江西省&#39; (length&#x3D;9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过拓展表的某个属性来查找主表的数据</p><p><strong>hasWhere(‘关联模型’,’查找的字段名和数据组成的数组’)</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function test()&#123;    $user &#x3D; UserModel::hasWhere(&#39;extend2&#39;,[&#39;province&#39;&#x3D;&gt;&#39;江西省&#39;])-&gt;select();    dump($user);&#125;&#x2F;*** D:\wamp64\www\thinkPHP\lesson\thinkphp\library\think\Debug.php:226:array (size&#x3D;1)0 &#x3D;&gt; array (size&#x3D;11)&#39;id&#39; &#x3D;&gt; int 1&#39;name&#39; &#x3D;&gt; string &#39;张三&#39; (length&#x3D;6)&#39;phone&#39; &#x3D;&gt; string &#39;13600000000&#39; (length&#x3D;11)&#39;password&#39; &#x3D;&gt; string &#39;123&#39; (length&#x3D;3)&#39;gender&#39; &#x3D;&gt; string &#39;女士&#39; (length&#x3D;6)&#39;birth&#39; &#x3D;&gt; string &#39;2021-05-11&#39; (length&#x3D;10)&#39;class_id&#39; &#x3D;&gt; int 1&#39;delete_time&#39; &#x3D;&gt; string &#39;有效&#39; (length&#x3D;6)&#39;create_time&#39; &#x3D;&gt; null&#39;update_time&#39; &#x3D;&gt; null&#39;ip&#39; &#x3D;&gt; null*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一对多关联"><a href="#一对多关联" class="headerlink" title="一对多关联"></a>一对多关联</h4><p>一个班级有多个用户</p><p>再为php_user表创建一个php_class表来记录用户的班级</p><p>同时在php_user表中创建一个外键class_id并且与php_class的主键id相关联（两个关联字段的类型与大小应该一致）</p><p>再为php_class创建一个模型ClassEx（Class为系统关键字，会报错）</p><p>此时模型会自动查找php_classex表，会报错，我们应该自己定义此模型对应的数据表，并且在此模型类中写入关联的表</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\common\model;use think\Model;class ClassEx extends Model&#123;    protected $table &#x3D; &#39;php_class&#39;;    &#x2F;&#x2F;一个班级有许多用户    function user()&#123;        return $this-&gt;hasMany(&#39;User&#39;,&#39;class_id&#39;,&#39;id&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>hasMany(‘关联模型’,’外键’,’主键’);</strong></p><p>除了关联模型外，其它参数都是可选。</p><ul><li><strong>关联模型</strong>（必须）：模型名或者模型类名</li><li><strong>外键</strong>：关联模型外键，默认的外键名规则是当前模型名+<code>_id</code></li><li><strong>主键</strong>：当前模型主键，一般会自动获取也可以指定传入</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;Controllerfunction test()&#123;    $class&#x3D;ClassEx::get(1);    &#x2F;&#x2F;获取所有两表关联的信息，包括数据库配置一类    dump($class-&gt;user());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>若要查询一个班级里面的所有用户</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;Controllerfunction test()&#123;    &#x2F;&#x2F;传入的id为1，可以查询1891班的同学    $class&#x3D;ClassExModel::get(1);    dump($class-&gt;user()-&gt;select());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>若要查询用户所在的班级</strong></p><p>先建立两表关联，即用户属于班级</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;UserModelfunction classEx()&#123;    return $this-&gt;belongsTo(&#39;ClassEx&#39;,&#39;class_id&#39;,&#39;id&#39;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;Controllerfunction test()&#123;    $user &#x3D; UserModel::get(1);    dump($user-&gt;classEx);&#x2F;&#x2F;返回id为1的用户在班级表里的信息，返回的信息为数组&#x2F;*D:\wamp64\www\thinkPHP\lesson\thinkphp\library\think\Debug.php:226:array (size&#x3D;2)  &#39;id&#39; &#x3D;&gt; int 1  &#39;name&#39; &#x3D;&gt; string &#39;1891&#39; (length&#x3D;4)*&#x2F;    &#x2F;&#x2F;只获取值中name的信息    dump($user-&gt;classEx[&#39;name&#39;]);&#x2F;&#x2F;D:\wamp64\www\thinkPHP\lesson\thinkphp\library\think\Debug.php:226:string &#39;1891&#39; (length&#x3D;4)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="高级知识"><a href="#高级知识" class="headerlink" title="高级知识"></a>高级知识</h2><h3 id="验证器"><a href="#验证器" class="headerlink" title="验证器"></a>验证器</h3><p>使用验证器进行数据校验</p><p>可以在admin或common文件夹中创建validate文件夹，在里面创建一个User类</p><p>需要继承Validate基类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace app\common\validate;use think\Validate;class User extends Validate&#123;    protected $rule &#x3D;   [        &#39;name&#39;  &#x3D;&gt; &#39;require|max:15|min:6&#39;,        &#39;phone&#39; &#x3D;&gt; &#39;require|mobile&#39;,        &#39;birth&#39; &#x3D;&gt; &#39;require&#39;,        &#39;password&#39; &#x3D;&gt; &#39;require|max:15|min:6&#39;    ];    protected $message  &#x3D;   [        &#39;name.require&#39; &#x3D;&gt; &#39;名称必填&#39;,        &#39;name.max&#39;     &#x3D;&gt; &#39;名称最多不能超过15个字符&#39;,        &#39;name.min&#39;     &#x3D;&gt; &#39;名称最少不能少于6个字符&#39;,        &#39;phone.require&#39; &#x3D;&gt; &#39;手机号必填&#39;,        &#39;phone.mobile&#39; &#x3D;&gt; &#39;请输入正确的手机号&#39;,        &#39;birth&#39; &#x3D;&gt; &#39;日期必填&#39;,        &#39;password.require&#39; &#x3D;&gt; &#39;密码必填&#39;,        &#39;password.max&#39;     &#x3D;&gt; &#39;密码最多不能超过15个字符&#39;,        &#39;password.min&#39;     &#x3D;&gt; &#39;密码最少不能少于6个字符&#39;    ];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在控制器中使用该验证器</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function save_user()&#123;    $data&#x3D;input();    &#x2F;&#x2F;需要先对该验证器进行实例化    $validate &#x3D; new UserValidate();    &#x2F;&#x2F;调用check()将数据传入验证，若不符合规则，返回错误信息    if(!$validate-&gt;check($data))&#123;        return $this-&gt;error($validate-&gt;getError());    &#125;    (new UserService())-&gt;create($data);    return $this-&gt;success(&#39;添加成功&#39;,url(&#39;index&#39;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="批量验证"><a href="#批量验证" class="headerlink" title="批量验证"></a>批量验证</h4><p>可以一次性显示出所有错误信息</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function save_user()&#123;    $data&#x3D;input();    $validate &#x3D; new UserValidate();    &#x2F;&#x2F;使用batch()进行批量验证    if(!$validate-&gt;batch()-&gt;check($data))&#123;        &#x2F;&#x2F;批量验证返回的是一个数组，因此我们需要对错误信息进行遍历、拼接后再输出        &#x2F;&#x2F;定义一个空数组用于存放错误消息        $errors &#x3D; &#39;&#39;;        &#x2F;&#x2F;将返回的错误消息数组遍历        foreach ($validate-&gt;getError() as $error) &#123;            &#x2F;&#x2F;拼接错误消息            $errors .&#x3D; &#39; &#39; . $error;        &#125;        &#x2F;&#x2F;输出        return $this-&gt;error($errors);    &#125;    (new UserService())-&gt;create($data);    return $this-&gt;success(&#39;添加成功&#39;,url(&#39;index&#39;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>think\facade\Cache类或助手函数cache()可以提供缓存功能的支持</p><p>内置支持的缓存类型包括file、memcache、wincache、sqlite、redis和xcache</p><p>全局缓存配置可以直接修改配置目录下的cache.php文件</p><p>配置参数：</p><table><thead><tr><th align="left">参数名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">缓存类型或者缓存驱动类名</td></tr><tr><td align="left">expire</td><td align="left">缓存有效期（秒），默认为0表示永久缓存</td></tr><tr><td align="left">prefix</td><td align="left">缓存标识前缀（默认为空）</td></tr><tr><td align="left">serialize</td><td align="left">（非标量）是否需要自动序列化</td></tr></tbody></table><p>根据缓存驱动的不同需要配置额外的缓存参数，前三个是通用的缓存参数</p><h4 id="cache"><a href="#cache" class="headerlink" title="cache()"></a>cache()</h4><p>我们在开发中比较常用助手函数来设置缓存（类的方式查看文档，了解即可）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function getValidUsers()&#123;    &#x2F;&#x2F;为用户列表创建缓存    $cache &#x3D; cache(&#39;users&#39;);    &#x2F;&#x2F;当缓存不存在    if (!$cache)&#123;        &#x2F;&#x2F;因为缓存中存的是一个对象，因此我们需要先将他转成json格式        $result &#x3D; UserModel::select()-&gt;toJson();        &#x2F;&#x2F;将查询的结果生成缓存文件，缓存有效期60s        cache(&#39;users&#39;,$result,60);        $cache &#x3D; cache(&#39;users&#39;);    &#125;    &#x2F;&#x2F;输出缓存数据时需要对其进行解码    return json_decode($cache);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但由于我们输出的是一个对象，所以我们的视图需要用调用对象属性的方式来渲染数据</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;volist name="users" id="user"&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;$i&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;$user->name&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&#123;$user->phone&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>        &#123;$user->gender&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>        &#123;$user->birth&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>        &#123;$user->delete_time&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:url(<span class="token punctuation">'</span>reset_password<span class="token punctuation">'</span>,[<span class="token punctuation">'</span>id<span class="token punctuation">'</span>=>$user->id])&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:url(<span class="token punctuation">'</span>update_user<span class="token punctuation">'</span>,[<span class="token punctuation">'</span>id<span class="token punctuation">'</span>=>$user->id])&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:url(<span class="token punctuation">'</span>delete_user<span class="token punctuation">'</span>,[<span class="token punctuation">'</span>id<span class="token punctuation">'</span>=>$user->id])&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>&#123;/volist&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们不想更改视图代码，用**{$user.name}**的方式去调用，我们要在json_decode()加上true参数，将其转换成一个数组</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function getValidUsers()&#123;    $cache &#x3D; cache(&#39;users&#39;);    if (!$cache)&#123;        $result &#x3D; UserModel::select()-&gt;toJson();        cache(&#39;users&#39;,$result,60);        $cache &#x3D; cache(&#39;users&#39;);    &#125;    return json_decode($cache,true);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们进行增删改操作时，需要将缓存清除，将缓存有效时间设置为null</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function create($data)&#123;    UserModel::create($data);    cache(&#39;users&#39;,null);&#125;function edit($data)&#123;    UserModel::update($data);    cache(&#39;users&#39;,null);&#125;function sofeDelete($id)&#123;    $result &#x3D; UserModel::destroy($id);    cache(&#39;users&#39;,null);    return $result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>使用paginate()方法可以实现分页（替代select()方法），参数为每页显示多少数据</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function getAllUsers()&#123;    return UserModel::withTrashed()-&gt;withAttr(&#39;delete_time&#39;,function ($val,$data)&#123;        return $data[&#39;delete_time&#39;]?&#39;无效用户&#39;:&#39;有效用户&#39;;    &#125;)-&gt;paginate(4);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后在前端代码中可以使用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#123;$users|raw&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自动生成一个分页列表，支持使用CSS美化</p><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><p>首先使用composer在项目根路径下下载拓展库</p><pre class="line-numbers language-none"><code class="language-none">composer require topthink&#x2F;think-captcha&#x3D;2.0.*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后在模板文件内可以添加验证码的显示代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;:captcha_img()&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--或--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:captcha_src()&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>captcha<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="验证码配置"><a href="#验证码配置" class="headerlink" title="验证码配置"></a>验证码配置</h4><p>我们可以根据需要，在控制器中对验证码进行设置</p><p>相关配置参数查看手册</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function verify()&#123;    $config &#x3D;    [        &#x2F;&#x2F; 验证码字体大小        &#39;fontSize&#39;    &#x3D;&gt;    30,        &#x2F;&#x2F; 验证码位数        &#39;length&#39;      &#x3D;&gt;    4,        &#x2F;&#x2F; 关闭验证码杂点        &#39;useNoise&#39;    &#x3D;&gt;    false    ];    $captcha &#x3D; new Captcha($config);    return $captcha-&gt;entry();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:url(<span class="token punctuation">'</span>login<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>密<span class="token entity named-entity" title="&emsp;">&amp;emsp;</span>码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>验证码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>captcha<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;:url(<span class="token punctuation">'</span>Admin/verify<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>captcha<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">refreshCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="验证码校验"><a href="#验证码校验" class="headerlink" title="验证码校验"></a>验证码校验</h4><p>之后再在login的控制器方法里对验证码进行校验</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function login()&#123;    &#x2F;&#x2F;能支持用户名|手机号与密码登录    $name &#x3D; input(&#39;name&#39;);    $password &#x3D; input(&#39;password&#39;);    &#x2F;&#x2F;验证器    $validate &#x3D; new UserLoginValidate();    if (!$validate-&gt;batch()-&gt;check(input()))&#123;        $errors&#x3D;&#39;&#39;;        foreach ($validate-&gt;getError() as $error)&#123;            $errors .&#x3D;&quot; &quot;.$error;        &#125;        return $this-&gt;error($errors);    &#125;    &#x2F;&#x2F;获取输入的验证码    $captcha &#x3D; input(&#39;code&#39;);    &#x2F;&#x2F;对验证码进行校验    if (!captcha_check($captcha))&#123;        return $this-&gt;error(&#39;验证码不正确&#39;);    &#125;    $result &#x3D; (new UserService())-&gt;login($name,$password);    if ($result)&#123;        $this-&gt;success(&#39;登录成功&#39;,&#39;index&#39;);    &#125;else&#123;        $this-&gt;error(&#39;用户名或密码错误，请重新输入&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：生成的验证码需要保存在session作用域内，因此需要将配置文件session.php内的auto_start设置为true。</p><h4 id="验证码刷新"><a href="#验证码刷新" class="headerlink" title="验证码刷新"></a>验证码刷新</h4><p>可以通过JavaScript来设置点击图片刷新验证码的功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">refreshCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> captcha <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'captcha'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    captcha<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"&#123;:url('Admin/verify')&#125;"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h3><p>我们可以在登录成功后，将当前的用户信息记录到session作用域中。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;UserServicefunction login($account,$password)&#123;    $result &#x3D; UserModel::where(&#39;name|phone&#39;,$account)        -&gt;where(&#39;password&#39;,$password)        -&gt;find();    if($result)&#123;        session(&#39;user&#39;,$account);    &#125;    return $result!&#x3D;null;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在前端模板上显示当前登录的用户信息</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;span&gt;当前用户为：&#123;$Think.session.user&#125;&lt;&#x2F;span&gt;&lt;a href&#x3D;&quot;&#123;:url(&#39;tologin&#39;)&#125;&quot;&gt;注销&lt;&#x2F;a&gt;&lt;br&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时在注销时就应该清空session内的user信息</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function toLogin()&#123;    session(&#39;user&#39;,null);    return $this-&gt;fetch(&#39;login&#39;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在还未登录时，用户应该无法访问除了登录页外的所有页面（类似JavaEE的过滤器）</p><p>我们可以在控制器中加入方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function checkLogin()&#123;    &#x2F;&#x2F;当session内没有user的信息时返回错误信息并且跳转到toLogin    if (!session(&#39;user&#39;))&#123;        return $this-&gt;error(&#39;请先登录&#39;,&#39;toLogin&#39;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后就可以在其他的页面中调用此方法来完成过滤</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">public function index()&#123;    $this-&gt;checkLogin();    $result &#x3D; (new UserService())-&gt;getAllUsers();    return $this-&gt;fetch(&#39;&#39;,[&#39;users&#39;&#x3D;&gt;$result,&#39;footer&#39;&#x3D;&gt;&#39;吴炜瀚&#39;]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是每个新的页面都要调用一次登录校验的方法太过麻烦，我们可以使用控制器的前置操作来实现一个统一的检查</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">protected $beforeActionList &#x3D; [    &#39;checkLogin&#39; &#x3D;&gt; [&#39;except&#39; &#x3D;&gt; &#39;toLogin,login,verify&#39;]];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：需要用except排除不需要检查的操作，或者用only来指定需要检查的操作</p><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><p>首先使用composer在项目根路径下下载拓展库</p><pre class="line-numbers language-none"><code class="language-none">composer require topthink&#x2F;think-image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以在static文件夹下面创建img文件夹用来存放待操作的图片</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;绝对路径$root_path &#x3D; $_SERVER[&#39;DOCUMENT_ROOT&#39;];$img_path &#x3D; $root_path . &#39;&#x2F;static&#x2F;img&#x2F;img.png&#39;;&#x2F;&#x2F;相对路径：&quot;.&#x2F;static&#x2F;img&#x2F;img.png&quot;$img &#x3D; Image::open($img_path);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件的路径从public开始写即可</p><h4 id="剪裁图片"><a href="#剪裁图片" class="headerlink" title="剪裁图片"></a>剪裁图片</h4><p>前两个参数表示剪裁的大小，后两个参数表示剪裁开始的坐标</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$img-&gt;crop(300,300,100,100)-&gt;save(&#39;.&#x2F;static&#x2F;crop_img&#x2F;imgage_crop2.png&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="生成缩略图"><a href="#生成缩略图" class="headerlink" title="生成缩略图"></a>生成缩略图</h4><p>前两参数表示缩放的比例，第三个参数表示缩放的类型</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$img-&gt;thumb(150,150,Image::THUMB_CENTER)-&gt;save(&#39;.&#x2F;static&#x2F;thumb_img&#x2F;img_thumb2.png&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加水印"><a href="#添加水印" class="headerlink" title="添加水印"></a>添加水印</h4><p>第一个参数表示要加上的水印图片，可以添加第二个参数表示要以什么方式添加水印</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$img-&gt;water(&#39;.&#x2F;static&#x2F;thumb_img&#x2F;img_thumb2.png&#39;)-&gt;save(&#39;.&#x2F;static&#x2F;water_img&#x2F;img_water.png&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="调试和命令行"><a href="#调试和命令行" class="headerlink" title="调试和命令行"></a>调试和命令行</h3><h4 id="调试模式-1"><a href="#调试模式-1" class="headerlink" title="调试模式"></a>调试模式</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 开启调试模式——app.php配置文件&#39;app_debug&#39; &#x3D;&gt; true,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开启调试模式后会牺牲一定的执行效率，但能为解决bug带来方便</p><p>优势：</p><ul><li>开启日志记录，任何错误信息和调试信息都会详细记录，便于调试；</li><li>会详细记录整个执行过程；</li><li>模板修改可以即时生效；</li><li>记录SQL日志，方便分析SQL；</li><li>通过Trace功能更好的调试和发现错误；</li><li>发生异常的时候会显示详细的异常信息；</li></ul><h4 id="Trace调试"><a href="#Trace调试" class="headerlink" title="Trace调试"></a>Trace调试</h4><p>给开发人员提供一个用于开发调试的辅助工具，可以实时查看当前页面或者请求的请求信息、运行情况、SQL执行、错误信息和调试信息等，同时支持自己在trace.php配置文件下自定义trace工具</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 开启应用Trace调试&#39;app_trace&#39; &#x3D;&gt;  true,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="变量调试"><a href="#变量调试" class="headerlink" title="变量调试"></a>变量调试</h4><p>dump()</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$blog &#x3D; Db::name(&#39;blog&#39;)-&gt;where(&#39;id&#39;, 3)-&gt;find();dump($blog);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用halt()函数可以在调试变量输出后中止接下来代码的执行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$blog &#x3D; Db::name(&#39;blog&#39;)-&gt;where(&#39;id&#39;, 3)-&gt;find();halt($blog);echo &#39;这里的信息是看不到的&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="内置服务器"><a href="#内置服务器" class="headerlink" title="内置服务器"></a>内置服务器</h4><p>启动内置服务器:php think run（少用）</p><h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><p>php think version</p><h4 id="自动生成模块"><a href="#自动生成模块" class="headerlink" title="自动生成模块"></a>自动生成模块</h4><p>php think build –module test</p><p>会自动生成模块，模块内文件包括</p><p>test</p><ul><li>config</li><li>controller<ul><li>index.php</li></ul></li><li>model</li><li>view</li><li>common.php</li></ul><h4 id="自动生成类文件"><a href="#自动生成类文件" class="headerlink" title="自动生成类文件"></a>自动生成类文件</h4><p>主要有四种：Controller类，Service类，Model类，Validate类</p><p><strong>生成一个资源控制器</strong></p><p>php think make:controller index/Blog</p><p>如果要<strong>生成空的控制器</strong>可以</p><p>php think make:controller index/Blog –plain</p><p><strong>生成模型</strong></p><p>php think make:model index/Blog</p><h4 id="清空缓存文件"><a href="#清空缓存文件" class="headerlink" title="清空缓存文件"></a>清空缓存文件</h4><p>php think clear</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 框架学习 </tag>
            
            <tag> PHP </tag>
            
            <tag> 后端开发 </tag>
            
            <tag> Think PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础</title>
      <link href="/2022/05/16/php/"/>
      <url>/2022/05/16/php/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="PHP概述"><a href="#PHP概述" class="headerlink" title="PHP概述"></a>PHP概述</h2><h3 id="PHP代表含义的演变"><a href="#PHP代表含义的演变" class="headerlink" title="PHP代表含义的演变"></a>PHP代表含义的演变</h3><p>**Personal Home Page **——个人主页</p><p><strong>PHP: Hypertext Preprocessor</strong>——PHP:超文本预处理器</p><h3 id="PHP语言的特性"><a href="#PHP语言的特性" class="headerlink" title="PHP语言的特性"></a>PHP语言的特性</h3><h4 id="实用性"><a href="#实用性" class="headerlink" title="实用性"></a><strong>实用性</strong></h4><p>从一开始PHP就是以实用性为目的创建的；</p><h4 id="强大功能"><a href="#强大功能" class="headerlink" title="强大功能"></a><strong>强大功能</strong></h4><p>PHP有200多个库，超过1000个功能以及成千上万个第三方的扩展；</p><h4 id="数据库支持"><a href="#数据库支持" class="headerlink" title="数据库支持"></a><strong>数据库支持</strong></h4><p>PHP支持25种以上的数据库，目前对主流的数据库都可以支持；</p><h4 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h4><p>PHP是免费的，对使用、修改和再分发没有任何限制。</p><h2 id="PHP基础"><a href="#PHP基础" class="headerlink" title="PHP基础"></a>PHP基础</h2><h3 id="Web页面中嵌入PHP代码"><a href="#Web页面中嵌入PHP代码" class="headerlink" title="Web页面中嵌入PHP代码"></a>Web页面中嵌入PHP代码</h3><h4 id="默认语法"><a href="#默认语法" class="headerlink" title="默认语法"></a><strong>默认语法</strong></h4><ul><li>以**&lt;?php** 作为开头</li><li>以 <strong>?&gt;</strong> 作为结尾</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php echo &#39;hello world&#39;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="短标签"><a href="#短标签" class="headerlink" title="短标签"></a><strong>短标签</strong></h4><ul><li>以 **&lt;?**开头</li><li>以**?&gt;** 结尾</li></ul><p>需要启用php的short_open_tag指令，该值默认为Off，不建议采用。</p><p>推荐方式：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;使用&lt;?&#x3D; &#39;hello world&#39; ?&gt;&#x2F;&#x2F;代替&lt;?php echo &#39;hello world&#39;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a><strong>脚本</strong></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;script language&#x3D;&quot;php&quot;&gt;echo &quot;hello world&quot; ;&lt;&#x2F;script&gt;&#x2F;&#x2F;亲测无效，课件准确度存疑，可能是运行环境不同，避免使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="asp风格"><a href="#asp风格" class="headerlink" title="asp风格"></a><strong>asp风格</strong></h4><ul><li>以**&lt;%** 开头</li><li>以**%&gt;**结尾</li></ul><p>需要启用php的asp_tags 指令，该值默认为Off，不建议采用。</p><hr><p>我们可以在Web页面中嵌入多个代码块</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;?&#x3D; &#39;这是标题&#39;?&gt;&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;        当前时间：&lt;?&#x3D; date(&quot;Y-m-d H:i:s&quot;) ?&gt;        &lt;br&gt;    &lt;?php        printf(&#39;班级有%d人&#39;,70);        echo &quot;&lt;br&gt;&quot;;        $msg &#x3D; sprintf(&#39;班级有%d人&#39;,70);        echo &#39;php&#39;,$msg;        echo &quot;&lt;br&gt;&quot;;         print_r([1,2,3]);         echo &quot;&lt;br&gt;&quot;;         var_dump([1,2,3]);    ?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>date()函数输出的时间可能因时区不同导致不准确</p><p>修改时区方式：</p><p>修改wampserver/bin/apache/apache2.4.18/bin/php.ini配置：</p><p>date.timezone=“Asia/Shanghai” 或者 date.timezone=“PRC” </p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行注释语法"><a href="#单行注释语法" class="headerlink" title="单行注释语法"></a>单行注释语法</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;常规注释方式#Shell脚本注释方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="多行注释语法"><a href="#多行注释语法" class="headerlink" title="多行注释语法"></a><strong>多行注释语法</strong></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;*多行  注释*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="向浏览器输出数据"><a href="#向浏览器输出数据" class="headerlink" title="向浏览器输出数据"></a>向浏览器输出数据</h3><h4 id="print语句"><a href="#print语句" class="headerlink" title="print语句"></a>print语句</h4><p>print()语句的返回值容易误导，返回值永远是1。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php print(1) ?&gt;&#x2F;&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="echo语句"><a href="#echo语句" class="headerlink" title="echo语句"></a><strong>echo语句</strong></h4><p>可以输出多个字符串，中间用逗号隔开</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php echo &#39;hello&#39;,&quot;world&quot; ?&gt;&#x2F;&#x2F;helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>echo和print可以互换，但是echo速度比print稍微快一点，因为什么都不返回</p><h4 id="var-dump语句"><a href="#var-dump语句" class="headerlink" title="var_dump语句"></a><strong>var_dump</strong>语句</h4><p>该语句仅用于调试输出</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php$name&#x3D;&#39;wwh&#39;;var_dump($name);&#x2F;&#x2F;D:\wamp64\www\hello.php:7:string &#39;wwh&#39; (length&#x3D;3)$num&#x3D;1;var_dump($num);&#x2F;&#x2F;D:\wamp64\www\hello.php:9:int 1var_dump([1,2,3]);    &#x2F;&#x2F;D:\wamp64\www\test.php:21:    &#x2F;&#x2F;array (size&#x3D;3)    &#x2F;&#x2F;  0 &#x3D;&gt; int 1    &#x2F;&#x2F;  1 &#x3D;&gt; int 2    &#x2F;&#x2F;  2 &#x3D;&gt; int 3?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="printf语句"><a href="#printf语句" class="headerlink" title="printf语句"></a>printf语句</h4><p>返回值为整数</p><p>常用的类型占位符：</p><ul><li>%d 将参数当作整数，显示为十进制数</li><li>%o 将参数当作整数，显示为八进制数</li><li>%x 将参数当作整数，显示为十六进制数</li><li>%f 将参数当做浮点数，显示为浮点数</li><li>%s 将参数当做字符串，显示为字符串</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpprintf(&#39;班级有%d人&#39;,70);&#x2F;&#x2F;班级有70人printf(&quot;%.2f*%d&#x3D;%.2f&quot;,0.03,10,0.3);&#x2F;&#x2F;0.03*10&#x3D;0.30&#x2F;&#x2F;.2f保留两位小数printf(&quot;今天的日期是%s&quot;,date(&quot;Y-m-d H:i:s&quot;));&#x2F;&#x2F;今天的日期是2021-03-06 16:15:17print_r([1,2,3]);&#x2F;&#x2F;Array ( [0] &#x3D;&gt; 1 [1] &#x3D;&gt; 2 [2] &#x3D;&gt; 3 )?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sprintf语句"><a href="#sprintf语句" class="headerlink" title="sprintf语句"></a><strong>sprintf语句</strong></h4><p>返回值为字符串，功能与printf相同</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php$msg &#x3D; sprintf(&#39;班级有%d人&#39;,70);echo &#39;php&#39;,$msg;&#x2F;&#x2F;php班级有70人?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>PHP有8种数据类型</p><ul><li>标量类型4种：布尔类型、整型、浮点型、字符串</li><li>复合类型2种：数组、对象</li><li>特殊类型2种：资源类型和NULL</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    $age&#x3D;18;    var_dump($age);    $flag&#x3D;true;    var_dump($flag);    $pi &#x3D; 3.14;    var_dump($pi);    $name&#x3D;&quot;zhangsan&quot;;    var_dump($name);    $user&#x3D;null;    var_dump($user);?&gt;&#x2F;*    D:\wamp64\www\dataType.php:3:int 18    D:\wamp64\www\dataType.php:6:boolean true    D:\wamp64\www\dataType.php:9:float 3.14    D:\wamp64\www\dataType.php:12:string &#39;zhangsan&#39; (length&#x3D;8)    D:\wamp64\www\dataType.php:15:null*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类型强制转换"><a href="#类型强制转换" class="headerlink" title="类型强制转换"></a>类型强制转换</h4><p>将一个变量强制转换为与原类型不同的另一种类型，称为类型强制转换。</p><p><strong>第一种转换方式</strong></p><p>(bool)或者(boolean) 、 (int)或者(integer) 、 (real)或者(double)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php$pi&#x3D;3.14;var_dump((int)$pi);    var_dump((integer)$pi);    &#x2F;*D:\wamp64\www\dataType.php:18:int 3    D:\wamp64\www\dataType.php:19:int 3*&#x2F;&#x2F;&#x2F;php的数据类型无单双精度之分$age&#x3D;18;var_dump((float)$age);    var_dump((double)$age);    &#x2F;*D:\wamp64\www\dataType.php:22:float 18    D:\wamp64\www\dataType.php:23:float 18*&#x2F;&#x2F;&#x2F;只有0与空字符串的值会转换成false    var_dump((bool)1);    var_dump((boolean)1);    var_dump((bool)0);    var_dump((bool)&quot;&quot;);&#x2F;*D:\wamp64\www\dataType.php:26:boolean true    D:\wamp64\www\dataType.php:27:boolean true    D:\wamp64\www\dataType.php:28:boolean false    D:\wamp64\www\dataType.php:29:boolean false*&#x2F;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二种转换方式</strong></p><p>调用intval() 、floatval() 、 strval() 、boolvar()等函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;调用方法转换数据类型    $pi &#x3D; 3.14;    var_dump(intval(3.14));    &#x2F;&#x2F;D:\wamp64\www\dataType.php:33:int 3?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三种转换方式</strong></p><p><strong>调用settype()函数转换数据类型</strong></p><p>string gettype(mixed var) 返回值有8种可能值：</p><p>array、boolean、double、integer、object、resource、string和unknown type</p><p><strong>与其相关的函数有：</strong></p><p><strong>调用gettype()函数获取数据类型</strong></p><p>string gettype(mixed var) 返回值有8种可能值：</p><p>array、boolean、double、integer、object、resource、string和unknown type</p><p><strong>调用类型标识符函数确定变量的函数</strong></p><p>is_array()、is_bool()、is_float()、is_integer()、is_null()、is_numeric()、</p><p>is_resource()、is_scalar()和is_string()</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;调用函数转换数据类型    $pi &#x3D; 3.14;    settype($pi,&quot;double&quot;);    &#x2F;&#x2F;获取数据类型    var_dump(gettype($pi));    &#x2F;&#x2F;D:\wamp64\www\dataType.php:36:string &#39;double&#39; (length&#x3D;6)&#x2F;&#x2F;判断是不是所求数据类型    var_dump(is_bool($pi));    var_dump(is_float(3.14));&#x2F;*D:\wamp64\www\dataType.php:39:boolean falseD:\wamp64\www\dataType.php:40:boolean true*&#x2F;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p><strong>标识符</strong>是<strong>变量</strong>、<strong>函数</strong>和其它各种用户<strong>定义对象</strong>通用的术语。</p><p>PHP标识符必须满足以下性质：</p><ul><li>标识符可以由一个或多个字符组成，必须以<strong>字母或下划线开头</strong>，标识符只能由<strong>字母、下划线、数字</strong>组成。非法的标识符：4w，t&amp;b，!b</li><li>标识符区分大小写</li><li>标识符可以是任意长度</li><li>标识符名不能与任何PHP预定义关键字相同</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><ul><li>变量总是以$开头，然后是变量名，变量名遵守标识符命名规则</li><li>变量是区分大小写的 $color，$Color是不同的</li><li>同C语言不同，不需要显式声明变量</li></ul><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><p><strong>按值赋值</strong> 将赋值表达式的值复制到变量 $color = “red”;</p><p><strong>引用赋值</strong> 两个变量指向同一个内容</p><ol><li>在等号后加&amp; 符号可以完成引用赋值</li><li>将&amp;符号放在所引用变量的前面</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    &#x2F;&#x2F;按引用赋值    $name &#x3D; &#39;zhangsan&#39;;    $name2&#x3D;&amp; $name;    var_dump($name,$name2);    &#x2F;*D:\wamp64\www\var.php:5:string &#39;zhangsan&#39; (length&#x3D;8)D:\wamp64\www\var.php:5:string &#39;zhangsan&#39; (length&#x3D;8)*&#x2F;    &#x2F;&#x2F;当改变引用的变量的值时，被引用的对象的值也会一起改变    $name2&#x3D;&#39;lisi&#39;;    var_dump($name,$name2);&#x2F;*D:\wamp64\www\var.php:8:string &#39;lisi&#39; (length&#x3D;4)D:\wamp64\www\var.php:8:string &#39;lisi&#39; (length&#x3D;4)*&#x2F;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以调用isset()函数来判断一个变量是否有被定义</p><p>可以调用unset()函数来销毁一个变量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;判断一个变量是否有定义    $username&#x3D;&#39;wangwu&#39;;    var_dump(isset($username));    &#x2F;&#x2F;销毁变量    unset($username);    var_dump(isset($username));    &#x2F;*D:\wamp64\www\var.php:12:boolean trueD:\wamp64\www\var.php:15:boolean false*&#x2F;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><p>变量作用域有4种：局部变量、函数参数、全局变量、静态变量。</p><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>在函数外声明的变量，但是在函数内不能使用使用。</p><p>要能在函数内使用，可以使用两种方式：</p><ol><li>在函数内，全局变量前面加global关键字</li><li>使用$GLOBALS数组</li></ol><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><p>在函数内声明的变量。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php$out &#x3D; &#39;全局变量&#39;;    function show()&#123;        &#x2F;&#x2F;在函数内无法直接访问全局变量，需要加上global关键字        global $out;        $in &#x3D; &#39;内部变量&#39;;        echo $in,&#39;&lt;br&gt;&#39;,$out,&#39;&lt;br&gt;&#39;;    &#125;    &#x2F;&#x2F;调用函数    show();&#x2F;*内部变量全局变量*&#x2F;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h5><p>在函数名后面的括号内声明的变量。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;传参    function add($num)&#123;        echo $num+1,&#39;&lt;br&gt;&#39;;    &#125;    add(2);&#x2F;&#x2F;3?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h5><p>静态变量在函数退出时不会丢失值，并且还能保留值以便下次使用。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    function show_add()&#123;    &#x2F;&#x2F;不加static关键字        $num &#x3D; 1;        $num++;        echo $num;    &#125;    show_add();&#x2F;&#x2F;2    show_add();&#x2F;&#x2F;2?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpfunction show_add()&#123;        &#x2F;&#x2F;加上static关键字会保留该变量的值        static $num &#x3D; 1;        $num++;        echo $num;    &#125;    show_add();&#x2F;&#x2F;2    show_add();&#x2F;&#x2F;3?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a><strong>超全局变量</strong></h4><p>共有9个， $ _GET、$ _POST、$ _COOKIE、$ _SESSION、$ _REQUEST、</p><p> $ _SERVER 、$ _FILES、$ _ENV、$GLOBALS 。 </p><hr><h5 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a><strong>$_GET</strong></h5><p>表单get方法提交和url参数传递的参数信息。</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&#x2F;&#x2F;表单页面form.html&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;!--设置请求路径与请求方式--&gt;    &lt;form action&#x3D;&quot;get.php&quot; method&#x3D;&quot;get&quot;&gt;        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;        &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;pwd&quot;&gt;        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;    &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&#x2F;&#x2F;获取信息页面get.php&lt;?php    &#x2F;&#x2F;用$_GET[&quot;name&quot;]获取表单页面输入框的name    echo &quot;您的用户名为：&quot;,$_GET[&quot;username&quot;],&quot;&lt;br&gt;&quot;,&quot;您的密码为：&quot;,$_GET[&quot;pwd&quot;];    ?&gt;&#x2F;*在表单页面输入 wwh 123 点击提交跳转页面输出：    您的用户名为：wwh    您的密码为：123url为http:&#x2F;&#x2F;localhost&#x2F;get.php?username&#x3D;wwh&amp;pwd&#x3D;123*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a><strong>$_POST</strong></h5><p>包含用POST方法传递的参数有关的信息。</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&#x2F;&#x2F;表单页面form.html&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;!--设置请求路径与请求方式--&gt;    &lt;form action&#x3D;&quot;get.php&quot; method&#x3D;&quot;post&quot;&gt;        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;        &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;pwd&quot;&gt;        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;    &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&#x2F;&#x2F;获取信息页面get.php&lt;?php    &#x2F;&#x2F;用$_POST[&quot;name&quot;]获取表单页面输入框的name    echo &quot;您的用户名为：&quot;,$_POST[&quot;username&quot;],&quot;&lt;br&gt;&quot;,&quot;您的密码为：&quot;,$_POST[&quot;pwd&quot;];    ?&gt;&#x2F;*在表单页面输入 wwh 123 点击提交跳转页面输出：    您的用户名为：wwh    您的密码为：123url为http:&#x2F;&#x2F;localhost&#x2F;get.php*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="COOKIE"><a href="#COOKIE" class="headerlink" title="$_COOKIE"></a><strong>$_COOKIE</strong></h5><p>包含通过cookie传递到脚本的信息。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;设置cookie的语法setcookie(name, value, expire, path, domain);&#x2F;&#x2F;setcookie() 函数必须位于 &lt;html&gt; 标签之前。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>cookie的设置、输出、查询、删除</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    &#x2F;&#x2F;创建名为&quot;user&quot;的cookie，赋值为&quot;wwh&quot;，并且规定在一个小时后过期    setcookie(&quot;user&quot;, &quot;wwh&quot;, time()+3600);?&gt;    &#x2F;&#x2F;我们可以输出cookie的值，查询所有的cookie &lt;?php    &#x2F;&#x2F; 输出 cookie 值    echo $_COOKIE[&quot;user&quot;],&quot;&lt;br&gt;&quot;;&#x2F;&#x2F;wwh    &#x2F;&#x2F; 查看所有 cookie    print_r($_COOKIE).&quot;&lt;br&gt;&quot;;&#x2F;&#x2F;Array ( [pgv_pvid] &#x3D;&gt; 5955341951 [Phpstorm-b7fdd1cd] &#x3D;&gt; d8af5289-f091-4294-bf94-149ee97da1a7 [user] &#x3D;&gt; wwh ) &#x2F;&#x2F;为删除cookie，将cookie的时间设置为负，则cookie过期自动删除setcookie(&quot;user&quot;, &quot;&quot;, time()-3600);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在网页中，可以使用isset()函数来确认是否已经设置了cookie</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;html&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;    &lt;title&gt;welcome&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;?phpif (isset($_COOKIE[&quot;user&quot;]))    echo &quot;欢迎 &quot; . $_COOKIE[&quot;user&quot;] . &quot;!&lt;br&gt;&quot;;else    echo &quot;普通访客!&lt;br&gt;&quot;;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="SESSION"><a href="#SESSION" class="headerlink" title="$_SESSION"></a>$_SESSION</h5><p>包含与会话变量有关的信息。</p><p>Session 的工作机制是：为每个访客创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，或者通过 URL 进行传导。</p><p>在把用户信息存储到session 中之前，首先要使用session_start()函数启动会话。</p><p>注意：session_start() 函数必须位于 <html> 标签之前。</p><p><strong>创建seeion</strong></p><p>获取浏览量的实例，网页每被浏览一次则views的值+1</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpsession_start();&#x2F;&#x2F;isset() 函数检测是否已设置 &quot;views&quot; 变量    if(isset($_SESSION[&#39;views&#39;]))&#123;        &#x2F;&#x2F;如果已设置则累加计数器        $_SESSION[&#39;views&#39;]&#x3D;$_SESSION[&#39;views&#39;]+1;    &#125;    else&#123;        &#x2F;&#x2F;如果未设置则创建变量并且将其初始化为1        $_SESSION[&#39;views&#39;]&#x3D;1;    &#125;?&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;    &lt;title&gt;view&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;?php&#x2F;&#x2F; 检索 session 数据echo &quot;浏览量：&quot;. $_SESSION[&#39;views&#39;];?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>销毁session</strong></p><p>可以使用 unset() 或 session_destroy() 函数销毁session的数据</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    session_start();    if(isset($_SESSION[&#39;views&#39;]))&#123;        unset($_SESSION[&#39;views&#39;]);    &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    session_start();    if(isset($_SESSION[&#39;views&#39;]))&#123;        session_destroy();    &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h5><p>可记录通过GET、POST和cookie等方法传递给脚本的变量。</p><p>预定义的 $_REQUEST 变量包含了 $ _GET、$ _POST 和 $ _COOKIE 的内容。</p><p>$_REQUEST 变量可用来收集通过 GET 和 POST 方法发送的表单数据。</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&#x2F;&#x2F;在获取信息的页面可以将$_GET、$_POST,改为$_REQUEST，接收get和post的数据&#x2F;&#x2F;获取信息页面get.php&lt;?php    echo &quot;您的用户名为：&quot;,$_REQUEST[&quot;username&quot;],&quot;&lt;br&gt;&quot;,&quot;您的密码为：&quot;,$_REQUEST[&quot;pwd&quot;];    ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h5><p>提供了服务器和客户配置及当前请求环境的有关信息。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpecho $_SERVER[&#39;PHP_SELF&#39;];&#x2F;&#x2F;当前执行脚本的文件名echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;QUERY_STRING&#39;];&#x2F;&#x2F;查询字符串echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;SCRIPT_FILENAME&#39;];&#x2F;&#x2F;当前执行脚本的绝对路径echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;DOCUMENT_ROOT&#39;];&#x2F;&#x2F;当前运行脚本所在的文档根目录echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;SERVER_ADDR&#39;];&#x2F;&#x2F;服务器的 IP 地址echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;REMOTE_ADDR&#39;];&#x2F;&#x2F;客户端IP地址?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="FILES"><a href="#FILES" class="headerlink" title="$_FILES"></a>$_FILES</h5><p>在进行文件上传时，可以获取文件相关的信息及上传的结果。</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;form action&#x3D;&quot;upload_file.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;        &lt;label for&#x3D;&quot;file&quot;&gt;文件名：&lt;&#x2F;label&gt;        &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; id&#x3D;&quot;file&quot;&gt;&lt;br&gt;        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;    &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong><form></strong> 标签的 <strong>enctype</strong> 属性规定了在提交表单时要使用哪种内容类型。在表单需要二进制数据时，使用 “<strong>multipart/form-data</strong>“。</li><li><input> 标签的 <strong>type=”file”</strong> 属性规定了应该把输入作为文件来处理。输入框旁边会出现一个浏览按钮。</li></ul><p><strong>创建上传脚本并且增加上传限制</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F; 允许上传的图片后缀$allowedExts &#x3D; array(&quot;gif&quot;, &quot;jpeg&quot;, &quot;jpg&quot;, &quot;png&quot;);$temp &#x3D; explode(&quot;.&quot;, $_FILES[&quot;file&quot;][&quot;name&quot;]);$extension &#x3D; end($temp);        &#x2F;&#x2F; 获取文件后缀名if ((($_FILES[&quot;file&quot;][&quot;type&quot;] &#x3D;&#x3D; &quot;image&#x2F;gif&quot;)        || ($_FILES[&quot;file&quot;][&quot;type&quot;] &#x3D;&#x3D; &quot;image&#x2F;jpeg&quot;)        || ($_FILES[&quot;file&quot;][&quot;type&quot;] &#x3D;&#x3D; &quot;image&#x2F;jpg&quot;)        || ($_FILES[&quot;file&quot;][&quot;type&quot;] &#x3D;&#x3D; &quot;image&#x2F;pjpeg&quot;)        || ($_FILES[&quot;file&quot;][&quot;type&quot;] &#x3D;&#x3D; &quot;image&#x2F;x-png&quot;)        || ($_FILES[&quot;file&quot;][&quot;type&quot;] &#x3D;&#x3D; &quot;image&#x2F;png&quot;))    &amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 409600)    &#x2F;&#x2F; 小于 400 kb    &amp;&amp; in_array($extension, $allowedExts))&#x2F;&#x2F;判断文件后缀名是否存在于预定义的后缀的范围内&#123;    if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0)    &#123;        echo &quot;错误：: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br&gt;&quot;;    &#125;    else    &#123;        echo &quot;上传文件名: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br&gt;&quot;;        echo &quot;文件类型: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br&gt;&quot;;        echo &quot;文件大小: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] &#x2F; 1024) . &quot; kB&lt;br&gt;&quot;;        echo &quot;文件临时存储的位置: &quot; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];    &#125;&#125;else&#123;    echo &quot;非法的文件格式&quot;;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ENV"><a href="#ENV" class="headerlink" title="$_ENV"></a>$_ENV</h5><p>环境变量，有可能没有任何值，通过var_dump()来查看</p><h5 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h5><p>超级全局变量的超集，包含全局作用域内的所有变量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    $x &#x3D; 1;    $y &#x3D; 2;        function addition()&#123;        $GLOBALS[&#39;z&#39;] &#x3D; $GLOBALS[&#39;x&#39;] + $GLOBALS[&#39;y&#39;];    &#125;    addition();&#x2F;&#x2F;3?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a><strong>可变变量</strong></h4><p>一个变量的变量名可以动态的设置和使用(一般结合常量使用，比如C1，C2。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    $v1 &#x3D; &quot;jan&quot;;    $$v1 &#x3D; &quot;31&quot;;    $v2 &#x3D; &quot;feb&quot;;    $&#123;$v2&#125; &#x3D; &quot;29&quot;;    echo $v1 .&quot; &quot;. $&#123;$v1&#125;;&#x2F;&#x2F;jan 31    echo $v2 .&quot; &quot;. $$v2;&#x2F;&#x2F;feb 29?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量是程序中无法修改的值。</p><p>一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    &#x2F;&#x2F;常量的定义与引用                                  const PI&#x3D;3.14;    var_dump(PI);&#x2F;&#x2F;D:\wamp64\www\const.php:4:float 3.14const TOTAL_COUNT &#x3D; 10;    echo 5 * TOTAL_COUNT;&#x2F;&#x2F;50    define(&quot;MAX_SIZE&quot;,1000);    echo &quot;Max Size is &quot; . MAX_SIZE;&#x2F;&#x2F;Max Size is 1000    echo &quot;Max Size is &quot; . constant(&quot;MAX_SIZE&quot;);&#x2F;&#x2F;Max Size is 1000?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常量使用方式：类名::常量名</p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p><strong>算术操作符</strong> </p><p>+ - * / %</p><p><strong>赋值操作符</strong> </p><p>= += -= *= /= .=</p><p><strong>字符串操作符</strong> </p><p>. .=</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php$a&#x3D;&quot;wwh&quot;;$b&#x3D;&quot;123&quot;;    $a .&#x3D; $b;&#x2F;&#x2F;相当于$a &#x3D; $a.$b    echo $a;&#x2F;&#x2F;wwh123?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自增和自减操作符</strong></p><p> ++$v $v++ – $v $v–</p><p><strong>逻辑操作符</strong> </p><p>&amp;&amp;  AND  ||  OR  !$a   $a XOR $b </p><p><strong>相等操作符</strong> </p><p>== != === !==</p><p><strong>比较操作符</strong> </p><p>&gt; &lt; &gt;= &lt;= 三元运算</p><p><strong>位操作符</strong> </p><p>&amp; 与 | 或 ^ 异或 ~非 &lt;&lt;左移 &gt;&gt;右移</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php$str3 &#x3D; 24&lt;&lt;2;&#x2F;&#x2F;&lt;&lt;左移位×n次2  &gt;&gt;右移位÷n次2    var_dump($str3);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串插入"><a href="#字符串插入" class="headerlink" title="字符串插入"></a>字符串插入</h3><h4 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h4><p>最常见，提供了最大的灵活性，变量和转移字符都可以得到解析。</p><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>php中的转义字符：\n 换行 \r 回车 \t 水平制表符 \ 反斜杠 $ 美元符 &quot; 双引号</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    $str &#x3D; &quot;php&quot;;    &#x2F;&#x2F;在浏览器中未体现换行效果，但是查看网页源代码会体现两行，若需换行，要使用&lt;br &#x2F;&gt;标签    &#x2F;&#x2F;echo &quot;the $str 666 \n 777&quot;;    echo &quot;the $str 666 &lt;br&gt; 777&quot;;&#x2F;&#x2F;the php 666&#x2F;&#x2F;777?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;解析字符串时变量和转义字符都不会被解析。在两种情况下需要转义：    &#x2F;&#x2F;（1）字符串中包括单引号 （2）字符串中包括反斜杠    $str1  &#x3D; &#39;it\&#39;s a book \\ &lt;br&gt;&#39;;    echo $str1;&#x2F;&#x2F; it&#39;s a book \?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h4><p>php可以解析标量数据类型的变量，但是如果嵌入复杂数据类型（数组或者对象）的变量时，要用大括号来解决。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;在语句中嵌入变量可用大括号解决    $name &#x3D; &#39;zhangsan&#39;;&#x2F;&#x2F;$result &#x3D; $name . &quot;在学习&quot;    $result &#x3D; &quot;&#123;$name&#125;在学习&quot;;    echo $result;$arr &#x3D; [&quot;a&quot;&#x3D;&gt;&quot;1&quot;,&quot;b&quot;&#x3D;&gt;&quot;2&quot;];echo &quot;&#123;$arr[&#39;a&#39;]&#125;&quot;;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双引号定界符"><a href="#双引号定界符" class="headerlink" title="双引号定界符"></a>双引号定界符</h4><p>heredoc语法为输出大量文本提供了一种便利的方式，采用两个相同的标识符。</p><p>注意事项：</p><ul><li>开始和结束标识符必须相同</li><li>开始标识符前面必须是&lt;&lt;&lt; </li><li>语法与双引号界定符遵循相同的解析规则，即变量和转义字符都会得到解析，唯一的区别是，此处的双引号不需要转义</li><li>结束标识符必须在一行的开始处，而且前面不能有空格或任何其它多余的字符</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    $str &#x3D; &quot;php&quot;;&#x2F;&#x2F;处理复杂的字符串时可以用双引号定界符    $str2 &#x3D; &lt;&lt;&lt;EOF    &lt;br&gt; this is &quot;$str&quot;;EOF;    echo $str2;&#x2F;&#x2F;this is &quot;php&quot;;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单引号定界符"><a href="#单引号定界符" class="headerlink" title="单引号定界符"></a><strong>单引号定界符</strong></h4><p>php5.3新增的语法，操作等同于heredoc语法，只不过不会解析界定在nowdoc中的文本。（了解即可）</p><p>heredoc使用 &lt;&lt;&lt; EOT 的标示符，而nowdoc使用 &lt;&lt;&lt; ‘EOT’ 这样的标示符</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php$str &#x3D; &quot;php&quot;;    $str2 &#x3D; &lt;&lt;&lt;&#39;EOF&#39;    this is &quot; $v &#39; &#x2F; \ addfddEOF;    echo $str2;&#x2F;&#x2F;this is &quot; $str &#39; &#x2F; \ addfdd?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h3><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><p>if语句和switch语句。</p><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a><strong>循环语句</strong></h4><p>for、foreach、while、do…while。</p><h4 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a><strong>循环控制语句</strong></h4><p>break、continue。</p><p>注意：break会跳出当前循环，而continue是跳出当次循环。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpfor ($i&#x3D;0;$i&lt;&#x3D;5;$i++)&#123;        if ($i&#x3D;&#x3D;2)&#123;            break;        &#125;        echo $i;&#x2F;&#x2F;01    &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpfor ($i&#x3D;0;$i&lt;&#x3D;5;$i++)&#123;        if ($i&#x3D;&#x3D;2)&#123;            continue;        &#125;        echo $i;&#x2F;&#x2F;01345    &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件包含语句"><a href="#文件包含语句" class="headerlink" title="文件包含语句"></a><strong>文件包含语句</strong></h4><p>include、include_once、require、require_once。</p><p>include语句的性能与 require相类似，都是包括并运行指定文件。</p><ul><li><strong>incluce</strong> 在用到时加载</li><li><strong>require</strong> 在一开始就加载</li><li><strong>_once</strong> 后缀表示已加载的不加载</li></ul><p>不同在于：</p><p>​    include语句每次执行文件都要进行读取，require语句只处理一次文件（相当于用文件内容替换require语句），因此执行多次的代码用require语句引入的效率高于include。</p><p>​    <strong>include</strong> 引入文件的时候，如果碰到错误，会给出提示，并<strong>继续运行</strong>下边的代码。</p><p>​    <strong>require</strong> 引入文件的时候，如果碰到错误，会给出提示，并<strong>停止运行</strong>下边的代码。</p><p>include_once和 require_once 语句也是在脚本执行期间包括运行指定文件。</p><p>​    此行为和 include语句及 require类似，使用方法也一样。</p><p>区别是：</p><p>​    如果该文件中的代码已经被包括了，则不会再次包括。这两个语句应该用于在脚本执行期间，同一个文件有可能被包括超过一次的情况下，确保它只被包括一次，以避免函数重定义以及变量重新赋值等问题。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;定义函数的页面&lt;?php    &#x2F;&#x2F;用多种方式计算1-100以内奇数的和    function sum1()&#123;        $sum1 &#x3D; 0;        for ($i1&#x3D;1;$i1&lt;100;$i1++)&#123;            if ($i1%2!&#x3D;0)&#123;                $sum1+&#x3D;$i1;            &#125;        &#125;        echo &quot;for循环的方式：&quot;.$sum1.&quot;&lt;br&gt;&quot;;    &#125;    function sum2()&#123;        $sum2 &#x3D; 0;        $arr &#x3D; range(1, 100);        foreach ($arr as $i2) &#123;            if ($i2 % 2 !&#x3D; 0) &#123;                $sum2 +&#x3D; $i2;            &#125;        &#125;        echo &quot;foreach循环的方式：&quot; . $sum2 . &quot;&lt;br&gt;&quot;;    &#125;    function sum3()&#123;        $sum3 &#x3D; 0;        $i3 &#x3D; 1;        while ($i3&lt;100)&#123;            if ($i3%2!&#x3D;0)&#123;                $sum3+&#x3D;$i3;            &#125;            $i3++;        &#125;        echo &quot;while循环的方式：&quot;.$sum3.&quot;&lt;br&gt;&quot;;    &#125;    function sum4()&#123;        $sum4 &#x3D; 0;        $i4 &#x3D; 1;        do&#123;            if ($i4%2!&#x3D;0)&#123;                $sum4+&#x3D;$i4;            &#125;            $i4++;        &#125;while($i4&lt;100);        echo &quot;do...while循环的方式：&quot;.$sum4.&quot;&lt;br&gt;&quot;;    &#125;?&gt;    &#x2F;&#x2F;调用函数页面&lt;?php    &#x2F;&#x2F;引入包含有函数的页面    include &#39;func_sum.php&#39;;    &#x2F;&#x2F;调用函数    sum1();    sum2();    sum3();    sum4();?&gt;&#x2F;&#x2F;输出&#x2F;*    for循环的方式：2500    foreach循环的方式：2500    while循环的方式：2500    do...while循环的方式：2500*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>PHP中数组的类型：<strong>关联数组</strong>和<strong>索引数组</strong>。</p><h4 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php$month[&quot;Jan&quot;] &#x3D; 31;$month[&quot;Feb&quot;] &#x3D; 29;$week[0] &#x3D; &quot;Sunday&quot;;$week[1] &#x3D; &quot;Monday&quot;;&#x2F;&#x2F;当索引是数值索引并且递增时可以省略索引值$week[] &#x3D; &quot;Sunday&quot;;$week[] &#x3D; &quot;Monday&quot;;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>正式的方法：</strong></p><p>1、用array()创建数组</p><p>2、用[ ]创建数组</p><p>3、用预定义的值填充数组 $month = range(1,12);</p><h4 id="输出数组"><a href="#输出数组" class="headerlink" title="输出数组"></a><strong>输出数组</strong></h4><p>foreach和print_r</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    $month[&quot;Jan&quot;] &#x3D; 31;    $month[&quot;Feb&quot;] &#x3D; 29;print_r($month);&#x2F;&#x2F;Array ( [Jan] &#x3D;&gt; 31 [Feb] &#x3D;&gt; 29 )    $week &#x3D; array(&quot;Sunday&quot;,&quot;Monday&quot;);echo $week[1];&#x2F;&#x2F;Monday    foreach ($week as $value)&#123;        echo $value;&#x2F;&#x2F;SundayMonday    &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组相关的函数"><a href="#数组相关的函数" class="headerlink" title="数组相关的函数"></a>数组相关的函数</h4><p>1、在数组头添加元素 array_unshift array_unshift($arr,”3”,”4”);</p><p>2、在数组尾添加元素 array_push array_push($arr,”3”,”4”);</p><p>3、在数组头删除元素 array_shifit</p><p>4、在数组尾删除元素 array_pop</p><p>5、搜索索引数组值 in_array(key,array) </p><p>6、搜索关联数组键 array_key_exists(key,array) </p><p>7、搜索关联数组值 array_search(key,array) 找到返回key，否则返回false</p><p>8、获取数组键 array_keys(array) 可选参数search_value,strict是否严格匹配</p><p>9、获取数组值 array_values(array)</p><p>10、合并数组 array_merge(array array1,array2 array2,…) 直接合并，键相同覆盖</p><p>11、合并数组 array_combine(aray keys ,array values) 参数分别是键和值数组</p><p>12、拆分数组 array_slice(array array,offset,length,) 注意length可以为负数</p><h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><p>1、使用for循环遍历</p><p>​    获取数组的大小count($arr) 或者 sizeof($arr)。 </p><p>2、foreach遍历（<strong>推荐方式</strong>） </p><p>3、while() each()组合遍历 –了解</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$arr1 &#x3D; [&quot;jan&quot;&#x3D;&gt;31,&quot;feb&quot;&#x3D;&gt;2];while ($arr &#x3D; each($arr1))&#123;    echo $arr[&quot;key&quot;].&quot;-&gt;&quot;.$arr[&quot;value&quot;].&quot;&lt;br&gt;&quot;;&#125;&#x2F;&#x2F;jan-&gt;31&#x2F;&#x2F;feb-&gt;2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、while() each() list()组合遍历 –了解</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$arr1 &#x3D; [&quot;jan&quot;&#x3D;&gt;31,&quot;feb&quot;&#x3D;&gt;2];while(list($key,$value) &#x3D; each($arr1))&#123;     echo $key . &quot;-&gt;&quot; . $value . &quot;&lt;br &#x2F;&gt;&quot;;&#125;&#x2F;&#x2F;jan-&gt;31&#x2F;&#x2F;feb-&gt;2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>PHP发行包中有1000多个标准函数，可以直接使用。</p><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><p><strong>调用内置函数</strong></p><p>例如：计算5的3次方，可以调用power函数。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo pow(5,3);&#x2F;&#x2F;125<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>调用第三方或者自己的函数库</strong></p><p>通过include、require等包含相应的函数库，然后调用函数。</p><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><h5 id="按值传递参数"><a href="#按值传递参数" class="headerlink" title="按值传递参数"></a><strong>按值传递参数</strong></h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;传参    function add($num)&#123;        echo $num+1,&#39;&lt;br&gt;&#39;;    &#125;    add(2);&#x2F;&#x2F;3?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="按引用传递参数"><a href="#按引用传递参数" class="headerlink" title="按引用传递参数"></a><strong>按引用传递参数</strong></h5><p>在函数内对参数的修改也可以体现在函数的作用域外，在参数前加&amp;即可。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php$a &#x3D; 5;    function inc(&amp;$b)&#123;        $b++;    &#125;    inc($a);    echo $a;&#x2F;&#x2F;6?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a><strong>默认参数值</strong></h5><p>可以为输入参数指定默认值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;可以为输入参数指定默认值    function inc($v, $step&#x3D;1)&#123;        return $v + $step;    &#125;    $v &#x3D; 1;    echo inc($v);&#x2F;&#x2F;2  当调用函数时未给值则使用参数默认的值    echo inc($v,5);&#x2F;&#x2F;6&#x2F;&#x2F;当调用函数时给了参数值则使用给定的值?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="从函数返回值"><a href="#从函数返回值" class="headerlink" title="从函数返回值"></a><strong>从函数返回值</strong></h5><p>1.return 返回单个值</p><p>2.返回多个值（利用list（）构造从数组中获取值）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpfunction getUserInfo()&#123;    $user[] &#x3D; &quot;张三&quot;;    $user[] &#x3D; &quot;男&quot;;    $user[] &#x3D; 18;    return $user;&#125;&#x2F;&#x2F;var_dump(getUserInfo());list($name,$gender,$age) &#x3D; getUserInfo();echo $name.$gender.$age;&#x2F;&#x2F;张三男18?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.返回值可以是一个函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function callFunc($a,$b)&#123;    &#x2F;&#x2F;需要用use()调用需要的函数    return function () use($a,$b)&#123;        return $a+$b;    &#125;;&#125;$result &#x3D; callFunc(2,3);echo $result;&#x2F;&#x2F;5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">function calculation($a,$b,$op)&#123;    function add($a,$b)&#123;        return $a+$b;    &#125;    function sub($a,$b)&#123;        return $a-$b;    &#125;    function mul($a,$b)&#123;        return $a*$b;    &#125;    function div($a,$b)&#123;        if ($b&#x3D;&#x3D;&#x3D;0)&#123;            return &quot;除数不能为0！&quot;;        &#125;        return $a&#x2F;$b;    &#125;    switch ($op)&#123;        case &#39;+&#39;:return add($a,$b);        case &#39;-&#39;:return sub($a,$b);        case &#39;*&#39;:return mul($a,$b);        case &#39;&#x2F;&#39;:return div($a,$b);    &#125;&#125;$result &#x3D; calculation(3,0,&#39;&#x2F;&#39;);echo $result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用类型提示"><a href="#使用类型提示" class="headerlink" title="使用类型提示"></a><strong>使用类型提示</strong></h5><p>PHP5引入一个新的特性，叫类型提示，可以强制参数为某个类的对象或者数组</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php$week &#x3D; array(&quot;Sunday&quot;,&quot;Monday&quot;);function process(array $options)&#123;        var_dump($options);    &#125;    process($week);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a><strong>可变函数</strong></h5><p>PHP 支持可变函数的概念。这意味着如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpfunction foo() &#123;    echo &quot;In foo()&lt;br &#x2F;&gt;\n&quot;;    &#125;    $func &#x3D; &#39;foo&#39;;    $func(); &#x2F;&#x2F;In foo() ，表示调用foo()函数?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="检查函数是否存在"><a href="#检查函数是否存在" class="headerlink" title="检查函数是否存在"></a>检查函数是否存在</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;检查函数是否存在,不存在则创建函数if(!function_exists(&#39;inc&#39;))&#123;    function inc($v, $step&#x3D;1)&#123;        return $v + $step;    &#125;&#125;else&#123;    echo &quot;函数已经存在&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="什么是面向对象编程"><a href="#什么是面向对象编程" class="headerlink" title="什么是面向对象编程"></a>什么是面向对象编程</h3><h4 id="面向过程编程和面向对象编程的对比"><a href="#面向过程编程和面向对象编程的对比" class="headerlink" title="面向过程编程和面向对象编程的对比"></a>面向过程编程和面向对象编程的对比</h4><p>面向过程：面向函数编程，通过调用函数来处理所有的逻辑。</p><p>面向对象：按照一个个对象来处理，通过面向对象的处理方式（封装、继承和多态）来处理所有的逻辑。</p><h4 id="面向对象编程的好处"><a href="#面向对象编程的好处" class="headerlink" title="面向对象编程的好处"></a><strong>面向对象编程的好处</strong></h4><p>面向对象是一种思维方法</p><p>按照现实世界我们思考和认识的特点</p><p>将代码世界里具有相关联性的数据和对数据的操作放在一起</p><p>作为一个整体来处理</p><h3 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征"></a><strong>面向对象的特征</strong></h3><p><strong>封装</strong>、<strong>继承</strong>、<strong>多态</strong></p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a><strong>封装</strong></h4><p>隐藏数据，暴露接口（方法）。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h4><p>有共同特征，但是也有个性化的区别，主要好处就是代码重用。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>多态是指两个或多个不同子类的对象，对于同一个消息（方法调用）作出不同响应的方式。简单来说就是“不同子类对象对同一消息作出不同的响应”。</p><p>多态也可以理解成“一个接口，多种实现”，就是同一种事物表现出的多种形态，多态允许将子类的对象当作父类的对象使用，某父类型的引用指向其子类型的对象,调用的方法是该子类型的方法。</p><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a><strong>类</strong></h4><p>类是对现实世界中同一类事物的抽象，包含<strong>属性</strong>和<strong>方法</strong>。</p><p>属性：体现事物的特征。笔记本电脑有型号、颜色等。</p><p>方法：体现事物能做什么操作。笔记本电脑的启动、关机、安装软件、卸载软件等。</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a><strong>对象</strong></h4><p>对象是类的实例。</p><p>对象是一个具体化的事物。</p><p>学生是一个类，而XXX同学则是一个对象。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a><strong>属性</strong></h3><h4 id="声明属性"><a href="#声明属性" class="headerlink" title="声明属性"></a>声明属性</h4><p>创建一个php.class</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpclass student&#123;    public $no;    public $name;    public $gender;    public $age;&#125;&#x2F;&#x2F;利用ide生成get()、set()方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性作用域"><a href="#属性作用域" class="headerlink" title="属性作用域"></a>属性作用域</h4><p>public（公共的）、private（私有的）、protected（受保护的）</p><p>final（子类不可覆盖、重写）、static（静态的）</p><h4 id="调用属性"><a href="#调用属性" class="headerlink" title="调用属性"></a>调用属性</h4><p>属性使用-&gt;操作符引用</p><p>创建一个test.php作为测试页面</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;用include标签引入上面的类include_once &#39;student.php&#39;;&#x2F;&#x2F;创建一个对象$zhangsan &#x3D; new student();&#x2F;&#x2F;为对象增加属性$zhangsan-&gt;setNo(1);$zhangsan-&gt;setName(&quot;张三&quot;);$zhangsan-&gt;setGender(&quot;男&quot;);$zhangsan-&gt;setAge(18);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="get-方法"><a href="#get-方法" class="headerlink" title="__get()方法"></a>__get()方法</h5><p>读取不可访问属性的值时，__get() 会被调用。</p><h5 id="set-方法"><a href="#set-方法" class="headerlink" title="__set()方法"></a>__set()方法</h5><p>在给不可访问属性赋值时，__set() 会被调用。</p><p><strong>创建定制获取方法和设置方法getName() 和setName()</strong></p><p><strong>实例</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;php.class页面&lt;?phpclass student&#123;&#x2F;&#x2F;将属性设置为私有，则测试页面没法直接访问    private $no;    private $name;    private $gender;    private $age;    &#x2F;&#x2F;用ide自动生成get()set()方法    &#x2F;**     * @return mixed     *&#x2F;    public function getNo()    &#123;        return $this-&gt;no;    &#125;    &#x2F;**     * @param mixed $no     *&#x2F;    public function setNo($no)    &#123;        $this-&gt;no &#x3D; $no;    &#125;    &#x2F;**     * @return mixed     *&#x2F;    public function getName()    &#123;        return $this-&gt;name;    &#125;    &#x2F;**     * @param mixed $name     *&#x2F;    public function setName($name)    &#123;        $this-&gt;name &#x3D; $name;    &#125;    &#x2F;**     * @return mixed     *&#x2F;    public function getGender()    &#123;        return $this-&gt;gender;    &#125;    &#x2F;**     * @param mixed $gender     *&#x2F;    public function setGender($gender)    &#123;   &#x2F;&#x2F;设置属性时可以在set方法里面设置条件        if ($gender &#x3D;&#x3D; &#39;男&#39; || $gender &#x3D;&#x3D; &#39;女&#39;)&#123;        $this-&gt;gender &#x3D; $gender;        &#125;else&#123;            $this-&gt;gender &#x3D; &#39;性别不正确&#39;;        &#125;    &#125;    &#x2F;**     * @return mixed     *&#x2F;    public function getAge()    &#123;        return $this-&gt;age;    &#125;    &#x2F;**     * @param mixed $age     *&#x2F;    public function setAge($age)    &#123;        if($age&gt;0 &amp;&amp; $age&lt;&#x3D;120)&#123;            $this-&gt;age &#x3D; $age;        &#125;else&#123;            $this-&gt;age &#x3D; &#39;年龄数据异常&#39;;        &#125;    &#125;    &#x2F;&#x2F;魔术方法，当测试页面访问到无法访问的属性会先调用该方法    function __get($name)    &#123;&#x2F;&#x2F;组成方法名        $methodName &#x3D; &#39;get&#39; .$name;        &#x2F;&#x2F;判断该方法是否存在        if (method_exists($this,$methodName))&#123;            &#x2F;&#x2F;调用对应的方法            return $this-&gt;$methodName();        &#125;    &#125;    function __set($name, $value)    &#123;        $methodName &#x3D; &#39;set&#39; .$name;        if (method_exists($this,$methodName))&#123;            return $this-&gt;$methodName($value);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;test.php页面&lt;?php&#x2F;&#x2F;用include语句引入需要使用的类include_once &#39;student.php&#39;;&#x2F;&#x2F;声明一个对象$zhangsan &#x3D; new student();&#x2F;&#x2F;最直接设置属性的方法，但是仅仅在属性可以被访问时可以这样设置&#x2F;&#x2F;$zhangsan-&gt;setNo(1);&#x2F;&#x2F;$zhangsan-&gt;setName(&quot;张三&quot;);&#x2F;&#x2F;$zhangsan-&gt;setGender(&quot;男&quot;);&#x2F;&#x2F;$zhangsan-&gt;setAge(18);&#x2F;&#x2F;使用魔术方法优化后的设置属性的方法$zhangsan-&gt;no&#x3D;1;$zhangsan-&gt;name&#x3D;&#39;张三&#39;;$zhangsan-&gt;gender&#x3D;&#39;男&#39;;$zhangsan-&gt;age&#x3D;18;&#x2F;&#x2F;如果向对象传入一个类中没有的属性，类会自动添加一个public属性&#x2F;&#x2F;这种情况可以使用魔术方法避免$zhangsan-&gt;college&#x3D;&#39;诚毅学院&#39;;var_dump($zhangsan);&#x2F;*D:\wamp64\www\php_class\test.php:16:object(student)[1]  private &#39;no&#39; &#x3D;&gt; int 1  private &#39;name&#39; &#x3D;&gt; string &#39;张三&#39; (length&#x3D;6)  private &#39;gender&#39; &#x3D;&gt; string &#39;男&#39; (length&#x3D;3)  private &#39;age&#39; &#x3D;&gt; int 18*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="static静态类成员"><a href="#static静态类成员" class="headerlink" title="static静态类成员"></a>static静态类成员</h4><p>共享所有类实例的属性和方法，同所有的类实例有关，但不能由任何特定对象调用。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpclass Visitor&#123;    &#x2F;&#x2F;创建静态变量    static $count&#x3D;0;        &#x2F;&#x2F;创建构造函数    function __construct()    &#123;&#x2F;&#x2F;调用静态变量        &#x2F;&#x2F;每次访问都自增        self::$count++;    &#125;    static function getVistorCount()&#123;        &#x2F;&#x2F;返回自增后的值        return self::$count;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    include &quot;Visitor.php&quot;;    $visitor1&#x3D;new visitor();&#x2F;&#x2F;实例化一次    echo visitor::getVistorCount().&quot;&lt;br&gt;&quot;;&#x2F;&#x2F;1    $visitor2&#x3D;new visitor();&#x2F;&#x2F;实例化二次    echo visitor::getVistorCount().&quot;&lt;br&gt;&quot;&#x2F;&#x2F;2?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="construct"><a href="#construct" class="headerlink" title="__construct"></a>__construct</h4><p>构造方法是创建对象（对象实例化）时自动执行的函数</p><p><strong>优点：</strong></p><ol><li>可以接受参数，在创建对象时赋予给定的对象属性</li><li>可以调用类方法或其他函数</li><li>类的构造方法可以调用其他构造方法，包括父类的构造方法</li></ol><h4 id="destruct"><a href="#destruct" class="headerlink" title="__destruct"></a>__destruct</h4><p>析构方法在用完某个类后，释放不再使用的资源。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;创建一个php.class&#x2F;&#x2F;Website.php&lt;?phpclass Website&#123;    public $name, $url, $title;    &#x2F;&#x2F;构造函数，并且传入参数    public function __construct($str1, $str2, $str3)&#123;        $this -&gt; name  &#x3D; $str1;        $this -&gt; url   &#x3D; $str2;        $this -&gt; title &#x3D; $str3;        &#x2F;&#x2F;在构造函数中调用方法        $this -&gt; demo();    &#125;    public function demo()&#123;        echo $this -&gt; name.&#39;&lt;br&gt;&#39;;        echo $this -&gt; url.&#39;&lt;br&gt;&#39;;        echo $this -&gt; title.&#39;&lt;br&gt;&#39;;    &#125;        &#x2F;&#x2F;析构函数    public function __destruct()    &#123;        echo &quot;析构函数执行完毕&quot;;    &#125;&#125;&#x2F;&#x2F;实例化对象，设定参数$object &#x3D; new Website(&#39;C语言中文网&#39;,&#39;http:&#x2F;&#x2F;c.biancheng.net&#x2F;php&#x2F;&#39;,&#39;构造函数&#39;);?&gt;    &#x2F;*C语言中文网http:&#x2F;&#x2F;c.biancheng.net&#x2F;php&#x2F;构造函数析构函数执行完毕*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="autoload"><a href="#autoload" class="headerlink" title="__autoload()"></a>__autoload()</h4><p>当PHP文件中使用了new关键字实例化一个对象时，如果没有在本PHP文件中被定义，则触发__autoload()，此时就可以自动引入该类PHP文件，进而实例化成功</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;global.php&lt;?phpfunction __autoload($class)&#123;    &#x2F;&#x2F;将触发__autoload()函数的类拼为一个地址    $classpath &#x3D; &quot;$class.php&quot;;    if(file_exists($classpath))&#123;        &#x2F;&#x2F;如果该类有被创建，则引入该文件        require_once &quot;$classpath&quot;;    &#125;else&#123;        &#x2F;&#x2F;如果该类没有被创建，则显示该文件没找到        echo $classpath.&quot; not be found!&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自动加载对象升级版</strong></p><p><strong>spl_autoload_register()</strong></p><p>可以注册多个自动加载函数，可以对接口和抽象类、普通类进行分别注册</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpspl_autoload_register(function($class)&#123;    &#x2F;&#x2F;将触发__autoload()函数的类拼为一个地址    $classpath &#x3D; &quot;$class.php&quot;;    if(file_exists($classpath))&#123;        &#x2F;&#x2F;如果该类有被创建，则引入该文件        require_once &quot;$classpath&quot;;    &#125;else&#123;        &#x2F;&#x2F;如果该类没有被创建，则显示该文件没找到        echo $classpath.&quot; not be found!&quot;;    &#125;&#125;);spl_autoload_register(function($interface)&#123;    &#x2F;&#x2F;将触发__autoload()函数的接口拼为一个地址    $interfacePath &#x3D; &quot;$interface.php&quot;;    if(file_exists($interfacePath))&#123;        &#x2F;&#x2F;如果该接口有被创建，则引入该文件        require_once &quot;$interfacePath&quot;;    &#125;else&#123;        &#x2F;&#x2F;如果该接口没有被创建，则显示该文件没找到        echo $interfacePath.&quot; not be found!&quot;;    &#125;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h4><p>当我们在一个项目里使用多个一样的对象，如果使用new关键字重新创建对象，再赋上相同的属性，这样比较繁琐并且容易出错。</p><p>我们可以用clone关键字根据一个对象完全克隆出一个一模一样的对象，并且克隆以后，两个对象互不干扰。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$object2 &#x3D; clone $object;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想在克隆后改变原对象的内容，需要在类中添加__clone()方法来重写原本的属性和方法。</p><p>__clone()方法只会在对象被克隆时自动调用。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpclass Human&#123;    private $name;    private $age;    &#x2F;**     * Human constructor.     * @param $name     * @param $age     *&#x2F;    public function __construct($name, $age)    &#123;        $this-&gt;name &#x3D; $name;        $this-&gt;age &#x3D; $age;    &#125;    function say()&#123;        echo &quot;我的名字是：&quot;.$this-&gt;name.&#39;,&#39;;        echo &quot;我的年龄是：&quot;.$this-&gt;age.&quot;&lt;br&gt;&quot;;    &#125;    function __clone()    &#123;        $this-&gt;name &#x3D; &quot;我是假的&quot;.$this-&gt;name;        $this-&gt;age &#x3D; 30;    &#125;&#125;$p1 &#x3D; new Human(&quot;zhangsan&quot;,18);$p1-&gt;say();&#x2F;&#x2F;我的名字是：zhangsan,我的年龄是：18$p2 &#x3D; clone $p1;$p2-&gt;say();&#x2F;&#x2F;我的名字是：我是假的zhangsan,我的年龄是：30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h4><p>规定了echo对象输出的内容</p><p>当要echo一个对象时，如果没有该方法会报错</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">function __toString()&#123;    return &quot;no:$this-&gt;no,name:$this-&gt;name,age:$this-&gt;age,gender:$this-&gt;gender&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><p><strong>instanceof</strong></p><p>判断一个对象是类的实例、类的子类或者是否实现了某个接口。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$zhangsan &#x3D; new student();if($zhangsan instanceof student)&#123;    echo &quot;yes&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>class_exists(String classname)</strong></p><p>判断类是否存在</p><p><strong>get_class(object object)</strong></p><p>获取对象的类名</p><p><strong>get_class_methods()</strong></p><p>获取类方法</p><p><strong>get_class_var()</strong></p><p>获取类属性</p><p><strong>get_declared_classes()</strong></p><p>获取声明类</p><p><strong>get_parent_class()</strong></p><p>获取对象属性</p><p><strong>interface_exists()</strong></p><p>确定接口是否存在</p><p><strong>is_a(object,classname)</strong> </p><p>确定对象的类型</p><p> object属于classname类或者classname的子类时，返回true</p><p><strong>is_subclass_of(object,classname)</strong></p><p>确定对象的子类类型</p><p> object继承自classname类时，返回true</p><p><strong>method_exists(object,methodname)</strong> </p><p>确定方法是否存在</p><hr><h3 id="trait"><a href="#trait" class="headerlink" title="trait"></a>trait</h3><p>trait是为类似PHP的单继承语言而准备的一种代码复用机制。</p><p>trait为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用方法。</p><p>我们可以定义一个trait，并且使用use来使用trait里面的方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phptrait SayHi&#123;    function hi()&#123;        echo &quot;hello world&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;SayHi.php&quot;;class Teacher&#123;    use SayHi;&#125;$zhangsan &#x3D; new Teacher();$zhangsan-&gt;hi();&#x2F;&#x2F;&quot;hello world&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，trait如果在父类被使用时，可以继承给子类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;父类Person&lt;?phpinclude &quot;SayHi.php&quot;;class Person&#123;    use SayHi;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;子类Teacher&lt;?phpinclude &quot;Person.php&quot;;class Teacher extends Person&#123;&#x2F;&#x2F;use SayHi;&#125;$lisi &#x3D; new Person();$lisi-&gt;hi();&#x2F;&#x2F;&quot;hello world&quot;echo &quot;&lt;br&gt;&quot;;$zhangsan &#x3D; new Teacher();$zhangsan-&gt;hi();&#x2F;&#x2F;&quot;hello world&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h3><p>继承的概念来自于现实生活，比如汽车类、轮船类都属于交通工具类，可以继承于交通工具类，而汽车类可以派生出自己的子类，如轿车类、面包车类。</p><p>继承的类之间有共同的特征，但是也存在个性化的区别，好处就是代码的重用。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;父类Person&lt;?phpclass Person&#123;&#x2F;&#x2F;在Person类中定义一个方法    function SayHi()&#123;        echo &quot;I am a person&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;子类Teacher&lt;?phpinclude &quot;Person.php&quot;;class Teacher extends Person&#123;    function SayHi()    &#123;&#x2F;&#x2F;继承并且调用父类中的SayHi方法        parent::SayHi();    &#125;&#125;$zhangsan &#x3D; new Teacher();$zhangsan-&gt;SayHi();&#x2F;&#x2F;&quot;I am a person&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当子类FemaleTeacher继承Teacher，他同时也会继承Teacher继承自Person的属性与方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;Teacher.php&quot;;class FemaleTeacher extends Teacher&#123;    function SayHi()    &#123;        parent::SayHi();    &#125;&#125;$lisi &#x3D; new FemaleTeacher();$lisi-&gt;SayHi();&#x2F;&#x2F;&quot;I am a personI am a person&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>当父类有构造方法而子类没有构造方法，在实例化子类时会调用父类的构造方法</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpclass Person&#123;    protected $name;        public function __construct($name)    &#123;        $this-&gt;name &#x3D; $name;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;Person.php&quot;;class Teacher extends Person&#123;&#125;$zhangsan &#x3D; new Teacher(&quot;zhangsan&quot;);var_dump($zhangsan);&#x2F;*D:\wamp64\www\homework two\Teacher.php:10:object(Teacher)[1]  protected &#39;name&#39; &#x3D;&gt; string &#39;zhangsan&#39; (length&#x3D;8)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>当父类与子类都有构造方法的时候，无论父类有无构造方法，都会执行子类的构造方法</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;Person.php&quot;;class Teacher extends Person&#123;    protected $teacherID;    &#x2F;**     * Teacher constructor.     * @param $teacherID     *&#x2F;    public function __construct($teacherID)    &#123;        $this-&gt;teacherID &#x3D; $teacherID;    &#125;&#125;$zhangsan &#x3D; new Teacher(&quot;zhangsan&quot;,1);var_dump($zhangsan);&#x2F;*D:\wamp64\www\homework two\Teacher.php:20:object(Teacher)[1]  protected &#39;teacherID&#39; &#x3D;&gt; string &#39;zhangsan&#39; (length&#x3D;8)  protected &#39;name&#39; &#x3D;&gt; null*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，由于子类的构造方法中没有传入父类的$name的参数，因此尽管继承了该构造方法，实例化时向里面传入了值，该name也会为null。</p><p>因此当我们希望子类执行父类的构造方法时，可以用parent::引入，该方法会向上检索构造方法，直到最顶层</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;Person.php&quot;;class Teacher extends Person&#123;    protected $teacherID;    &#x2F;**     * Teacher constructor.     * @param $teacherID     *&#x2F;    public function __construct($name,$teacherID)    &#123;        parent::__construct($name);        $this-&gt;teacherID &#x3D; $teacherID;    &#125;&#125;$zhangsan &#x3D; new Teacher(&quot;zhangsan&quot;,1);var_dump($zhangsan);&#x2F;*D:\wamp64\www\homework two\Teacher.php:21:object(Teacher)[1]  protected &#39;teacherID&#39; &#x3D;&gt; int 1  protected &#39;name&#39; &#x3D;&gt; string &#39;zhangsan&#39; (length&#x3D;8)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口是对行为的抽象，在PHP中，接口只包括常量和方法</p><h4 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;定义一个接口，其中有一个常量与两个方法interface IFly&#123;    const NAME&#x3D;&#39;IFLY&#39;;    function fly();    function fly2();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现单个接口"><a href="#实现单个接口" class="headerlink" title="实现单个接口"></a>实现单个接口</h4><p>在一个类实现接口时，必须实现接口中所有的方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;创建一个Bird类去实现IFly接口class Bird implements IFly&#123;    function fly()    &#123;        echo &quot;bird can fly&quot;;    &#125;    function fly2()    &#123;        echo &quot;bird fly2&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;test&lt;?php    include &quot;global.php&quot;;    var_dump(IFly::NAME);&#x2F;*D:\wamp64\www\php_class\php_interface\test.php:4:string &#39;IFLY&#39; (length&#x3D;4)*&#x2F;    $bird &#x3D; new Bird();echo $bird::NAME;&#x2F;&#x2F;IFLYvar_dump(Bird::NAME);&#x2F;*D:\wamp64\www\php_class\php_interface\test.php:12:string &#39;IFLY&#39; (length&#x3D;4)*&#x2F;$bird-&gt;fly();&#x2F;&#x2F;bird can fly&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现多个接口"><a href="#实现多个接口" class="headerlink" title="实现多个接口"></a>实现多个接口</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;添加一个接口，接口中包含transport方法interface ITransport&#123;    function transport();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;用Plane类去实现IFly接口与ITransport接口class Plane implements Ifly,ITransport&#123;    function fly()&#123;        echo &quot;plane can fly&quot;;    &#125;    function transport()&#123;        echo &quot;plane can transport&quot;;    &#125;    function fly2()    &#123;        &#x2F;&#x2F; TODO: Implement fly2() method.    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;test&lt;?php    include &quot;global.php&quot;;    $plane &#x3D; new Plane();    $plane-&gt;fly();&#x2F;&#x2F;plane can fly    $plane-&gt;transport();&#x2F;&#x2F;plane can transport<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;创建IRead接口interface IRead&#123;    function read();    function readAndWrite();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;创建IWrite接口interface IWrite&#123;    function write();    function readAndWrite();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个接口可以继承于多个接口</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;创建IReadWrite接口去继承IRead接口和IWrite接口interface IReadWrite extends IRead,IWrite&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;test&lt;?php    include &quot;global.php&quot;;    &#x2F;&#x2F;验证方法是否存在与接口对象中  var_dump(method_exists(&quot;IReadWrite&quot;,&quot;read&quot;));&#x2F;&#x2F;true    var_dump(method_exists(&quot;IReadWrite&quot;,&quot;write&quot;));&#x2F;&#x2F;true    var_dump(method_exists(&quot;IReadWrite&quot;,&quot;readAndWrite&quot;));&#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;创建一个学生类去实现IReadWrite接口class Student implements IReadWrite&#123;   function read()    &#123;        echo &quot;student read&quot;;    &#125;    function readAndWrite()    &#123;        echo &quot;student read and write&quot;;    &#125;    function write()    &#123;        echo &quot;student write&quot;;    &#125;&#x2F;&#x2F;  报错，php没有办法重载函数&#x2F;&#x2F;    function write($name)&#123;&#x2F;&#x2F;&#x2F;&#x2F;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;test&lt;?php    include &quot;global.php&quot;;    $student &#x3D; new Student();    $student-&gt;read();&#x2F;&#x2F;student read    $student-&gt;write();&#x2F;&#x2F;student write    $student-&gt;readAndWrite();&#x2F;&#x2F;student read and write<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在IWrite与IRead接口中，各有两个方法，其中readAndWrite方法同名，在Student类中只能选择一个进行实现，这是因为<strong>PHP中无法进行函数的重载</strong></p><h4 id="继承类并实现接口"><a href="#继承类并实现接口" class="headerlink" title="继承类并实现接口"></a>继承类并实现接口</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;创建一个Animal类作为父类class Animal&#123;    function run()&#123;        echo &quot;Animal can run&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;在Student类中继承Animal类并且实现IReadWrite接口class Student extends Animal implements IReadWrite&#123;    function read()    &#123;        echo &quot;student read&quot;;    &#125;    function readAndWrite()    &#123;        echo &quot;student read and write&quot;;    &#125;    function write()    &#123;        echo &quot;student write&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;test&lt;?php    include &quot;global.php&quot;;    $student &#x3D; new Student();    $student-&gt;read();&#x2F;&#x2F;student read    $student-&gt;write();&#x2F;&#x2F;student write    $student-&gt;readAndWrite();&#x2F;&#x2F;student read and write    $student-&gt;run();&#x2F;&#x2F;Animal can run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>可以把抽象类理解为把类当作对象，抽象称的类叫做抽象类</p><p>抽象类是不能被实例化的类，只能作为由其他类继承的基类</p><p>声明抽象类时必须在定义前面加上abstract关键字</p><p>抽象类之间也可以继承，但是实际项目中比较少用</p><p>抽象类中的抽象方法都必须在子类中被实现</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;建立一个图形抽象类作为基类abstract class Shape&#123;    &#x2F;&#x2F;在基类中定义一个抽象方法draw()    abstract function draw();    &#x2F;&#x2F;抽象类中可以包括已经实现的方法    function usePen()&#123;        echo &quot;draw need pen&quot;;    &#125;&#125;&#x2F;&#x2F;建立一个圆形类，继承自图形类class Circle extends Shape&#123;&#x2F;&#x2F;在圆形类中重写父类中的draw方法    function draw()    &#123;        echo &quot;I am a circle&quot;;    &#125;&#125;&#x2F;&#x2F;建立一个正方形类，同样继承自图形类class Square extends Shape&#123;&#x2F;&#x2F;在正方形类中重写父类中的draw方法    function draw()    &#123;        echo &quot;I am a square&quot;;    &#125;&#125;&#x2F;&#x2F;创建一个用于调用draw()的函数function draw($obj)&#123;    $obj-&gt;draw();&#125;&#x2F;&#x2F;使用不同的对象去调用同一个方法draw(new Circle());&#x2F;&#x2F;I am a circledraw(new Square());&#x2F;&#x2F;I am a square&#x2F;&#x2F;创建一个用于调用usePen()的函数function usePen($obj)&#123;    $obj-&gt;usePen();&#125;&#x2F;&#x2F;使用不同的对象去调用同一个方法usePen(new Circle());&#x2F;&#x2F;draw need penusePen(new Square());&#x2F;&#x2F;draw need pen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpabstract class Shape&#123;    abstract function getArea();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpclass Square extends Shape&#123;    &#x2F;&#x2F;定义正方形长宽    private $width;    private $height;    &#x2F;**     * Square constructor.     * @param $width     * @param $height     *&#x2F;    &#x2F;&#x2F;构造方法    public function __construct($width, $height)    &#123;        $this-&gt;width &#x3D; $width;        $this-&gt;height &#x3D; $height;    &#125;&#x2F;&#x2F;计算面积    function getArea()    &#123;        return $this-&gt;width * $this-&gt;height;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;global.php&quot;;&#x2F;&#x2F;实例化对象，同时调用方法echo ((new Square(3,4))-&gt;getArea());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="抽象类和接口的异同点"><a href="#抽象类和接口的异同点" class="headerlink" title="抽象类和接口的异同点"></a>抽象类和接口的异同点</h4><p><strong>相同点：</strong></p><ol><li>都<strong>不能实例化</strong></li><li>都<strong>包含未实现的方法声明</strong></li><li>抽象类的派生类和接口的实现类<strong>都必须实现未实现的方法</strong>，抽象类是抽象方法，接口则是所有成员（不仅是方法，还包括其他成员）。</li></ol><p><strong>不同点：</strong></p><ol><li>类是对对象的抽象，接口只是一个行为的规范或规定</li><li>接口基本上不具备继承的人和特点，它仅仅承诺了能够调用的方法</li><li>一个类一次能实现(implements)多个接口，但是只能扩展(extends)一个父类</li><li>抽象类实现了OOP中的一个原则，把可变的与不可变的分离。抽象类和接口就是定义为不可变的，而把可变的作为子类去实现</li></ol><h4 id="抽象类和接口的使用时机"><a href="#抽象类和接口的使用时机" class="headerlink" title="抽象类和接口的使用时机"></a>抽象类和接口的使用时机</h4><ol><li>抽象类主要用于关系密切的对象；而接口适合为不相关的类提供通用功能</li><li>如果必须从多个来源继承行为，就是用接口。PHP类可以实现(implements)多个接口，但不能扩展(extends)多个抽象类</li><li>如果知道所有的类都会共享一个公共的行为实现，就使用抽象类，并在其中实现该行为。在接口中无法实现行为。</li></ol><h3 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h3><p>多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。</p><p>不同的对象，收到同一消息将可以产生不同的结果，这种现象称为多态性。</p><p>”一个对外接口，多个内部实现方法。“</p><p>其三大特征：</p><ul><li>子类继承父类</li><li>子类重写父类</li><li>父类指向子类</li></ul><p>多态实现的前提：</p><p>必须是类与类之间要有关系，即继承|实现|存在重写</p><p>（其实就是抽象函数或者接口）</p><h4 id="通过继承普通类实现多态"><a href="#通过继承普通类实现多态" class="headerlink" title="通过继承普通类实现多态"></a>通过继承普通类实现多态</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;建立一个图形类，作为基类class Shape&#123;&#x2F;&#x2F;在类中添加一个draw的方法    function draw()&#123;        echo &quot;I am a base class&quot;;    &#125;&#125;&#x2F;&#x2F;建立一个圆形类，继承自图形类class Circle extends Shape&#123;&#x2F;&#x2F;在圆形类中重写父类中的draw方法    function draw()    &#123;        echo &quot;I am a circle&quot;;    &#125;&#125;&#x2F;&#x2F;建立一个正方形类，同样继承自图形类class Square extends Shape&#123;&#x2F;&#x2F;在正方形类中重写父类中的draw方法    function draw()    &#123;        echo &quot;I am a square&quot;;    &#125;&#125;&#x2F;&#x2F;创建一个用于调用draw()的函数function draw($obj)&#123;    $obj-&gt;draw();&#125;&#x2F;&#x2F;使用不同的对象去调用同一个方法draw(new Shape());&#x2F;&#x2F;I am a shapedraw(new Circle());&#x2F;&#x2F;I am a circledraw(new Square());&#x2F;&#x2F;I am a square<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过子类继承父类，在子类中重写了父类的方法，再用三个对象去调用同一个方法，输出了不同的内容，实现了多态。</p><h4 id="通过继承抽象类实现多态"><a href="#通过继承抽象类实现多态" class="headerlink" title="通过继承抽象类实现多态"></a>通过继承抽象类实现多态</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;建立一个图形抽象类作为基类abstract class Shape&#123;    &#x2F;&#x2F;在基类中定义一个抽象方法draw()    abstract function draw();&#125;&#x2F;&#x2F;建立一个圆形类，继承自图形类class Circle extends Shape&#123;&#x2F;&#x2F;在圆形类中重写父类中的draw方法    function draw()    &#123;        echo &quot;I am a circle&quot;;    &#125;&#125;&#x2F;&#x2F;建立一个正方形类，同样继承自图形类class Square extends Shape&#123;&#x2F;&#x2F;在正方形类中重写父类中的draw方法    function draw()    &#123;        echo &quot;I am a square&quot;;    &#125;&#125;&#x2F;&#x2F;创建一个用于调用draw()的函数function draw($obj)&#123;    $obj-&gt;draw();&#125;&#x2F;&#x2F;使用不同的对象去调用同一个方法draw(new Circle());&#x2F;&#x2F;I am a circledraw(new Square());&#x2F;&#x2F;I am a square<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承抽象类实现多态的方法与继承普通类实现多态的方法大致相同，差别于定义的抽象类只能作为基类给子类继承，抽象类中的抽象方法无法在抽象类中实现。并且，抽象类无法进行实例化。</p><h4 id="通过接口实现多态"><a href="#通过接口实现多态" class="headerlink" title="通过接口实现多态"></a>通过接口实现多态</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;创建一个ISwim接口，内部包含一个未被实现的swim()interface ISwim&#123;    function swim();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;创建一个Person类，调用ISwim接口class Person implements ISwim&#123;&#x2F;&#x2F;实现ISwim接口中预定义的方法    function swim()    &#123;        echo &quot;Person can swim&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;创建一个Fish类，调用ISwim接口class Fish implements ISwim&#123;&#x2F;&#x2F;实现ISwim接口中预定义的方法    function swim()    &#123;        echo &quot;Fish can swim&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;test&lt;?phpinclude &quot;global.php&quot;;function swim($obj)&#123;    $obj-&gt;swim();&#125;&#x2F;&#x2F;分别以不同的对象去调用swim方法swim(new Person());&#x2F;&#x2F;Person can swimswim(new Fish());&#x2F;&#x2F;Fish can swim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过类对接口的调用，并且实现接口里面预定义的方法，使不同的对象去调用同一个方法时有不同的输出，实现了多态。</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>PHP 命名空间可以解决以下两类问题：</p><ol><li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li><li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</li></ol><h4 id="全局命名空间"><a href="#全局命名空间" class="headerlink" title="全局命名空间"></a>全局命名空间</h4><p>如果没有定义任何命名空间，所有的类与函数的定义都是在全局空间。</p><p>在PHP的命名空间默认为\，所有的函数和类都在\这个命名空间中</p><p>如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径</p><p>而如果写\function_name() 这样调用函数，则其实是写了一个绝对路径。如果在其他namespace里调用系统类，就必须写绝对路径这种写法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;全局空间的使用&lt;?phpnamespace A\B\C;&#x2F;* 这个函数是 A\B\C\fopen() *&#x2F;function fopen() &#123; $f &#x3D; \fopen(...); &#x2F;&#x2F; 调用全局的fopen函数return $f;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h4><h5 id="声明单个命名空间"><a href="#声明单个命名空间" class="headerlink" title="声明单个命名空间"></a>声明单个命名空间</h5><p>虽然任意合法的PHP代码都可以包含在命名空间中，但只有以下类型的代码受命名空间的影响</p><p>如：类（包括抽象类和trait）、接口、函数和常量。</p><p>命名空间通过关键字namespace来声明，如果一个文件中包含命名空间、他必须在其他所有代码之前声明空间、除了declare关键字以外。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    &#x2F;&#x2F;declare(encoding&#x3D;&#39;UTF-8&#39;);    namespace common;const PI&#x3D;3.1415926;function showMsg($msg)&#123;    echo &quot;&lt;script&gt;alert(&#39;$msg&#39;)&lt;&#x2F;script&gt;&quot;;&#125;&#x2F;&#x2F;重写系统函数时需要加上命名空间，否则会报错&#x2F;&#x2F;不推荐重写系统函数function pow()&#123;    pow();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;global.php&quot;;include &quot;common.php&quot;;&#x2F;&#x2F;命名空间内函数和常量的调用common\showMsg(&#39;使用alert弹出信息&#39;);var_dump(\common\PI);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="声明多个命名空间"><a href="#声明多个命名空间" class="headerlink" title="声明多个命名空间"></a>声明多个命名空间</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php  namespace MyProject;const CONNECT_OK &#x3D; 1;class Connection &#123; &#x2F;* ... *&#x2F; &#125;function connect() &#123; &#x2F;* ... *&#x2F;  &#125;namespace AnotherProject;const CONNECT_OK &#x3D; 1;class Connection &#123; &#x2F;* ... *&#x2F; &#125;function connect() &#123; &#x2F;* ... *&#x2F;  &#125;?&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过声明多个命名空间的时候，不建议使用上述方法，建议使用大括号形式的语法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace MyProject &#123;    const CONNECT_OK &#x3D; 1;    class Connection &#123; &#x2F;* ... *&#x2F; &#125;    function connect() &#123; &#x2F;* ... *&#x2F;  &#125;&#125;namespace AnotherProject &#123;    const CONNECT_OK &#x3D; 1;    class Connection &#123; &#x2F;* ... *&#x2F; &#125;    function connect() &#123; &#x2F;* ... *&#x2F;  &#125;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当全局的非命名空间中的代码要与命名空间中的代码组合在一起，只能使用大括号形式的语法。全局代码必须使用一个不带名称的namespace语句加上大括号括起来</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpnamespace MyProject &#123;&#x2F;&#x2F; 命名空间中的代码const CONNECT_OK &#x3D; 1;class Connection &#123; &#x2F;* ... *&#x2F; &#125;function connect() &#123; &#x2F;* ... *&#x2F;  &#125;&#125;namespace &#123; &#x2F;&#x2F; 全局代码session_start();$a &#x3D; MyProject\connect();echo MyProject\Connection::start();&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="定义子命名空间"><a href="#定义子命名空间" class="headerlink" title="定义子命名空间"></a>定义子命名空间</h5><p>与目录和文件的关系很象，PHP 命名空间也允许指定层次化的命名空间的名称。因此，命名空间的名字可以使用分层次的方式定义</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;在phpClass\php_interface的目录下的Student类&#x2F;&#x2F;类似文件夹路径&lt;?phpnamespace phpClass\php_interface;class Student&#123;    private $name;    private $id;    &#x2F;**     * Student constructor.     * @param $name     * @param $id     *&#x2F;    public function __construct($name, $id)    &#123;        $this-&gt;name &#x3D; $name;        $this-&gt;id &#x3D; $id;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;在phpClass目录下的student类&lt;?phpnamespace phpClass;class student&#123;    private $no;    private $name;    private $gender;    private $age;    &#x2F;**     * student constructor.     * @param $no     * @param $name     * @param $gender     * @param $age     *&#x2F;    public function __construct($no, $name, $gender, $age)    &#123;        $this-&gt;no &#x3D; $no;        $this-&gt;name &#x3D; $name;        $this-&gt;gender &#x3D; $gender;        $this-&gt;age &#x3D; $age;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;test，用命名空间去调用student类&lt;?phpinclude &quot;global.php&quot;;var_dump(new phpclass\php_interface\student(12,&quot;wwh&quot;));var_dump(new phpclass\Student(13,&quot;wwh&quot;,&quot;man&quot;,18));&#x2F;*D:\wamp64\www\namespace.php:3:object(phpClass\php_interface\Student)[3]  private &#39;name&#39; &#x3D;&gt; int 12  private &#39;id&#39; &#x3D;&gt; string &#39;wwh&#39; (length&#x3D;3)D:\wamp64\www\namespace.php:4:object(phpClass\student)[3]  private &#39;no&#39; &#x3D;&gt; int 13  private &#39;name&#39; &#x3D;&gt; string &#39;wwh&#39; (length&#x3D;3)  private &#39;gender&#39; &#x3D;&gt; string &#39;man&#39; (length&#x3D;3)  private &#39;age&#39; &#x3D;&gt; int 18*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用命名空间"><a href="#使用命名空间" class="headerlink" title="使用命名空间"></a><strong>使用命名空间</strong></h4><h5 id="非限定名称"><a href="#非限定名称" class="headerlink" title="非限定名称"></a>非限定名称</h5><p>或称为不包含前缀的类名称</p><p>如果命名空间中的函数或常量未定义，则该非限定的函数名称或常量名称会被解析为全局函数名称或常量名称。</p><p>如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，则 foo 会被解析为foo。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$a&#x3D;new foo();&#x2F;&#x2F;等价于foo::staticmethod()&#x2F;&#x2F;若当前命名空间为currentnamespace&#x2F;&#x2F;foo 将被解析为 currentnamespace\foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="限定名称"><a href="#限定名称" class="headerlink" title="限定名称"></a>限定名称</h5><p>或包含前缀的名称</p><p>如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，foo 会被解析为subnamespace\foo。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$a &#x3D; new subnamespace\foo();&#x2F;&#x2F;等价于subnamespace\foo::staticmethod();&#x2F;&#x2F;若当前命名空间为currentnamespace&#x2F;&#x2F;foo 会被解析为 currentnamespace\subnamespace\foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="完全限定名称"><a href="#完全限定名称" class="headerlink" title="完全限定名称"></a>完全限定名称</h5><p>或包含了全局前缀操作符的名称</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$a &#x3D; new \currentnamespace\foo();&#x2F;&#x2F;等价于\currentnamespace\foo::staticmethod();&#x2F;&#x2F;foo 总是被解析为代码中的文字名(literal name)currentnamespace\foo。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="别名-导入"><a href="#别名-导入" class="headerlink" title="别名/导入"></a>别名/导入</h5><p>PHP中有两种使用别名或导入方式：</p><ol><li>为类名称使用别名</li><li>为命名空间名称使用别名</li></ol><p>别名是通过操作符use来实现的</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;global.php&quot;;include &quot;common.php&quot;;&#x2F;&#x2F;用use定义别名use phpclass\php_interface\Student as pps;use phpclass\php_interface as pp;use phpclass as p;&#x2F;&#x2F;常规方法var_dump(new phpclass\php_interface\Student(&quot;wwh&quot;,12));var_dump(new phpclass\Student(13,&quot;wwh&quot;,&quot;man&quot;,18));&#x2F;&#x2F;别名引入方法var_dump(new pps(&quot;wwh&quot;,13));var_dump(new pp\Student(&quot;zhangsan&quot;,15));var_dump(new p\student(17,&quot;lisi&quot;,&quot;woman&quot;,20));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="错误和异常处理"><a href="#错误和异常处理" class="headerlink" title="错误和异常处理"></a>错误和异常处理</h2><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h4 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h4><h5 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h5><p>最常见，最容易修复。（遗漏了一个分号之类的）。</p><p>该类错误会阻止脚本执行。</p><h5 id="运行时错误"><a href="#运行时错误" class="headerlink" title="运行时错误"></a>运行时错误</h5><p>运行时错误出现时不会阻止PHP脚本运行，但会阻止脚本做希望它所做的任何事情。</p><p>比如除数为零的错误，它没法计算出结果，但是PHP会显示一条消息来指示准确的问题。</p><h5 id="逻辑错误"><a href="#逻辑错误" class="headerlink" title="逻辑错误"></a>逻辑错误</h5><p>PHP不会报告逻辑错误，他们不明显，不会阻止PHP脚本的运行，最难处理。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--做加法运算的表单--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        +        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>求和<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;处理页面$input1 &#x3D; $_GET[&#39;input1&#39;];$input2 &#x3D; $_GET[&#39;input2&#39;];&#x2F;&#x2F;本要做加法，在处理页面写成减法$result &#x3D; (int)$input1 - (int)$input2;echo $result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上情况能运行，不报错，但是结果不对，原因是编写处理页面时出错，这就是逻辑错误</p><h4 id="错误显示"><a href="#错误显示" class="headerlink" title="错误显示"></a>错误显示</h4><p>方法一：</p><p>在PHP配置文件php.ini中，查找到display_errors</p><p>display_errors = On/Off</p><p>当display_errors的值为Off，出现错误时，网页不会报错，会直接显示网页无法正常运作，但是通常我们将该值设置为On</p><p>方法二：</p><p>我们可以在php文件中直接设置display_errors的值</p><p>默认值为1， 该选项设置是否将错误信息作为输出的一部分显示到屏幕，或者对用户隐藏而不显示</p><p>值为0时，显示网页无法正常运作</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpini_set(&quot;display_errors&quot;,0);$input1 &#x3D; $_GET[&#39;input1&#39;];$input2 &#x3D; $_GET[&#39;input2&#39;];$result &#x3D; (int)$input1 + (int)$input2;echo $result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="错误报告"><a href="#错误报告" class="headerlink" title="错误报告"></a>错误报告</h4><h5 id="错误报告的级别"><a href="#错误报告的级别" class="headerlink" title="错误报告的级别"></a>错误报告的级别</h5><p>PHP Manual›函数参考›影响 PHP 行为的扩展››错误处理和日志记录›预定义常量</p><p>主要是以下三类：</p><ol><li><p>注意（notice）：这不会阻止脚本的执行，并且可能不一定是一个问题</p></li><li><p>警告（warming）：这指示一个问题，但是不会阻止脚本的执行</p></li><li><p>错误（error）：这会阻止脚本继续执行（包括常见的解析错误，它从根本上阻止脚本运行）</p><p>相关设置：可以通过代码和php.ini配置进行调整</p><p>error_reporting(0); </p><p>设置为0会完全关闭错误报告（错误仍会发生，只是你不再会看到它们）</p><p>error_reporting (E_ALL &amp; ~E_NOTICE);</p><p>任何非通知类的错误</p><p>error_reporting(E_ALL | E_STRICT);</p><p>由于E_ALL不包含E_STRICT，所以又加上了“E_STRICT”</p></li></ol><h5 id="错误报告的调整"><a href="#错误报告的调整" class="headerlink" title="错误报告的调整"></a>错误报告的调整</h5><p>可以使用trigger_error()函数创建用户自定义的错误消息</p><p>该函数用于在用户指定的条件下触发一个错误信息。它可以与内建的错误处理程序一起使用，或者与由 set_error_handler() 函数设置的用户自定义函数一起使用。</p><p>语法：</p><p>trigger_error(error_message,error_types)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>error_message</td><td>必需。规定错误消息。长度限制为 1024 个字符。</td></tr><tr><td>error_types</td><td>可选。规定错误消息的错误类型。</td></tr></tbody></table><p>error_types可能的错误类型：</p><ul><li>E_USER_ERROR - 用户生成的运行时的致命错误。不能恢复的错误。停止执行脚本。</li><li>E_USER_WARNING - 用户生成的运行时的非致命警告。脚本没有停止执行。</li><li>E_USER_NOTICE - 默认。用户生成的运行时的通知。脚本发现可能是一个错误，但也可能在脚本正常运行时发生。</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;定义一个学生类class Student&#123;    private $age;    public function getAge()    &#123;        return $this-&gt;age;    &#125;    public function setAge($age)    &#123;        if($age &lt; 0 ||$age &gt; 120)&#123;&#x2F;&#x2F;用trigger_error()自定义错误信息以及错误种类            trigger_error(&quot;年龄输入不合理&quot;,E_USER_ERROR);        &#125;else&#123;            $this-&gt;age &#x3D; $age;        &#125;    &#125;&#125;$zhangsan &#x3D; new Student();&#x2F;&#x2F;输入的年龄为125，触发错误$zhangsan-&gt;setAge(125);var_dump($zhangsan);&#x2F;*Fatal error: 年龄输入不合理 in D:\wamp64\www\phpError\Student.php on line 17*&#x2F;&#x2F;*当值为默认，即E_USER_NOTICE时运行结果为Notice: 年龄输入不合理 in D:\wamp64\www\phpError\Student.php on line 17D:\wamp64\www\phpError\Student.php:25:object(Student)[1]  private &#39;age&#39; &#x3D;&gt; null*&#x2F;&#x2F;*当值为E_USER_WARNING，时运行结果为Warning: 年龄输入不合理 in D:\wamp64\www\phpError\Student.php on line 17D:\wamp64\www\phpError\Student.php:25:object(Student)[1]  private &#39;age&#39; &#x3D;&gt; null*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="错误抑制符"><a href="#错误抑制符" class="headerlink" title="错误抑制符"></a>错误抑制符</h4><p>在PHP中，可以使用@运算符来抑制单个错误。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;不显示包含一个不存在的文件的错误@(include &quot;Student1.php&quot;);&#x2F;&#x2F;不显示除0的错误$a&#x3D;1;$b&#x3D;0;echo @($a&#x2F;$b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：像函数调用或数学运算一样，@符号只能处理表达式。</p><h4 id="die和exit语法构造"><a href="#die和exit语法构造" class="headerlink" title="die和exit语法构造"></a>die和exit语法构造</h4><p>die()可以输出一个消息，并且退出当前脚本</p><p>语法：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>message</td><td>必需。</td></tr></tbody></table><p>当message是一个字符串，则在退出脚本时会打印该字符串。</p><p>当message是一个integer，则该值会被作为退出的状态码，不会被打印。</p><p>退出状态码的值应该在范围0~254之间，不应该使用被PHP保留的退出状态码255；状态码0用于成功中止程序。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php@(include &quot;Student1.php&quot;) or die(&quot;Student1.php文件不存在&quot;);echo &#39;1&#39;;&#x2F;&#x2F;结果：Student1.php文件不存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>die()是exit()的别名，作用相同</p><h4 id="自定义错误处理程序"><a href="#自定义错误处理程序" class="headerlink" title="自定义错误处理程序"></a>自定义错误处理程序</h4><p>创建一个自定义错误处理的php文件common</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;定义默认为线上环境define(&#39;LIVE&#39;,true);&#x2F;&#x2F;自定义错误处理的函数，这几个参数都是默认的function my_error_handler ($e_number, $e_message, $e_file, $e_line, $e_vars)&#123;    &#x2F;&#x2F;当是线上环境时发生的错误    if(LIVE)&#123;        echo &#39;&lt;div&gt;系统错误，请联系管理员&lt;&#x2F;div&gt;&#39;;    &#125;else&#123;        echo &quot;在文件&#123;$e_file&#125;中发生了错误，错误为&#123;$e_message&#125;&quot;;    &#125;&#125;&#x2F;&#x2F;自定义错误处理函数注册set_error_handler(&#39;my_error_handler&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;包含自定义错误处理文件include &quot;common.php&quot;;&#x2F;&#x2F;包含一个不存在的文件include &quot;sss.php&quot;;&#x2F;*系统错误，请联系管理员系统错误，请联系管理员*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当建立了自定义错误处理函数时，错误报告的级别与display_errors的设置都不再有意义，因为自定义错误处理函数会控制是否显示错误。</p><h4 id="记录PHP错误"><a href="#记录PHP错误" class="headerlink" title="记录PHP错误"></a>记录PHP错误</h4><p>以某种方式为PHP的错误建立起永久的记录。</p><p>首先要设置php.ini中log_errors = On，表示要记录日志</p><p>再找到error_log 配置error_log =”d:/wamp64/logs/php_error.log”，表示错误记录的位置</p><p>语法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">error_log (message, type, destination, extra headers);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">error</td><td align="left">必需。要记录的错误消息。</td></tr><tr><td align="left">type</td><td align="left">可选。规定错误记录的类型。 可能的记录类型：0 - 默认。根据在 php.ini 文件中的 error_log 配置，错误被发送到服务器日志系统或文件。1 - 错误被发送到 destination 参数中的地址。只有该类型使用 headers 参数。2 - 通过 PHP debugging 连接来发送错误。该选项只在 PHP 3 中可用。3 - 错误发送到文件目标字符串。</td></tr><tr><td align="left">destination</td><td align="left">可选。规定向何处发送错误消息。该参数的值依赖于 “type” 参数的值。</td></tr><tr><td align="left">headers</td><td align="left">可选。只在 “type” 参数为 1 时使用。规定附加的头部，比如 From, Cc 以及 Bcc。附加头部由 CRLF (\r\n) 分隔。<strong>注意：</strong>在发送电子邮件时，必须包含 From 头部。可以在 php.ini 文件中或者通过此参数设置。</td></tr></tbody></table><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="异常及基本使用"><a href="#异常及基本使用" class="headerlink" title="异常及基本使用"></a>异常及基本使用</h4><p>意料之外的事件称为异常</p><p>我们可以通过throw 一个 Exception对象来处理异常</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpclass Student&#123;    private $age;    public function getAge()    &#123;        return $this-&gt;age;    &#125;    public function setAge($age)    &#123;        if($age &lt; 0 ||$age &gt; 120)&#123;&#x2F;&#x2F;          trigger_error(&quot;年龄输入不合理&quot;,E_USER_ERROR);            throw new Exception(&quot;年龄输入不合理&quot;);        &#125;else&#123;            $this-&gt;age &#x3D; $age;        &#125;    &#125;&#125;$zhangsan &#x3D; new Student();$zhangsan-&gt;setAge(125);var_dump($zhangsan);&#x2F;* Fatal error: Uncaught Exception: 年龄输入不合理 in D:\wamp64\www\phpError\Student.php on line 18  Exception: 年龄输入不合理 in D:\wamp64\www\phpError\Student.php on line 18*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="try、-throw-、catch以及finally"><a href="#try、-throw-、catch以及finally" class="headerlink" title="try、 throw 、catch以及finally"></a><strong>try、 throw 、catch以及finally</strong></h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpclass Student&#123;    private $age;    public function getAge()    &#123;        return $this-&gt;age;    &#125;    public function setAge($age)    &#123;        if($age &lt; 0 ||$age &gt; 120)&#123;            throw new Exception(&quot;年龄输入不合理&quot;);        &#125;else&#123;            $this-&gt;age &#x3D; $age;        &#125;    &#125;&#125;$zhangsan &#x3D; new Student();try &#123;&#x2F;&#x2F;把可能出现异常的语句用try&#123;&#125;包裹起来    $zhangsan-&gt;setAge(125);&#125;catch (Exception $e)&#123;&#x2F;&#x2F;捕获异常对象，并且用getMessage()输出    echo &quot;Message:&quot;.$e-&gt;getMessage().&quot;&lt;br&gt;&quot;;&#125; finally &#123;    &#x2F;&#x2F;在所有catch语句结束后会执行finally里的语句    &#x2F;&#x2F;尽管出现异常，finally里面的代码也一定会执行    echo &quot;执行完成&quot;.&quot;&lt;br&gt;&quot;;&#125;&#x2F;&#x2F;输出异常后的语句echo &quot;1&quot;;var_dump($zhangsan);&#x2F;*Message:年龄输入不合理执行完成1D:\wamp64\www\phpError\Student.php:35:object(Student)[1]  private &#39;age&#39; &#x3D;&gt; null*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以通过这种方式使异常信息很容易地被人理解，并且抛出异常后不会因为此异常而终止脚本的运行</p><h4 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h4><p>Exception是所有异常类的基类，想要自定义异常类，都需要继承Exception类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpclass CustomException extends Exception&#123;    function getError()&#123;        echo &quot;Message:&#123;$this-&gt;getMessage()&#125;,File:&#123;$this-&gt;getFile()&#125;,Line:&#123;$this-&gt;getLine()&#125;&quot;;    &#125;&#125;throw new CustomException();&#x2F;&#x2F;未调用自定义异常方法时的输出&#x2F;*Fatal error: Uncaught CustomException: Error:can not be negative in D:\wamp64\www\phpError\CustomException.php on line 12 CustomException: Error:can not be negative in D:\wamp64\www\phpError\CustomException.php on line 12*&#x2F;try &#123;    throw new CustomException(&quot;Error:can not be negative&quot;);&#125;catch (CustomException $e)&#123;    echo $e-&gt;getError();&#125;&#x2F;&#x2F;调用自定义异常方法时的输出&#x2F;&#x2F;Message:Error:can not be negative,File:D:\wamp64\www\phpError\CustomException.php,Line:12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="处理多个异常"><a href="#处理多个异常" class="headerlink" title="处理多个异常"></a>处理多个异常</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpclass CustomException extends Exception&#123;    function getError()&#123;        echo &quot;Message:&#123;$this-&gt;getMessage()&#125;,File:&#123;$this-&gt;getFile()&#125;,Line:&#123;$this-&gt;getLine()&#125;&quot;;    &#125;&#125;$a&#x3D;1;try &#123;    &#x2F;&#x2F;根据a的情况的不同抛出不同的异常对象    if ($a&lt;0)&#123;        throw new CustomException(&quot;can not be negative&quot;);    &#125;else&#123;        throw new Exception(&quot;$a&quot;);    &#125;&#125; catch (CustomException $e)&#123;    echo $e-&gt;getError();&#125; catch (Exception $e)&#123;    echo $e-&gt;getMessage();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：Exception异常应该放在CustomException异常下面（包括范围越大的放越下面）</p><h4 id="顶层异常处理器"><a href="#顶层异常处理器" class="headerlink" title="顶层异常处理器"></a>顶层异常处理器</h4><p>set_exception_handler()</p><p>所有未被捕获到的异常都可以用这个方法进行统一处理</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;CustomException.phpclass CustomException extends Exception&#123;    function getError()&#123;        echo &quot;Message:&#123;$this-&gt;getMessage()&#125;,File:&#123;$this-&gt;getFile()&#125;,Line:&#123;$this-&gt;getLine()&#125;&quot;;    &#125;&#125;$a&#x3D;1;try &#123;    &#x2F;&#x2F;根据a的情况的不同抛出不同的异常对象    if ($a&lt;0)&#123;        throw new CustomException(&quot;can not be negative&quot;);    &#125;else&#123;        throw new Exception(&quot;$a&quot;);    &#125;&#125; catch (CustomException $e)&#123;    echo $e-&gt;getError();&#125; catch (Exception $e)&#123;    echo $e-&gt;getMessage();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;common.phpfunction my_exception_handler(Exception $e)&#123;    echo &quot;Message:&#123;$e-&gt;getMessage()&#125;&quot;;&#125;set_exception_handler(&quot;my_exception_handler&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">include &quot;common.php&quot;;include &quot;CustomException.php&quot;;&#x2F;&#x2F;抛出一个未在CustomException类中catch到的异常throw new CustomException(&quot;发生异常&quot;);&#x2F;&#x2F;1Message:发生异常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异常的规则"><a href="#异常的规则" class="headerlink" title="异常的规则"></a>异常的规则</h4><ul><li>需要进行异常处理的代码应该放入 try 代码块内，以便捕获潜在的异常。</li><li>每个 try 或 throw 代码块必须至少拥有一个对应的 catch 代码块。</li><li>使用多个 catch 代码块可以捕获不同种类的异常。</li></ul><h2 id="PHP-amp-MySQL"><a href="#PHP-amp-MySQL" class="headerlink" title="PHP&amp;MySQL"></a>PHP&amp;MySQL</h2><h3 id="mysql与mysqli"><a href="#mysql与mysqli" class="headerlink" title="mysql与mysqli"></a>mysql与mysqli</h3><h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4><ul><li>在php5版本之前，一般是用php的mysql函数去驱动mysql数据库的，比如mysql_query()的函数，属于面向过程</li><li>在php5版本之后，增加了mysqli的函数功能，该功能在某种意义上是mysql系统函数的增强版，更稳定更高效更安全。与mysql_query()对应的有mysqli_query()，属于面向对象，用对象的方式操作驱动mysql数据库</li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>mysql是<strong>非持续连接</strong>函数，mysql<strong>每次链接都会打开一个连接的进程</strong></li><li>mysqli是<strong>永远连接</strong>函数，mysqli多次运行mysqli将<strong>使用同一连接进程</strong>,从而减少了服务器的开销。mysqli封装了诸如事务等一些高级操作，同时封装了DB操作过程中的很多可用的方法</li><li>使用mysqli有面向过程和面向对象两种方式</li></ul><p>mysqli提供了三个类：</p><ol><li>mysqli 连接相关的</li><li>mysqli_result 处理结果集</li><li>mysqli_stmt 预处理类</li></ol><h4 id="新特性与优势"><a href="#新特性与优势" class="headerlink" title="新特性与优势"></a>新特性与优势</h4><ul><li>mysqli支持本地绑定、准备（prepare）等语法</li><li>执行sql语句的错误代码</li><li>能同时执行多个sql</li><li>提供了面向对象的调用接口的方法</li></ul><h4 id="mysqli的使用"><a href="#mysqli的使用" class="headerlink" title="mysqli的使用"></a>mysqli的使用</h4><p><strong>启用mysqli：</strong></p><p>extension = php_mysqli;</p><p><strong>我们可以在单独的文件中存储与数据库连接的信息：</strong></p><p>将mysqli构造函数存储在名为connect.php文件中</p><p>mysqli对象的参数从左到右分别为：</p><p>host：主机名或IP地址</p><p>username：用户名</p><p>password：密码</p><p>dbname：数据库名</p><p>port：端口</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;用面向对象方式建立连接$mysqli &#x3D; new mysqli(&#39;localhost&#39;,&#39;root&#39;,&#39;123456&#39;,&#39;php&#39;,3306);&#x2F;&#x2F;或者&#x2F;*$mysqli &#x3D; new mysqli();$mysqli -&gt; connect(&#39;localhost&#39;,&#39;root&#39;,&#39;123456&#39;,&#39;php&#39;,3306);*&#x2F;&#x2F;&#x2F;可以增加选择数据库$mysqli -&gt; select_db(&quot;atm_db&quot;);&#x2F;&#x2F;检查数据库连接是否成功if ($mysqli-&gt;connect_errno)&#123;    &#x2F;&#x2F;当连接出错，返回错误信息并且退出脚本    die(&#39;连接出错:&#39;.$mysqli-&gt;connect_error);&#125;else&#123;    echo &#39;连接成功&#39;;&#125;&#x2F;&#x2F;设置字符集编码$mysqli-&gt;set_charset(&quot;utf8&quot;);&#x2F;&#x2F;或&#x2F;&#x2F;$mysqli -&gt;query(&quot;set names &#39;utf8&quot;);&#x2F;&#x2F;关闭连接$mysqli -&gt; close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们要在其他文件中使用数据库连接，只需要require该文件即可</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phprequire_once &quot;connect.php&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数据的CRUD"><a href="#数据的CRUD" class="headerlink" title="数据的CRUD"></a>数据的CRUD</h3><p>执行sql语句都可用query(sql)，执行失败会返回false，select成功则返回结果集对象，其他返回true，只要不是false就说明sql语句执行成功了。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;导入数据库连接文件require_once &quot;connect.php&quot;;&#x2F;&#x2F;执行sql语句，并将结果存入result$result &#x3D; $mysqli-&gt;query(&#39;select id,name,gender,age from t_student&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据输出"><a href="#数据输出" class="headerlink" title="数据输出"></a>数据输出</h4><p><strong>取出结果的四种方法：</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;以表格的形式输出echo &quot;&lt;table border&#x3D;&#39;1&#39; cellpadding&#x3D;&#39;0&#39;&gt;&quot;;echo &quot;&lt;tr&gt;&quot;;echo &quot;&lt;th&gt;id&lt;&#x2F;th&gt;&lt;th&gt;name&lt;&#x2F;th&gt;&lt;th&gt;gender&lt;&#x2F;th&gt;&lt;th&gt;age&lt;&#x2F;th&gt;&quot;;echo &quot;&lt;&#x2F;tr&gt;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1.fetch_object()</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;以对象方式while ($row &#x3D; $result-&gt;fetch_object()) &#123;    echo &quot;&lt;tr&gt;&quot;;    echo &quot;&lt;td&gt;&#123;$row -&gt; id&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row -&gt; name&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row -&gt; gender&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row -&gt; age&#125;&lt;&#x2F;td&gt;&quot;;    echo &quot;&lt;&#x2F;tr&gt;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.fetch_row()</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;以索引数组的方式while ($row &#x3D; $result-&gt;fetch_row())&#123;    echo &quot;&lt;tr&gt;&quot;;    echo &quot;&lt;td&gt;&#123;$row[0]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[1]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[2]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[3]&#125;&lt;&#x2F;td&gt;&quot;;    echo &quot;&lt;&#x2F;tr&gt;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.fetch_assoc()</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;以关联数组的方式while ($row &#x3D; $result-&gt;fetch_assoc())&#123;    echo &quot;&lt;tr&gt;&quot;;    echo &quot;&lt;td&gt;&#123;$row[&quot;id&quot;]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[&quot;name&quot;]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[&quot;gender&quot;]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[&quot;age&quot;]&#125;&lt;&#x2F;td&gt;&quot;;    echo &quot;&lt;&#x2F;tr&gt;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.fetch_array()</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;可以同时使用关联数组和索引数组的方式while ($row &#x3D; $result-&gt;fetch_array())&#123;    echo &quot;&lt;tr&gt;&quot;;    echo &quot;&lt;td&gt;&#123;$row[&quot;id&quot;]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[&quot;name&quot;]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[&quot;gender&quot;]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[&quot;age&quot;]&#125;&lt;&#x2F;td&gt;&quot;;    &#x2F;&#x2F;或    &#x2F;&#x2F;echo &quot;&lt;td&gt;&#123;$row[0]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[1]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[2]&#125;&lt;&#x2F;td&gt;&lt;td&gt;&#123;$row[3]&#125;&lt;&#x2F;td&gt;&quot;;    echo &quot;&lt;&#x2F;tr&gt;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用自定义函数动态构建表格</strong></p><p>由于想要呈现的数据不同，执行的SQL语句不同，我们每次都需要对静态页面进行修改，这十分麻烦</p><p>可以自定义一个函数来根据执行SQL语句后创建的结果来构建一个表格</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    &#x2F;&#x2F;获取SQL语句的处理结果作为函数的参数    function generateHtmlTable(mysqli_result $result)&#123;        &#x2F;&#x2F;获取结果所含的字段    $fields &#x3D; $result-&gt;fetch_fields();        echo &quot;&lt;table border&#x3D;&#39;1&#39; cellpadding&#x3D;&#39;0&#39;&gt;&quot;;        echo &quot;&lt;tr&gt;&quot;;    &#x2F;&#x2F;遍历字段，用其字段名作为表的标题        foreach ($fields as $field)&#123;            echo &quot;&lt;th&gt;&#123;$field-&gt;name&#125;&lt;&#x2F;th&gt;&quot;;        &#125;        echo &quot;&lt;&#x2F;tr&gt;&quot;;    &#x2F;&#x2F;取出结果        while ($row &#x3D; $result-&gt;fetch_assoc())&#123;            echo &quot;&lt;tr&gt;&quot;;            &#x2F;&#x2F;用将字段名作为参数去取结果中的值            foreach ($fields as $field)&#123;                echo &quot;&lt;th&gt;&#123;$row[$field-&gt;name]&#125;&lt;&#x2F;th&gt;&quot;;            &#125;            echo &quot;&lt;&#x2F;tr&gt;&quot;;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;调用函数&lt;?phprequire_once &quot;connect.php&quot;;require_once &quot;utils.php&quot;;&#x2F;&#x2F;执行sql语句，获得其值$result &#x3D; $mysqli-&gt;query(&#39;select id,name,gender,age from t_student&#39;);&#x2F;&#x2F;将上面的结果作为参数传入函数中generateHtmlTable($result);$mysqli-&gt;close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h4><p>使用前端页面获取数据</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//city_add.html<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city_add.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city_no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>城市编码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city_no<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city_no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--&lt;input type="text" name="city[city_no]" id="city_no">--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>城市名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city_name<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--&lt;input type="text" name="city[city_name]" id="city_name">--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>province_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>省/市名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>province_name<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>province_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--&lt;input type="text" name="city[province_name]" id="province_name">--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>新增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过表单提交数据，跳转到php数据处理页面（注释中是通过数组来获取表单数据的方式）</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&#x2F;&#x2F;city_add.php&lt;?phprequire_once &quot;connect.php&quot;;    $city_no &#x3D; $_POST[&#39;city_no&#39;];    $city_name &#x3D; $_POST[&#39;city_name&#39;];    $province_name &#x3D; $_POST[&#39;province_name&#39;];&#x2F;*    $city &#x3D; $_POST[&#39;city&#39;];*    var_dump($city);*    $city_no &#x3D; $city[&#39;city_no&#39;];*    $city_name &#x3D; $city[&#39;city_name&#39;];    $province_name &#x3D; $city[&#39;province_name&#39;];*&#x2F;    $sql &#x3D; &quot;insert into t_city_201841054092(city_no,city_name,province_name) value (&#39;$city_no&#39;,&#39;$city_name&#39;,&#39;$province_name&#39;)&quot;;    $result &#x3D; $mysqli-&gt;query($sql);    if ($result &#x3D;&#x3D;&#x3D; false)&#123;        die(&#39;error&#39;.$mysqli-&gt;error);    &#125;    echo &quot;插入成功的记录数：&quot;,$mysqli-&gt;affected_rows,&quot;&lt;br&gt;&quot;;    echo &quot;插入记录的id为：&quot;,$mysqli-&gt;insert_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h4><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&#x2F;&#x2F;test_delete.php&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;?php    &#x2F;&#x2F;构建数据表    require_once &quot;connect.php&quot;;    echo &quot;&lt;table border&#x3D;&#39;1&#39; cellpadding&#x3D;&#39;0&#39;&gt;&quot;;    echo &quot;&lt;tr&gt;&quot;;    echo &quot;&lt;th&gt;id&lt;&#x2F;th&gt;&lt;th&gt;city_no&lt;&#x2F;th&gt;&lt;th&gt;city_name&lt;&#x2F;th&gt;&lt;th&gt;province_name&lt;&#x2F;th&gt;&lt;th&gt;option&lt;&#x2F;th&gt;&quot;;    echo &quot;&lt;&#x2F;tr&gt;&quot;;    $result &#x3D; $mysqli-&gt;query(&#39;select * from t_city_201841054092&#39;);    while ($row &#x3D; $result-&gt;fetch_assoc())&#123;        echo &quot;&lt;tr&gt;&quot;;        echo &quot;&lt;td&gt;&#123;$row[&quot;id&quot;]&#125;&lt;&#x2F;td&gt;        &lt;td&gt;&#123;$row[&quot;city_no&quot;]&#125;&lt;&#x2F;td&gt;        &lt;td&gt;&#123;$row[&quot;city_name&quot;]&#125;&lt;&#x2F;td&gt;        &lt;td&gt;&#123;$row[&quot;province_name&quot;]&#125;&lt;&#x2F;td&gt;        &#x2F;&#x2F;为删除按钮加入一个a标签，标签指向数据处理页面，并且通过拼串的方式传入要处理的数据的id        &lt;td&gt;&lt;a href &#x3D; &#39;city_delete.php?id&#x3D;&#123;$row[&quot;id&quot;]&#125;&#39;&gt;delete&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&quot;;        echo &quot;&lt;&#x2F;tr&gt;&quot;;    &#125;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;city_delete.php&lt;?php    require_once &quot;connect.php&quot;;&#x2F;&#x2F;获取传来的id    $id &#x3D; $_GET[&#39;id&#39;];&#x2F;&#x2F;执行sql语句    $sql &#x3D; &quot;delete from t_city_201841054092 where id &#x3D; $id&quot;;    $result &#x3D; $mysqli-&gt;query($sql);&#x2F;&#x2F;返回操作信息    if ($result &#x3D;&#x3D;&#x3D; false)&#123;        die(&#39;error&#39;.$mysqli-&gt;error);    &#125;    if($mysqli-&gt;affected_rows &#x3D;&#x3D;&#x3D;1)&#123;        echo &quot;&lt;script&gt;window.location&#x3D;&#39;test_delete.php&#39;&lt;&#x2F;script&gt;&quot;;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>用上述删除数据的方式容易被SQL注入等方式攻击，因此我们可以使用<strong>预处理类mysqli_stmt</strong>来<strong>防止SQL注入</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;预处理能有效的防止sql注入的产生，mysqli_stmt是预处理类require_once &quot;connect.php&quot;;$id &#x3D; $_GET[&#39;id&#39;];&#x2F;&#x2F;$id &#x3D; &#39;33 or 1 &#x3D;1&#39;;&#x2F;&#x2F;创建sql语句，用?作为占位符$sql &#x3D; &quot;delete from t_city_201841054092 where id &#x3D; ?&quot;;&#x2F;&#x2F;1、创建语句对象$stmt &#x3D; $mysqli-&gt;stmt_init();&#x2F;&#x2F;2、执行准备语句$stmt -&gt; prepare($sql);&#x2F;&#x2F;3、绑定参数 i:integer  d:double、float b:blob s:其他数据类型$stmt-&gt;bind_param(&#39;i&#39;,$id);&#x2F;&#x2F;4、执行语句$stmt-&gt;execute();if($stmt-&gt;errno)&#123;    die(&#39;error:&#39;.$mysqli-&gt;error);&#125;if ($mysqli-&gt;affected_rows &#x3D;&#x3D;&#x3D; 1) &#123;    echo &quot;&lt;script&gt;window.location&#x3D;&#39;test_delete.php&#39;&lt;&#x2F;script&gt;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>数据库事务（database transaction）是在单个会话期间运行的一系列有序的数据库操作。例如，你可能插入一条记录到一个表中，插入另一条记录到另一个表中，或许还会运行更新。如果不使用事务，每个独立的查询就会立即生效并且不能撤销。使用事务，就可以设置起点和终点，然后根据需要运行或撤销所有的查询。</p><p> 事务的ACID特性：<br>     1、原子性：事务的所有步骤都必须成功完成；否则，任何步骤都不会被提交；<br>     2、一致性：事务的所有步骤都必须成功完成；否则，所有数据都将恢复到事务开始前的状态；<br>     3、隔离性：未完成事务所做的步骤必须与系统隔离，直到认为事务完成为止；<br>     4、持久性：所有提交的数据都必须由系统以某种方式保存：一旦系统出现故障，数据可以成功地返回到合法的状态。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;connect.php&quot;;&#x2F;&#x2F;关闭自动提交$mysqli-&gt;autocommit(false);$sql1 &#x3D; &quot;update account set balance &#x3D; balance + 500 where id &#x3D; 1&quot;;&#x2F;&#x2F;下列sql语句中的if语句的意思是，如果balance - 500 &gt;&#x3D; 0，则balance的值-500，否则不变$sql2 &#x3D; &quot;update account set balance &#x3D; if(balance - 500 &gt;&#x3D; 0, balance - 500,balance) where id &#x3D; 2&quot;;$mysqli-&gt;query($sql1);$mysqli-&gt;query($sql2);&#x2F;&#x2F;判断是否为自己想要的结果if($mysqli-&gt;affected_rows &gt; 0)&#123;    &#x2F;&#x2F;执行生效则提交    $mysqli-&gt;commit();   &#125;else&#123;    &#x2F;&#x2F;执行不生效则回滚，撤销上述sql操作    $mysqli-&gt;rollback();&#125;echo &quot;执行结束&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串和正则"><a href="#字符串和正则" class="headerlink" title="字符串和正则"></a>字符串和正则</h2><h3 id="字符串常用函数"><a href="#字符串常用函数" class="headerlink" title="字符串常用函数"></a>字符串常用函数</h3><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h4><p>判断字符串长度</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$str &#x3D; &quot;zhangsan张三&quot;;echo strlen($str);&#x2F;&#x2F;14&#x2F;&#x2F;utf8中中文一个字占3个字节，不同的字符集中文占的字节数不同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h4><p>通过ASCLL码比较两个字符串（区分大小写）</p><p>0：两者相等</p><p>-1：str1 &lt; str2 </p><p>1: str1 &gt; str2</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo strcmp(&quot;A&quot;,&quot;a&quot;);&#x2F;&#x2F;-1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="strcasecmp"><a href="#strcasecmp" class="headerlink" title="strcasecmp()"></a>strcasecmp()</h4><p>通过ASCLL码比较两个字符串（不区分大小写）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo strcasecmp(&quot;A&quot;,&quot;a&quot;);&#x2F;&#x2F;0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="strtolower"><a href="#strtolower" class="headerlink" title="strtolower()"></a>strtolower()</h4><p>字符串大写转小写</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo strtolower(&#39;Hello&#39;);&#x2F;&#x2F;hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="strtoupper"><a href="#strtoupper" class="headerlink" title="strtoupper()"></a>strtoupper()</h4><p>字符串小写转大写</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo strtoupper(&#39;hello&#39;);&#x2F;&#x2F;HELLO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ucfirst"><a href="#ucfirst" class="headerlink" title="ucfirst()"></a>ucfirst()</h4><p>将字符串的第一个字符大写</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo ucfirst(&#39;hello&#39;);&#x2F;&#x2F;Hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ucwords"><a href="#ucwords" class="headerlink" title="ucwords()"></a>ucwords()</h4><p>将字符串中每个单词的首字母变为大写</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo ucwords(&#39;hello world&#39;);&#x2F;&#x2F;Hello World<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="nl2br"><a href="#nl2br" class="headerlink" title="nl2br()"></a>nl2br()</h4><p>将字符串中的换行符转换为html中的<br/></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo nl2br(&quot;abc&quot;);&#x2F;*a*bc*&#x2F;echo &quot;abc&quot;;&#x2F;&#x2F;a b c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars()"></a>htmlspecialchars()</h4><p>输出字符串中的html转义字符</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$str2 &#x3D; &quot;&lt;font color&#x3D;&#39;red&#39;&gt;变红&lt;&#x2F;font&gt;&quot;;echo $str2;&#x2F;&#x2F;变红$str2&#x3D; htmlspecialchars($str2);echo $str2;&#x2F;&#x2F;&lt;font color&#x3D;&#39;red&#39;&gt;变红&lt;&#x2F;font&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="strip-tags"><a href="#strip-tags" class="headerlink" title="strip_tags()"></a>strip_tags()</h4><p>将html转换为纯文本</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$str3 &#x3D; &quot;&lt;b&gt;加粗&lt;&#x2F;b&gt;&quot;;echo $str3;&#x2F;&#x2F;加粗（加粗了）echo strip_tags($str3);&#x2F;&#x2F;加粗（未加粗）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a>strpos()</h4><p>查找字符串首次出现的位置（区分大小写）</p><p><strong>可作为正则的替代函数</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo strpos(&#39;abc&#39;,&#39;b&#39;);&#x2F;&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="stripos"><a href="#stripos" class="headerlink" title="stripos()"></a>stripos()</h4><p>查找字符串首次出现的位置（不区分大小写）</p><p><strong>可作为正则的替代函数</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo stripos(&#39;aBc&#39;,&#39;b&#39;);&#x2F;&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="strrpos"><a href="#strrpos" class="headerlink" title="strrpos()"></a>strrpos()</h4><p>计算指定字符串在目标字符串中最后一次出现的位置（区分大小写）</p><p><strong>可作为正则的替代函数</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo strrpos(&#39;abcaaaBc&#39;,&#39;aBc&#39;);&#x2F;&#x2F;5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="strripos"><a href="#strripos" class="headerlink" title="strripos()"></a>strripos()</h4><p>计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</p><p><strong>可作为正则的替代函数</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo strripos(&#39;aBcaaaBc&#39;,&#39;abc&#39;);&#x2F;&#x2F;5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="strstr"><a href="#strstr" class="headerlink" title="strstr()"></a>strstr()</h4><p>查找字符串的首次出现（区分大小写）</p><p><strong>可作为正则的替代函数</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo strstr(&#39;abcaBcddd&#39;,&#39;aBc&#39;);&#x2F;&#x2F;aBcddd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="stristr"><a href="#stristr" class="headerlink" title="stristr()"></a>stristr()</h4><p>查找字符串的首次出现（不区分大小写）</p><p><strong>可作为正则的替代函数</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo stristr(&#39;abcaBc&#39;,&#39;ca&#39;);&#x2F;&#x2F;caBc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h4><p>返回字符串的子串</p><p>substr( $str, $start, $length) </p><p>$str，需要截断的字符串</p><p>$start，截断开始处，起始处为0 </p><p>$length，要截取的字数</p><p><strong>可作为正则的替代函数</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo substr(&#39;abcdef&#39;, 1); &#x2F;&#x2F; bcdef,从下标为1开始截echo substr(&#39;abcdef&#39;, 1, 3); &#x2F;&#x2F; bcd，从下标为1开始截3个echo substr(&#39;abcdef&#39;, 0, 4); &#x2F;&#x2F; abcdecho substr(&#39;abcdef&#39;, 0, 8); &#x2F;&#x2F; abcdefecho substr(&#39;abcdef&#39;, -1, 1); &#x2F;&#x2F; f，倒数第一个开始截取一个&#x2F;&#x2F; 访问字符串中的单个字符&#x2F;&#x2F; 也可以使用中括号$string &#x3D; &#39;abcdef&#39;;echo $string[0]; &#x2F;&#x2F; aecho $string[3]; &#x2F;&#x2F; decho $string[strlen($string)-1]; &#x2F;&#x2F; f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mb-substr"><a href="#mb-substr" class="headerlink" title="mb_substr()"></a>mb_substr()</h4><p>获取字符串的部分(中文截取)</p><p>mb_substr( $str, $start, $length, $encoding ) </p><p>$str，需要截断的字符串</p><p>$start，截断开始处，起始处为0 </p><p>$length，要截取的字数</p><p>$encoding，网页编码，如utf-8,GB2312,GBK </p><p>因为在不同的字符集编码中，中文占的字节不同，用原始方法截取会出现乱码，所以我们一般在字符串操作前加mb_可以将中文统一视为一个字符。</p><p><strong>可作为正则的替代函数</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$str&#x3D;&#39;吴炜瀚&#39;;&#x2F;&#x2F;从下标为1开始，截取2个字，假定此代码所在php文件的编码为utf-8echo mb_substr($str,1,2,&#39;utf-8&#39;);&#x2F;&#x2F;&#39;炜瀚&#39;echo substr($str,0,2) .&quot;&lt;br &#x2F;&gt;&quot;;&#x2F;&#x2F;&#39;�&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mb-strlen"><a href="#mb-strlen" class="headerlink" title="mb_strlen()"></a>mb_strlen()</h4><p>获取字符串的长度</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$str&#x3D;&#39;吴炜瀚&#39;;echo mb_strlen($str);&#x2F;&#x2F;3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>正则表达式是一个从左到右匹配目标字符串的模式。</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>正则表达式的构成：/原子和元字符/模式修正符</p><p>说明：正则表达式的原子和元字符都放在定界符之间，而模式修正符放在定界符之外。</p><h4 id="相关函数与符号"><a href="#相关函数与符号" class="headerlink" title="相关函数与符号"></a>相关函数与符号</h4><h5 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a><strong>preg_match()</strong></h5><p>第一个参数为正则表达式，第二个参数为要匹配的字符串，第三个参数返回匹配成功的字符串</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$suject &#x3D; &quot;abcdef&quot;;$pattern &#x3D; &quot;&#x2F;bc&#x2F;&quot;;$result &#x3D; preg_match($pattern,$suject,$matches);var_dump($result,$matches);&#x2F;*D:\wamp64\www\phpReg\regex.php:5:int 1D:\wamp64\www\phpReg\regex.php:5:array (size&#x3D;1)  0 &#x3D;&gt; string &#39;bc&#39; (length&#x3D;2)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id=""><a href="#" class="headerlink" title="^"></a>^</h5><p>以某字符串开始</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$pattern &#x3D; &quot;&#x2F;^ab&#x2F;&quot;;&#x2F;&#x2F;以ab开始<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="-1"><a href="#-1" class="headerlink" title="$"></a>$</h5><p>以某字符串结尾</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$pattern &#x3D; &quot;&#x2F;ef$&#x2F;&quot;;&#x2F;&#x2F;以ef结尾<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="i"><a href="#i" class="headerlink" title="i"></a>i</h5><p>不区分大小写匹配</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$pattern &#x3D; &quot;&#x2F;BC&#x2F;i&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="-2"><a href="#-2" class="headerlink" title="*"></a>*</h5><p>匹配包含0个或者多个某字符串</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$pattern &#x3D; &quot;&#x2F;ab*f&#x2F;&quot;; &#x2F;&#x2F;匹配包含0个或者多个b的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="-3"><a href="#-3" class="headerlink" title="?"></a>?</h5><p>匹配包含0个或者1个某字符串</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$pattern &#x3D; &quot;&#x2F;ab?f&#x2F;&quot;; &#x2F;&#x2F;匹配包含0个或者1个b的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="-4"><a href="#-4" class="headerlink" title="+"></a>+</h5><p>匹配包含至少1个某字符串</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$pattern &#x3D; &quot;&#x2F;ab+f&#x2F;&quot;; &#x2F;&#x2F;匹配包含至少1个b的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="-5"><a href="#-5" class="headerlink" title="{}"></a>{}</h5><ul><li>{n} 正好出现n次</li><li>{m,n} 出现m~n次</li><li>{m,} m次以上</li><li>{1,} 至少一个，相当于+</li><li>{0,}0个或多个，相当于*</li><li>{0,1} 0个或1个，相当于?</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a><strong>手机号</strong></h5><p>1开头，第二位为3-9某一个数字，后面9位随机</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$str &#x3D; &quot;13328577199&quot;;$reg &#x3D; &quot;&#x2F;^1[3-9][0-9]&#123;9&#125;$&#x2F;&quot;;$result &#x3D; preg_match($reg,$str,$matches);var_dump($result,$matches);&#x2F;*D:\wamp64\www\phpReg\regex.php:5:int 1D:\wamp64\www\phpReg\regex.php:5:array (size&#x3D;1)  0 &#x3D;&gt; string &#39;13328577199&#39; (length&#x3D;11)*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用户名"><a href="#用户名" class="headerlink" title="用户名"></a>用户名</h5><p>字母开头，长度介于 5-16 ，允许字母、数字和下划线</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$suject &#x3D; &quot;a0001&quot;;$pattern &#x3D; &quot;&#x2F;^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$&#x2F;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="电话号码"><a href="#电话号码" class="headerlink" title="电话号码"></a>电话号码</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">$suject &#x3D; &quot;029-5580509&quot;;$pattern &#x3D; &quot;&#x2F;^\d&#123;3,4&#125;-\d&#123;7,8&#125;$&#x2F;&quot;; &#x2F;&#x2F;匹配区号3~4位，电话号码7~8位$pattern &#x3D; &quot;&#x2F;^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7,8&#125;$&#x2F;&quot;; &#x2F;&#x2F;3位区号电话号码8位，4位区号电话号码7~8位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="正则的替代函数"><a href="#正则的替代函数" class="headerlink" title="正则的替代函数"></a>正则的替代函数</h3><p>在处理大量信息时，正则表达式函数会使速度大幅减慢，因此，只有在解析复杂的字符串时才使用正则函数。</p><p>解析简单的表达式，采用可以显著加快速处理过程的预定义函数。</p><h4 id="explode"><a href="#explode" class="headerlink" title="explode()"></a>explode()</h4><p>根据预定义的定界符分解字符串</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$tels &#x3D; &#39;010-12345678,0592-6666666,021-15643845&#39;;$arrs&#x3D;explode(&#39;,&#39;,$tels);var_dump($arrs);foreach ($arrs as $arr)&#123;    echo &#39;联系电话：&#39;,$arr,&#39;!&#39;,&#39;&lt;br&gt;&#39;;&#125;&#x2F;*D:\wamp64\www\phpReg\regex.php:9:array (size&#x3D;3)  0 &#x3D;&gt; string &#39;010-12345678&#39; (length&#x3D;12)  1 &#x3D;&gt; string &#39;0592-6666666&#39; (length&#x3D;12)  2 &#x3D;&gt; string &#39;021-15643845&#39; (length&#x3D;12)联系电话：010-12345678!联系电话：0592-6666666!联系电话：021-15643845!*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="implode"><a href="#implode" class="headerlink" title="implode()"></a>implode()</h4><p>将数组转换为字符串</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$tels &#x3D; &#39;010-12345678,0592-6666666,021-15643845&#39;;$arrs&#x3D;explode(&#39;,&#39;,$tels);&#x2F;&#x2F;以,将字符串分解为数组$new_tels &#x3D; implode(&#39;$&#39;,$arrs);&#x2F;&#x2F;将数组转换为字符串，用$连接var_dump($new_tels);&#x2F;&#x2F;D:\wamp64\www\phpReg\regex.php:15:string &#39;010-12345678$0592-6666666$021-15643845&#39; (length&#x3D;38)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace()"></a>str_replace()</h4><p>用另外一个字符串替换字符串的所有实例 （ 区分大小写替换）</p><h4 id="str-ireplace"><a href="#str-ireplace" class="headerlink" title="str_ireplace()"></a>str_ireplace()</h4><p>用另外一个字符串替换字符串的所有实例 （ 不区分大小写替换）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$str1 &#x3D; &#39;linux,nginx,mysql,php&#39;;var_dump(str_replace(&#39;nginx&#39;,&#39;apache&#39;,$str1));&#x2F;*D:\wamp64\www\phpReg\regex.php:20:string &#39;linux,apache,mysql,php&#39; (length&#x3D;22)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim()"></a>ltrim()</h4><p>从字符串开始裁剪字符串</p><h4 id="rtrim"><a href="#rtrim" class="headerlink" title="rtrim()"></a>rtrim()</h4><p>从字符串末尾裁剪字符</p><h4 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h4><p>从字符串两端裁剪字符</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$str &#x3D; &quot;10001@qq.com&quot;;echo strstr($str,&quot;@&quot;);&#x2F;&#x2F;@qq.comecho ltrim(strstr($str,&quot;@&quot;),&#39;@&#39;); &#x2F;&#x2F;qq.comecho rtrim(strstr($str,&quot;@&quot;),&#39;@&#39;); &#x2F;&#x2F;@qq.comecho trim(strstr($str,&quot;@&quot;),&#39;@&#39;); &#x2F;&#x2F;qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="str-pad"><a href="#str-pad" class="headerlink" title="str_pad()"></a>str_pad()</h4><p>填充字符串</p><p>如果没有定义pad_string，则用空格填充，否则用pad_string填充，而且默认情况下填充在右侧。</p><p>指定可选参数pad_type为：</p><ul><li>STR_PAD_RIGHT（默认）</li><li> STR_PAD_LEFT（左侧） </li><li>STR_PAD_BOTH（两侧）</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;自动填充并且生成学号&#x2F;&#x2F;创建一个存放学号的空数组$stu_nos &#x3D; [];for ($i&#x3D;1;$i&lt;&#x3D;106;$i++)&#123;    &#x2F;&#x2F;学号以201841054开头进行拼接    &#x2F;&#x2F;拼接三位尾号，位数不足的从左边开始填充    $stu_no&#x3D;&#39;201841054&#39;.str_pad($i,3,&#39;0&#39;,STR_PAD_LEFT);    &#x2F;&#x2F;将拼接完成的学号存入数组    array_push($stu_nos,$stu_no);&#125;var_dump($stu_nos);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;foreach的形式&#x2F;&#x2F;创建一个存放学号尾号的空数组$stu_no_arrs &#x3D;[];&#x2F;&#x2F;用预定义函数向数组内填入数字$stu_no_arrs &#x3D; range(1,106);&#x2F;&#x2F;创建一个存放学号的空数组$stu_no &#x3D; [];&#x2F;&#x2F;循环遍历预定义好的尾号数组foreach ($stu_no_arrs as $val)&#123;    &#x2F;&#x2F;学号以201841054开头进行拼接    &#x2F;&#x2F;拼接三位尾号，位数不足的从左边开始填充    $stu_no_arr&#x3D;&#39;201841054&#39;.str_pad($val,3,&#39;0&#39;,STR_PAD_LEFT);    &#x2F;&#x2F;将拼接完成的学号存入数组    array_push($stu_no,$stu_no_arr);&#125;var_dump($stu_no);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PHP文件操作"><a href="#PHP文件操作" class="headerlink" title="PHP文件操作"></a>PHP文件操作</h2><h3 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h3><h4 id="解析目录的路径"><a href="#解析目录的路径" class="headerlink" title="解析目录的路径"></a>解析目录的路径</h4><h5 id="basename"><a href="#basename" class="headerlink" title="basename()"></a>basename()</h5><p>获取路径的文件名</p><p>返回路径的文件名部分，如果提供了可选参数suffix，当返回文件名包含这个扩展名时将忽略该后缀</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;获取文件的绝对路径$file &#x3D; __FILE__;var_dump($file);&#x2F;&#x2F;获取文件名var_dump(basename($file));&#x2F;&#x2F;获取文件名（忽略扩展名）var_dump(basename($file,&quot;.php&quot;));&#x2F;*D:\wamp64\www\phpFilesOperated\test.php:4:string &#39;D:\wamp64\www\phpFilesOperated\test.php&#39; (length&#x3D;39)D:\wamp64\www\phpFilesOperated\test.php:6:string &#39;test.php&#39; (length&#x3D;8)D:\wamp64\www\phpFilesOperated\test.php:8:string &#39;test&#39; (length&#x3D;4)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="dirname"><a href="#dirname" class="headerlink" title="dirname()"></a>dirname()</h5><p>获取路径的目录</p><p>返回路径的目录部分</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;获取文件上一级目录的路径var_dump(dirname($file));var_dump(dirname(dirname($file)));&#x2F;*D:\wamp64\www\phpFilesOperated\test.php:10:string &#39;D:\wamp64\www\phpFilesOperated&#39; (length&#x3D;30)D:\wamp64\www\phpFilesOperated\test.php:11:string &#39;D:\wamp64\www&#39; (length&#x3D;13)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="pathinfo"><a href="#pathinfo" class="headerlink" title="pathinfo()"></a>pathinfo()</h5><p>以关联数组的形式提供路径的详细信息，将路径解析为4部分：目录名、文件名（含扩展名）、扩展名以及文件名（不含扩展名）。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;以关联数组的形式提供路径的详细信息var_dump(pathinfo($file));&#x2F;*D:\wamp64\www\phpFilesOperated\test.php:13:array (size&#x3D;4)  &#39;dirname&#39; &#x3D;&gt; string &#39;D:\wamp64\www\phpFilesOperated&#39; (length&#x3D;30)  &#39;basename&#39; &#x3D;&gt; string &#39;test.php&#39; (length&#x3D;8)  &#39;extension&#39; &#x3D;&gt; string &#39;php&#39; (length&#x3D;3)  &#39;filename&#39; &#x3D;&gt; string &#39;test&#39; (length&#x3D;4)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="realpath"><a href="#realpath" class="headerlink" title="realpath()"></a>realpath()</h5><p>获取一个文件的绝对路径</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$path &#x3D; &quot;test.php&quot;;var_dump(realpath($path));$path &#x3D; &quot;..&#x2F;test.php&quot;;var_dump(realpath($path));&#x2F;*D:\wamp64\www\phpFilesOperated\test.php:17:string &#39;D:\wamp64\www\phpFilesOperated\test.php&#39; (length&#x3D;39)D:\wamp64\www\phpFilesOperated\test.php:19:string &#39;D:\wamp64\www\test.php&#39; (length&#x3D;22)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算文件、目录和磁盘大小"><a href="#计算文件、目录和磁盘大小" class="headerlink" title="计算文件、目录和磁盘大小"></a>计算文件、目录和磁盘大小</h4><h5 id="filesize"><a href="#filesize" class="headerlink" title="filesize()"></a>filesize()</h5><p>返回执行文件的大小，以字节为单位</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$file &#x3D; __FILE__;var_dump(filesize($file));var_dump(round(filesize($file)&#x2F;1024,2));&#x2F;&#x2F;单位换算，保留二位小数&#x2F;*D:\wamp64\www\phpFilesOperated\test.php:22:int 2016D:\wamp64\www\phpFilesOperated\test.php:23:float 1.97*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="disk-free-space"><a href="#disk-free-space" class="headerlink" title="disk_free_space()"></a>disk_free_space()</h5><p>计算指定目录所在磁盘分区的可用空间（以字节为单位）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$drive &#x3D; &quot;D:&quot;;$size &#x3D; round(disk_free_space($drive)&#x2F;(1024*1024*1024),2);&#x2F;&#x2F;GBvar_dump($size);&#x2F;&#x2F;D:\wamp64\www\phpFilesOperated\test.php:28:float 156.64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="disk-total-space"><a href="#disk-total-space" class="headerlink" title="disk_total_space()"></a>disk_total_space()</h5><p>计算指定目录所在磁盘分区的总容量（以字节为单位）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$drive &#x3D; &quot;D:&quot;;$size &#x3D; round(disk_total_space($drive)&#x2F;(1024*1024*1024),2);var_dump($size);&#x2F;&#x2F;D:\wamp64\www\phpFilesOperated\test.php:28:float 302.73<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="获取目录大小的函数"><a href="#获取目录大小的函数" class="headerlink" title="获取目录大小的函数"></a>获取目录大小的函数</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;获取一个目录的大小function dirsize($dir)&#123;    $dirsize &#x3D; 0;    &#x2F;&#x2F;打开目录读取内容    if ($db &#x3D; @opendir($dir))&#123;        &#x2F;&#x2F;循环处理每个目录        while ($filename&#x3D;readdir($db))&#123;            if ($filename&#x3D;&#x3D;&quot;.&quot;||$filename&#x3D;&#x3D;&quot;..&quot;) continue;            &#x2F;&#x2F;写出每个文件的绝对路径            $path &#x3D; $dir.&quot;&#x2F;&quot;.$filename;            &#x2F;&#x2F;累加计算大小            if (is_file($path))&#123;                $dirsize+&#x3D;filesize($path);            &#125;else&#123;                $dirsize+&#x3D;dirsize($path);            &#125;        &#125;    &#125;    &#x2F;&#x2F;关闭目录    @closedir($db);    &#x2F;&#x2F;返回文件大小    return $dirsize;&#125;$dir &#x3D; &quot;E:\C++&quot;;var_dump(round(dirsize($dir)&#x2F;1024&#x2F;1024,2));&#x2F;&#x2F;D:\wamp64\www\phpFilesOperated\test.php:50:float 391.93<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="确定访问和修改时间"><a href="#确定访问和修改时间" class="headerlink" title="确定访问和修改时间"></a>确定访问和修改时间</h4><h5 id="fileatime"><a href="#fileatime" class="headerlink" title="fileatime()"></a>fileatime()</h5><p>返回文件的最后访问时间，返回为unix时间戳格式</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$dir &#x3D; &quot;E:\C++&quot;;var_dump(fileatime($dir));&#x2F;&#x2F;格式化输出echo date(&quot;Y-m-d H:i:s&quot;,(fileatime($dir))).&quot;&lt;br &#x2F;&gt;&quot;;&#x2F;&#x2F;D:\wamp64\www\phpFilesOperated\test.php:53:int 1552226052&#x2F;&#x2F;2019-03-10 21:54:12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="filectime"><a href="#filectime" class="headerlink" title="filectime()"></a>filectime()</h5><p>返回文件的最后改变时间，最后改变时间涉及到文件改变权限、所有者、组等特定的信息。返回为unix时间戳格式</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo date(&quot;Y-m-d H:i:s&quot;,(filectime($dir))).&quot;&lt;br &#x2F;&gt;&quot;;&#x2F;&#x2F;2019-03-10 21:27:49<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="filemtime"><a href="#filemtime" class="headerlink" title="filemtime()"></a>filemtime()</h5><p>返回文件的最后修改时间，是指对文件内容的修改（特别是以字节为单位的文件大小）时间。返回为unix时间戳格式</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">echo date(&quot;Y-m-d H:i:s&quot;,(filemtime($dir))).&quot;&lt;br &#x2F;&gt;&quot;;&#x2F;&#x2F;2019-03-10 21:54:12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><h4 id="打开和关闭文件"><a href="#打开和关闭文件" class="headerlink" title="打开和关闭文件"></a>打开和关闭文件</h4><h5 id="fopen"><a href="#fopen" class="headerlink" title="fopen()"></a>fopen()</h5><ul><li>r’ 只读方式打开，将文件指针指向文件头。</li><li>‘r+’ 读写方式打开，将文件指针指向文件头。</li><li>‘w’ 写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建。</li><li>‘w+’ 读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建。</li><li>‘a’ 写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建。</li><li>‘a+’ 读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建。</li><li>‘x’ 创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则 fopen() 调用失败并返回 FALSE，并生成一条 E_WARNING 级别的错误信息。如果文件不存在则尝试创建之。这和给 底层的 open(2) 系统调用指定 O_EXCL|O_CREAT 标记是等价的。</li><li>‘x+’ 创建并以读写方式打开，其他的行为和 ‘x’ 一样。</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">$handle &#x3D; fopen(&quot;test.log&quot;,&quot;w&quot;);var_dump($handle);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="fclose"><a href="#fclose" class="headerlink" title="fclose()"></a>fclose()</h5><p>关闭文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">fclose($handle);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h4><h5 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h5><p>将文件内容读入到字符串变量中</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$result &#x3D; file_get_contents(&quot;address.txt&quot;);var_dump($result);&#x2F;*D:\wamp64\www\phpFilesOperated\fileOpreated.php:10:string &#39;zhangsan@163.com 010-12345678lisi@163.com 021-12345678wangwu@163.com 029-12345678zhaoliu@163.com 027-12345678&#39; (length&#x3D;115)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例</strong></p><p>将文本内容格式化输出</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;读取文件address.txt中的内容$result &#x3D; file_get_contents(&quot;address.txt&quot;);&#x2F;&#x2F;以换行符号为界拆分文件内容$users &#x3D; explode(&quot;\n&quot;,$result);&#x2F;&#x2F;将每行信息都放入一个参数里面foreach ($users as $user)&#123;    $line &#x3D; trim($user);    &#x2F;&#x2F;以空格为界分开单行的字符串    $arrs &#x3D; explode(&quot; &quot;,$line);    &#x2F;&#x2F;信息归类    $email &#x3D; $arrs[0];    &#x2F;&#x2F;去掉@163.com    $name &#x3D; rtrim($email,&quot;@163.com&quot;);    $tel &#x3D; $arrs[1];    &#x2F;&#x2F;拼串输出内容    echo &quot;&lt;a href&#x3D;&#39;mailto:$email&#39;&gt;$name(电话：$tel)&lt;&#x2F;a&gt;&quot;.&quot;&lt;br&gt;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="readfile"><a href="#readfile" class="headerlink" title="readfile()"></a>readfile()</h5><p> 读取整个文件，立即输出到输出缓冲区并返回读取的字节数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">readfile(&quot;address.txt&quot;);&#x2F;&#x2F;zhangsan@163.com 010-12345678 lisi@163.com 021-12345678 wangwu@163.com 029-12345678 zhaoliu@163.com 027-12345678readfile(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;);&#x2F;&#x2F;读取一个网络连接会直接显示该页面（如HTML的iframe标签）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写入文件内容"><a href="#写入文件内容" class="headerlink" title="写入文件内容"></a>写入文件内容</h4><h5 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite()"></a>fwrite()</h5><p>可以将字符串写入已经打开的文件中</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$info &#x3D; &quot;写入文件&quot;;&#x2F;&#x2F;a+表示以追加的方式写入$dh &#x3D; fopen(&quot;test.txt&quot;,&quot;a+&quot;);fwrite($dh,$info);fclose($dh);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents()"></a>file_put_contents()</h5><p>以一种更简便的方式将字符串写入文件</p><p>参数：<br>    file 必须。规定要写入数据的文件，若不存在则创建</p><p>​    data 可选。规定要写入文件的数据，可以是字符串、数组或者数据流。</p><p>​    flags 可选。规定如何打开/写入文件</p><p>​        可能的值：FILE_USE_INCLUDE_PATH（覆写）</p><p>​                            FILE_APPEND（追加）</p><p>​                            LOCK_EX（排他锁）用于两个语句在同时操作一个文件内容时，在执行有该锁的语句时，其他的语句先不执行。</p><p>​    context 可选。规定文件句柄的环境。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;LOCK_EX排他锁，当前语句在进行时，停止其他语句对该文件的操作$result &#x3D; file_put_contents(&quot;test.log&quot;,&quot;写入内容&quot;,FILE_APPEND|LOCK_EX);var_dump($result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><h5 id="unlink"><a href="#unlink" class="headerlink" title="unlink()"></a>unlink()</h5><p>可以在开头添加错误抑制符@，当删除一个文件后，再次删除该文件就不会报错了。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">@unlink(&quot;test.log&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="目录处理"><a href="#目录处理" class="headerlink" title="目录处理"></a>目录处理</h3><h4 id="打开和关闭目录"><a href="#打开和关闭目录" class="headerlink" title="打开和关闭目录"></a>打开和关闭目录</h4><h5 id="opendir"><a href="#opendir" class="headerlink" title="opendir()"></a>opendir()</h5><p>打开目录</p><h5 id="closedir"><a href="#closedir" class="headerlink" title="closedir()"></a>closedir()</h5><p>关闭目录</p><h5 id="readdir"><a href="#readdir" class="headerlink" title="readdir()"></a>readdir()</h5><p>读取目录</p><p>返回给定目录中所有的文件和子目录，还返回一般在unix目录列表中常见的”.“和”..“项，需要过滤掉</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$dir &#x3D; dirname(__FILE__);$dh &#x3D; opendir($dir);while($file &#x3D; readdir($dh))&#123;echo $file . &quot;&lt;br &#x2F;&gt;&quot;;&#125;closedir($dh);&#x2F;*...Dev-Cpppconline1545983763723.exe*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="scandir"><a href="#scandir" class="headerlink" title="scandir()"></a>scandir()</h5><p>将目录读入数组中</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$dir &#x3D; &quot;E:\C++&quot;;$result &#x3D; scandir($dir);var_dump($result);&#x2F;*D:\wamp64\www\phpFilesOperated\fileOpreated.php:49:array (size&#x3D;4)  0 &#x3D;&gt; string &#39;.&#39; (length&#x3D;1)  1 &#x3D;&gt; string &#39;..&#39; (length&#x3D;2)  2 &#x3D;&gt; string &#39;Dev-Cpp&#39; (length&#x3D;7)  3 &#x3D;&gt; string &#39;pconline1545983763723.exe&#39; (length&#x3D;25)*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建、删除、移动、重命名目录"><a href="#创建、删除、移动、重命名目录" class="headerlink" title="创建、删除、移动、重命名目录"></a>创建、删除、移动、重命名目录</h4><h5 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir()"></a>mkdir()</h5><p>创建目录</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">if (!is_dir(&quot;test2&quot;))&#123;    mkdir(&quot;test2&quot;);    &#x2F;&#x2F;创建多级目录时，要保证上一级目录存在，否则要先创建    mkdir(&quot;test2&#x2F;test1&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;可以通过设置参数来一次性创建多级目录，并且赋予相对应的权限mkdir(&#39;test&#x2F;test&#x2F;test&#39;,777,true);&#x2F;&#x2F;在目录中创建一个文件$fh &#x3D; fopen(&quot;test&#x2F;test&#x2F;test&#x2F;test.txt&quot;,&quot;w&quot;);fwrite($fh,&quot;aaa&quot;);fclose($fh);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir()"></a>rmdir()</h5><p>删除目录</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;在删除一个目录时要保证该目录内为空，否则会报错&#x2F;&#x2F;rmdir(&quot;test&#x2F;test&quot;);unlink(&quot;test&#x2F;test&#x2F;test&#x2F;test.txt&quot;);rmdir(&quot;test&#x2F;test&#x2F;test&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="rename"><a href="#rename" class="headerlink" title="rename()"></a>rename()</h5><p>移动（重命名）目录以及文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;将&#x2F;test下的test文件夹重命名为test2rename(&quot;test&#x2F;test&quot;,&quot;test&#x2F;test2&quot;);&#x2F;&#x2F;将&#x2F;test下的test.txt文件移动到&#x2F;test1中并且重命名为test2.txtrename(&quot;test&#x2F;test.txt&quot;,&quot;test1&#x2F;test2.txt&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="HTTP表单协议要求"><a href="#HTTP表单协议要求" class="headerlink" title="HTTP表单协议要求"></a>HTTP表单协议要求</h4><ol><li>action中要指向处理的页面</li><li>enctype要设置为multipart/form-data</li><li>method要设置为post</li></ol><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;form action&#x3D;&quot;doupload.php&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot; method&#x3D;&quot;post&quot;&gt;    &lt;!--使用该隐藏域能在前端页面表单提交时就给提交的文件加以限制--&gt;    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;MAX_FILE_SIZE&quot; value&#x3D;&quot;204800&quot;&gt;    &lt;!--设置input类型为file用于存放文件，name中的属性为后台获取文件的索引--&gt;    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;upload&quot; &#x2F;&gt;    &lt;input type&#x3D;&quot;submit&quot;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PHP文件上传处理"><a href="#PHP文件上传处理" class="headerlink" title="PHP文件上传处理"></a>PHP文件上传处理</h4><h5 id="php-ini配置"><a href="#php-ini配置" class="headerlink" title="php.ini配置"></a>php.ini配置</h5><p><strong>file_uploads = On/off</strong> </p><p>是否可以接受文件上传</p><p><strong>max_input_time = 60</strong> </p><p>在提示错误之前解析输入所花费的最长时间，以秒为单位，如果经常需要</p><p>传输大文件，这个时限应该设置得合理一些。</p><p><strong>max_file_uploads = 20</strong></p><p>对可以同时上传的文件数设置了一个上限</p><p><strong>memory_limit = 128M</strong></p><p>设置脚本可以分配的最大内存，可以防止脚本独占服务器内容，甚至导致</p><p>服务器崩溃。</p><p><strong>post_max_size = 8M</strong></p><p>对通过post方法提交的数据大小设置了一个限制。</p><p><strong>upload_max_filesize = 2M</strong></p><p>限定上传文件的最大大小，以MB为单位，该值必须小于post_max_size。</p><p><strong>upload_tmp_dir =”E:/wampserver/tmp”</strong> </p><p>文件上传的临时目录</p><h5 id="文件信息抓取"><a href="#文件信息抓取" class="headerlink" title="文件信息抓取"></a>文件信息抓取</h5><p>可以使用超全局变量**$_FILES**来获取到前端页面上传的文件</p><p><strong>$_FILES</strong>是关联数组的形式返回文件信息</p><ul><li><p>$_FILES[“upload”][“name”] 上传文件名（含扩展名）</p></li><li><p>$_FILES[“upload”][“type”] 上传文件的MIME类型，这个值有时会产生意外结果，建议通过文件扩展名来显式验证</p></li><li><p>$_FILES[“upload”][“tmpname”] 存储在临时目录中的文件名</p></li><li><p>$_FILES[“upload”][“size”] 上传文件的大小，以字节为单位</p></li><li><p>$_FILES[“upload”][“error”] 上传结果</p><ul><li><p>UPLOAD_ERR_OK 上传成功 ，则返回0 </p></li><li><p>UPLOAD_ERR_INI_SIZE 超出upload_max_filesize大小 ，则返回1 </p></li><li><p>UPLOAD_ERR_FORM_SIZE 超出嵌入在HTML表单中的max_file_size大小，其中max_file_size可能会被黑客修改，所以不建议使用。此时返回2 </p></li><li><p>UPLOAD_ERR_PARTIAL 文件没有完全上传，一般在发生网络错误时会出现，则返回3 </p></li><li><p>UPLOAD_ERR_NO_FILE 用户没有指定上传文件就提交表单，则返回4 </p></li><li><p>UPLOAD_ERR_NO_TMP_DIR 临时目录不存在，则返回6 </p></li><li><p>UPLOAD_ERR_CANT_WRITE 如果文件无法写入磁盘，则返回7 </p></li><li><p>UPLOAD_ERR_EXTENSION 如果PHP的配置问题导致上传失败，则返回8</p></li></ul></li></ul><h5 id="文件上传函数"><a href="#文件上传函数" class="headerlink" title="文件上传函数"></a>文件上传函数</h5><p><strong>is_uploaded_file()</strong></p><p>判断文件是否使用POST上传并且已经上传</p><p><strong>move_uploaded_file()</strong></p><p>自动检查文件确实是通过HTTP POST机制上传的，如果指定的文件未上传，则移动失败，返回false。</p><p>在使用该函数时可以不必使用is_uploaded_file() 进行判断</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php    var_dump($_FILES);    var_dump($_FILES[&#39;upload&#39;][&#39;name&#39;]);    if (move_uploaded_file($_FILES[&#39;upload&#39;][&#39;tmp_name&#39;],&#39;test&#x2F;&#39;.$_FILES[&#39;upload&#39;][&#39;name&#39;]))&#123;        echo &quot;上传成功&quot;;    &#125;else&#123;        echo &quot;上传失败&quot;;    &#125;&#x2F;*D:\wamp64\www\phpBasics\phpFilesOperated\doupload.php:2:array (size&#x3D;1)  &#39;upload&#39; &#x3D;&gt;     array (size&#x3D;5)      &#39;name&#39; &#x3D;&gt; string &#39;网盘.txt&#39; (length&#x3D;10)      &#39;type&#39; &#x3D;&gt; string &#39;text&#x2F;plain&#39; (length&#x3D;10)      &#39;tmp_name&#39; &#x3D;&gt; string &#39;D:\wamp64\tmp\php8C4D.tmp&#39; (length&#x3D;25)      &#39;error&#39; &#x3D;&gt; int 0      &#39;size&#39; &#x3D;&gt; int 118D:\wamp64\www\phpBasics\phpFilesOperated\doupload.php:3:string &#39;网盘.txt&#39; (length&#x3D;10)上传成功*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="移动已上传的文件"><a href="#移动已上传的文件" class="headerlink" title="移动已上传的文件"></a>移动已上传的文件</h5><p>在实际项目中文件上传需要改名</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;确保文件上传后不会覆盖掉前面的文件$fileName &#x3D; $_FILES[&#39;upload&#39;][&#39;name&#39;];&#x2F;&#x2F;获取文件拓展名$ext &#x3D; pathinfo($fileName,PATHINFO_EXTENSION);&#x2F;&#x2F;给一个随机的新名字$randFileName &#x3D; date(&#39;YmdHis&#39;).rand(10000,99999);&#x2F;&#x2F;名字拼接$newFileName &#x3D; $randFileName . &quot;.&quot; . $ext;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h5><p>多文件上传处理较复杂，可以使用多文件上传处理类，比较少用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--一次选择多个文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload[]<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token comment">&lt;!--或每次选择一个文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload[]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload[]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PHP文件下载处理"><a href="#PHP文件下载处理" class="headerlink" title="PHP文件下载处理"></a>PHP文件下载处理</h4><h5 id="显示内容和下载文件"><a href="#显示内容和下载文件" class="headerlink" title="显示内容和下载文件"></a>显示内容和下载文件</h5><p>可以通过超链接的href属性来获取文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--会显示文件内容，而不是下载--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.rar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载1.rar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载1.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载1.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileupload.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载1.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!--通过PHP处理页面下载文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test/201841054092吴炜瀚.docx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>作业<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test2/test1/test.txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--以GET的方式传给服务器要下载的文件名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doDownLoad.php?filename=test.txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="PHP处理页面"><a href="#PHP处理页面" class="headerlink" title="PHP处理页面"></a>PHP处理页面</h5><p>较为固定的写法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;获取要下载的文件名$filename &#x3D; $_GET[&#39;filename&#39;];&#x2F;&#x2F;必须。下载的文件内容的配置为附件，设置要下载的文件名header(&#39;content-disposition:attachment;filename&#x3D;&#39; . basename($filename));&#x2F;&#x2F;可选。显示要下载的文件的大小header(&#39;content-length:&#39; . filesize($filename));&#x2F;&#x2F;可选。读取整个文件，立即输出到输出缓冲区并返回读取的字节数readfile($filename);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> PHP </tag>
            
            <tag> 后端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="/2022/05/16/nodejs/"/>
      <url>/2022/05/16/nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>node package manager（node包管理工具）</p><p>由三个独立的部分组成：</p><ul><li>网站：用于查找包、设置参数、管理npm使用体验</li><li>注册表：一个巨大的数据库，保存了每个工具包的信息</li><li>CLI：能使用命令行或终端运行</li></ul><p>npm工具是nodejs自带的一个工具，只需要安装node就可以使用</p><p>想在命令行|终端使用npm，每句指令都要以npm开头</p><p>npm包默认安装路径：C:\Users\shinelon\AppData\Roaming\npm</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>npm root -g</td><td>查看全局安装的包放在哪里</td></tr></tbody></table><h3 id="npm初始化"><a href="#npm初始化" class="headerlink" title="npm初始化"></a>npm初始化</h3><p>当我们想用npm来管理一个文件夹的包的时候需要先对此文件夹进行初始化</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>npm init</td><td>为当前文件夹创建一个package.json文件</td></tr></tbody></table><p>初始化后会生成一个package.json文件，在其中会记录一些这个包相关的信息以及我们使用npm下载的包</p><p>在命令后加上 -y或–yes 能生成一个默认的package.json包</p><h3 id="npm下载包"><a href="#npm下载包" class="headerlink" title="npm下载包"></a>npm下载包</h3><table><thead><tr><th align="left">命令</th><th>作用</th></tr></thead><tbody><tr><td align="left">npm install <packagename> @<version></td><td>下载包（install后接多个包可以同时安装多个包）</td></tr><tr><td align="left">npm view <packagename></td><td>查看该包安装的版本</td></tr></tbody></table><p>注意点：</p><ul><li><p>如果packagename这个参数没有传入，而package.json中有包的记录，则npm会将package.json中记录的包全部自动下载下来</p></li><li><p>如果包名后面有使用@接上版本号，则会下载对应版本号的包，并且会将这个包记录到package-lock.json中进行管理，在以后更新包时就会进行锁定不会一起更新</p></li><li><p>如果没有接上版本号，则会下载这个包的最新版本，并且在以后更新包的时候也会一起进行更新</p></li><li><p>如果版本号没有写齐全，如：vue@2，则会下载vue@2这个大版本的最新子版本</p></li></ul><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-g</td><td>全局安装包</td></tr><tr><td>-D | –save-dev</td><td>在开发环境下安装包</td></tr><tr><td>-S | –save</td><td>在生产环境下安装包</td></tr></tbody></table><p>注意点：</p><ul><li>在打包时，安装在开发环境下的包不会被引用；而在生产环境下安装的包在开发环境中会生效。</li><li>在安装包时正确选择安装的环境能减少打包后文件的代码冗余。</li></ul><h3 id="npm更新包"><a href="#npm更新包" class="headerlink" title="npm更新包"></a>npm更新包</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>npm update</td><td>更新依赖包</td></tr><tr><td>npm outdated</td><td>检查package.json管理的文件夹中是否存在过期的包</td></tr><tr><td>npm update -g <packagename></td><td>更新全局中的依赖包</td></tr></tbody></table><p>注意点：</p><ul><li>当包被package-lock.json锁定版本后不会被更新语句影响。</li></ul><h3 id="npm卸载包"><a href="#npm卸载包" class="headerlink" title="npm卸载包"></a>npm卸载包</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>npm uninstall <packagename></td><td>卸载在node_modules下的包</td></tr></tbody></table><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–save <packagename></td><td>删除package.json中保存在生产环境中的包（包括package.json中的记录）</td></tr><tr><td>–save-dev <packagename></td><td>删除package.json中保存在开发环境中的包（包括package.json中的记录）</td></tr><tr><td>-g <packagename></td><td>删除在全局下安装的包</td></tr></tbody></table><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>Node Version Manager 是Node包版本管理工具，能实现一台机器中安装多个node版本并且在这几个版本中进行切换使用。</p><p>私人node版本：14.17.0 npm版本：6.14.13</p><p>公司node版本：10.24.1 npm版本：6.14.12</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>nvm version</td><td>查看nvm版本</td></tr><tr><td>nvm arch</td><td>查看电脑系统和当前nodejs的位数</td></tr><tr><td>nvm list</td><td>查看当前使用版本</td></tr><tr><td>nvm list installed</td><td>查看已安装的版本</td></tr><tr><td>nvm list available</td><td>查看可安装的版本</td></tr><tr><td>nvm install <version> <arch></td><td>安装指定版本与位数的nodejs</td></tr><tr><td>nvm install stable</td><td>安装稳定版本</td></tr><tr><td>nvm install 14.17.0 64-bit</td><td>安装本人原系统使用版本</td></tr><tr><td>nvm use <version><arch></td><td>切换nodejs版本</td></tr><tr><td>nvm uninstall <version></td><td>卸载nodejs</td></tr><tr><td>nvm node_mirror <url></td><td>设置nodejs安装源（默认是<a href="https://nodejs.org/dist/%EF%BC%89">https://nodejs.org/dist/）</a></td></tr><tr><td>nvm node_mirror</td><td>获取nodejs安装源</td></tr><tr><td>nvm npm_mirror <url></td><td>设置npm安装源（默认是<a href="https://github.com/npm/npm/archive/%EF%BC%89">https://github.com/npm/npm/archive/）</a></td></tr><tr><td>nvm npm_mirror</td><td>获取npm报安装源</td></tr><tr><td>nvm on</td><td>打开nodejs版本控制</td></tr><tr><td>nvm off</td><td>关闭nodejs版本控制</td></tr></tbody></table><h2 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h2><p>NPM Registry Manager 是NPM的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换。</p><p>当与nvm同时使用时，使用nrm改变镜像源并不会随着nvm改变node版本而改变，并且在不同的node版本中都需要安装nrm。</p><p>如果用了公司的node版本就要使用公司的镜像源，如果使用自己的node版本则需要切换回自己使用的淘宝镜像源。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>npm install -g nrm</code></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>nrm ls</td><td>查看当前配置中可用的镜像源</td></tr><tr><td>nrm use <registry name></td><td>切换镜像源</td></tr><tr><td>nrm add <registry name> <url></td><td>添加镜像源</td></tr><tr><td>nrm del <registry name></td><td>删除镜像源</td></tr><tr><td>nrm test npm</td><td>测试镜像源的响应速度</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript自定义工具函数库</title>
      <link href="/2022/05/16/javascript-tools/"/>
      <url>/2022/05/16/javascript-tools/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义工具库"><a href="#自定义工具库" class="headerlink" title="自定义工具库"></a>自定义工具库</h1><h2 id="函数相关"><a href="#函数相关" class="headerlink" title="函数相关"></a>函数相关</h2><h3 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h3><p>作用：改变函数的this指向。</p><p>参数：</p><ol><li>待执行的函数</li><li>this的目标指向对象</li><li>传入多个参数给待执行函数进行调用</li></ol><p>返回值：改变this指向后函数执行的值</p><p>实现思路：将要改变的方法设置为this目标对象的一个临时方法，通过执行这个对象上的临时方法来改变this指向。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token parameter">Fn<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 判断当obj为空时指向全局对象</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj <span class="token operator">=</span> globalThis  <span class="token punctuation">&#125;</span>  <span class="token comment">// 1、为传入的对象添加临时方法</span>  obj<span class="token punctuation">.</span>temp <span class="token operator">=</span> Fn  <span class="token comment">// 2、传入参数，执行此对象上的方法</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">temp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token comment">// 3、删除此对象上的方法</span>  <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>temp  <span class="token comment">// 4、将方法执行的结果返回</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">&#125;</span><span class="token comment">// 为对象obj添加属性</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">521</span><span class="token punctuation">&#125;</span><span class="token comment">// 为全局对象添加属性</span>window<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">1314</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">call</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Object 551</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">call</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Window 1344</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h3><p>作用：改变函数的this指向。</p><p>参数：</p><ol><li>待执行的函数</li><li>this的目标指向对象</li><li>传入一个数组给待执行函数进行调用</li></ol><p>返回值：改变this指向后函数执行的值</p><p>实现思路：与call()的实现思路一致，只不过给待调用函数传入的参数是一个数组。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">Fn<span class="token punctuation">,</span> obj <span class="token punctuation">,</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 判断对象是否指定</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj <span class="token operator">=</span> globalThis  <span class="token punctuation">&#125;</span>  <span class="token comment">// 1、为对象添加临时方法</span>  obj<span class="token punctuation">.</span>temp <span class="token operator">=</span> Fn  <span class="token comment">// 2、传入参数，通过此对象执行方法</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">temp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token comment">// 3、删除对象中的临时方法</span>  <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>temp  <span class="token comment">// 4、返回结果</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span>b <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">&#125;</span><span class="token comment">// 为对象obj添加属性</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">521</span><span class="token punctuation">&#125;</span><span class="token comment">// 为全局对象添加属性</span>window<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">1314</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">apply</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Object 551</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">apply</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Window 1344</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h3><p>作用：改变函数执行的this指向，将改变完对象的函数作为返回值保存，以供多次调用。</p><p>参数：</p><ol><li>待执行函数</li><li>this的目标指向对象</li><li>传入一个或多个值给待执行函数进行调用</li></ol><p>返回值：返回改变this指向后的函数</p><p>实现思路：返回一个function，这个function也可以接收一系列参数，并且返回上方将这个参数与原来bind()接收的参数一起传给call()去改变this指向并且返回call()执行后的结果。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">Fn<span class="token punctuation">,</span>obj<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 1、返回一个函数</span>  <span class="token comment">// 2、改变指向时没有传入参数，可以在调用改变了指向后的方法再传入参数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">call</span><span class="token punctuation">(</span>Fn<span class="token punctuation">,</span>obj<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">,</span><span class="token operator">...</span>args2<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span>b <span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">&#125;</span><span class="token comment">// 为对象obj添加属性</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">521</span><span class="token punctuation">&#125;</span><span class="token comment">// 为全局对象添加属性</span>window<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">1314</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span>obj<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;c: 521, temp: ƒ&#125;</span><span class="token comment">//Arguments(2) [10, 20...]</span><span class="token comment">//551</span><span class="token keyword">let</span> fn2 <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**ƒ (...args2) &#123;    return call(Fn,obj,...args,...args2)  &#125;*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;c: 521, temp: ƒ&#125;</span><span class="token comment">//Arguments(2) [20, 20...]</span><span class="token comment">//561</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="throttle"><a href="#throttle" class="headerlink" title="throttle()"></a>throttle()</h3><p>作用：节流函数——使一个回调函数在一段时间内最多执行一次。</p><p>适用场景：浏览器下拉事件触发的回调…</p><p>参数：</p><ol><li>要节流的函数</li><li>每次执行的间隔</li></ol><p>返回值：一个用于执行的函数。</p><p>实现思路：在节流函数内定义一个开始时间，在返回的函数内获取当前时间，当当前时间与事件触发的时间差大于等待时间则用call()去执行要节流的函数，并且更新开始时间。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义开始时间</span>  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// e为事件对象</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前时间戳</span>    <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> start <span class="token operator">>=</span> wait<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 满足条件则执行回调</span>      <span class="token comment">// 函数返回出去一定会放在外面的回调函数的位置</span>      <span class="token comment">// 因此只需要用原本的this去指向他</span>      <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>      start <span class="token operator">=</span> now    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//绑定一个屏幕滚动的响应函数，用节流函数将这个回调包裹起来</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="debounce"><a href="#debounce" class="headerlink" title="debounce()"></a>debounce()</h3><p>作用：防抖函数——当上一个事件触发，不立即执行事件绑定的回调函数，而是等待一段时间。如果在这等待的时间内此事件再次触发，则停止上一个事件的回调，执行新事件的回调。</p><p>适用场景：输入框校验、搜索…</p><p>参数：</p><ol><li>需要防抖的回调函数</li><li>等待的时间</li></ol><p>返回值：一个用于执行的函数</p><p>实现思路：利用定时器，先在防抖函数内定义一个定时器遍历；然后在返回的函数内判断这个定时器变量是否为null，如果不为null，则清空上一个定时器，接着开启新的一个定时器；当定时器被延时触发，则使用call()调用传来的回调，并且清空定时器变量表示这一个事件的回调已经执行完毕。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span>time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定时器变量</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment">// 返回一个函数，需要接收事件源作为回调函数执行的参数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当执行新的函数时，若发现有正在等待的回调定时器，则停止该定时器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 延迟触发事件回调</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>      <span class="token comment">// 每次执行完都需要清空定时器变量</span>      <span class="token comment">// 否则变量一直保存的话会一直触发清空定时器执行无用代码</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>  <span class="token comment">//使用防抖函数将事件的回调包裹起来</span>  input<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h2><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>作用：传入一个数组，将数组中每一个元素在回调函数中处理后返回一个新的数组。</p><p>参数：</p><ol><li>待处理数组</li><li>处理数组的回调函数（此回调接收原数组的值及其下标值）</li></ol><p>返回值：处理后的数组</p><p>实现思路：定义一个存放结果的数组，遍历待处理数组，将每个数组元素传入回调函数处理后，将回调函数的返回值放入结果数组中并且返回结果数组。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 用于存放结果数组</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 循环遍历原数组中的每一个元素，将其传入回调函数中执行</span>  <span class="token comment">// 将回调函数的结果保存在result中并返回</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3.4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> item<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[10, 20, 34, 50]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><p>作用：传入一个待执行数组，将此数组每一个元素放入回调函数中执行，返回累加的执行结果以及初始值的和。</p><p>参数：</p><ol><li>待执行数组</li><li>处理数组的回调函数（此回调接收自定义的初始值或者上一次回调的结果值和一个新的值）</li><li>reduce()统计的初始值</li></ol><p>返回值：数值经过回调函数处理后的结果之和</p><p>实现思路：定义一个结果变量，此变量初始值为reduce()的初始值，遍历待执行数组，将结果变量以及每个数组元素传入回调，此回调的第一个参数为初始值或者上一个函数的返回值，第二个参数为当前要处理的数组元素 ，循环完成后返回结果变量。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>callback<span class="token punctuation">,</span>initVal<span class="token operator">=</span><span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义变量存放结果，初始值为函数外指定的值</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> initVal  <span class="token comment">// 遍历数组元素进行操作</span>  <span class="token comment">// 调用回掉后应该改变结果里面的数</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">reduce</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">preValue<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> preValue <span class="token operator">+</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>作用：传入一个待处理数组，当数组中的元素传入回调函数中得到的结果是真时，则将这个元素放入结果数组中返回。</p><p>参数：</p><ol><li>待执行数组</li><li>处理数组元素的回调</li></ol><p>返回值：满足回调条件的新数组</p><p>实现思路：定义一个结果数组，将数组每一个元素放入回调中执行，若结果为真则将此元素放入结果数组中返回。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 用于存放结果的数组</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 循环数组中每个元素进行回调的操作</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 若回调结果为真压入filter操作结果的数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//[1, 3, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p>作用：在数组中返回满足回调的第一个数组元素，若没找到则返回undefined。</p><p>参数：</p><ol><li>寻找元素的目标数组</li><li>处理数组元素的回调</li></ol><p>返回值：</p><ul><li>满足回调的第一个数组元素下标</li><li>undefined</li></ul><p>实现思路：遍历传入的目标数组，将数组元素及其下标放入回调中执行。若回调执行结果为true则返回该数组元素；若没有满足回调的元素存在则返回undefined。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 遍历数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在数组中返回满足回调的第一个数组元素</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若没有找到返回undefined</span>  <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h3><p>作用：在数组中返回满足回调的第一个数组元素的下标，若没有找到返回-1。</p><p>参数：</p><ol><li>寻找元素的目标数组</li><li>处理数组元素的回调</li></ol><p>返回值：</p><ul><li>满足回调的第一个数组元素的下标</li><li>-1</li></ul><p>实现思路：遍历目标数组，将目标数组的每一个元素及其下标放入回调中执行。若回调结果为true，返回该数组元素下标；若回调结果为false，返回-1。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 遍历数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在数组中返回满足回调的第一个数组元素下标</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若没有找到返回-1</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">findIndex</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><p>作用：检测数组中元素是否全部满足回调条件。</p><p>参数：</p><ol><li>待检查数组</li><li>处理数组元素的回调</li></ol><p>返回值：Boolean</p><p>实现思路：遍历待检查数组，若有一个数组元素不满足回调条件则返回false，否则返回true。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">callback</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">every</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> item<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><p>作用：检测数组元素中是否有元素满足回调条件。</p><p>参数：</p><ol><li>待检测数组</li><li>处理数组条件的回调</li></ol><p>返回值：Boolean</p><p>实现思路：遍历待检查数组，若有一个数组元素满足回调条件则返回true，否则返回false。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">some</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> item<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unique"><a href="#unique" class="headerlink" title="unique()"></a>unique()</h3><p>作用：数组去重。</p><p>参数：待处理数组</p><p>返回值：去重后的新数组。</p><p>实现思路：</p><ol><li>forEach + indexOf 双重遍历——定义一个新的结果数组，遍历带处理数组中每一个元素，如果在结果数组中没有找到正在遍历的元素值则将这个元素放入结果数值中返回。</li><li>forEach + 对象 一次遍历——定义一个空的结果数组以及一个空的结果对象，遍历待处理数组，以数组值为结果对象的key，以Boolean值为结果对象的value作为标记。若没有在此对象中找到该元素的标记则在对象中以该元素为key，以true为value进行标记，并且放入结果数组中返回。</li><li>spread拓展运算符+Set()数据结构——以Set()数据结构中元素值不重复的特性，将数组放入其中去重，并且用spread拓展运算符展开这个Set()然后以数组的方式返回结果。</li></ol><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//forEach + indexOf 双重遍历</span><span class="token keyword">function</span> <span class="token function">unique1</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义一个结果数组</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 遍历传入数组的每个元素</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 若结果数组中没有该元素则把他放入结果数组</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">//forEach + 对象 一次遍历</span><span class="token keyword">function</span> <span class="token function">unique2</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 结果数组</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 空结果对象</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 遍历数组</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当对象中key为此元素的值不存在时，添加他的值为true，然后放入结果数组</span>    <span class="token comment">// 在者之后就能通过判断该对象的值是不是为true来决定要不要把此元素放入结果数组</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">//ES6语法：... + Set</span><span class="token keyword">function</span> <span class="token function">unique3</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 4, 5, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique2</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 4, 5, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique3</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 4, 5, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>作用：合并数组。</p><p>参数：</p><ol><li>基础数组</li><li>要合并的一个数组或一个数（用rest参数接收）</li></ol><p>返回值：合并后的新数组</p><p>实现思路：将基础数组使用spread展开后作为结果数组的基础元素，遍历rest接收的参数。判断这个参数是不是一个数组，若是数组，则用spread展开后再调用push()放入结果数组；若只是一个值，则直接push()放入结果数组。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span>  args<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">?</span>result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>item<span class="token punctuation">)</span><span class="token operator">:</span>result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[1, 2, 4, 1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p>作用：数组截取。</p><p>参数：</p><ol><li>要截取的目标数组</li><li>要截取的数组的起始下标</li><li>要截取的数组的结束下标（该下标所在值不会被截取）</li></ol><p>返回值：返回截取出来的结果数组</p><p>实现思路：遍历要截取的目标数组，当其下标在起始下标和结束下标的这个范围内，将此元素放入结果数组中返回。需要通过判断对传入的值进行特殊处理。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">slice</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义结果数组</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 当没有传入数组时直接返回空数组</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 当没有传入start时默认从0开始截取</span>  <span class="token comment">// start = start || 0</span>  start <span class="token operator">||=</span> <span class="token number">0</span>  <span class="token comment">// 当截取的开头大于等于数组的长度，返回空数组</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">>=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 当没有传入end时，默认截取开始之后的所有值</span>  <span class="token comment">// end = end || arr.length</span>  end <span class="token operator">||=</span> arr<span class="token punctuation">.</span>length  <span class="token comment">// 当传入的结束值小于开始值，结束值默认为数组长度</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token punctuation">&#125;</span>  <span class="token comment">// 循环数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当数组下标在截取范围内则放入结果数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> start <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">slice</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2, 6, 3, 4, 5, 6, 7, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="flat"><a href="#flat" class="headerlink" title="flat()"></a>flat()</h3><p>作用：数组扁平化。</p><p>参数：待处理数组</p><p>返回值：返回一个新的结果数组</p><p>实现思路：</p><ol><li>递归 + concat()——定义一个新的结果数组，遍历待处理数组。若数组元素是一个数组，则进行递归调用；若不是，则直接将该元素合并入数组。</li><li>some() + concat() + 拓展运算符——将数组复制一份作为基础结果，用while循环判断结果数组中是否存在数组，若存在，则将这个元素展开后合并入结果数组。</li></ol><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//递归 + concat()</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">flat1</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 遍历数组</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当数组中元素是一个数组时，递归调用此方法展开数组</span>    <span class="token comment">// 当数组中元素不是一个数组时，将该元素合并到结果数组中</span>    result <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">?</span>result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flat1</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">//some() + concat() + 扩展运算符</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">flat2</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 把数组复制一份新的用于操作</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span>  <span class="token comment">//循环当结果的数组中存在一个元素是数组的话，用拓展运算符展开后合并不是数组的那一部分元素</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>result<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flat1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1, 2, 3, 4, 5, 6, 7, 8</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flat2</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1, 2, 3, 4, 5, 6, 7, 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk()"></a>chunk()</h3><p>作用：数组分块—按照第二个参数，将数组分成若干个数组组成的二维数组。</p><p>参数：</p><ol><li>待分块数组</li><li>每一块的大小</li></ol><p>返回值：分块后的二维数组</p><p>实现思路：定义一个结果数组与一个临时的块数组，遍历待分块数组，先把空的临时数组块放入结果数组中，然后不断往这个数组块中放入元素，如果数组块的大小到达了我们设定的大小则开启一个新的数组块再放入结果中进行循环。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">chunk</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 用于存放结果</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 用于存放结果中的其中一个数组</span>  <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 遍历数组</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 先给结果数组中放入一个空的数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 不断地往结果中的这个数组中压入元素</span>    temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token comment">// 压入过后判断此数组是否饱和</span>    <span class="token comment">// 饱和了则开启一个新的数组块</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>length <span class="token operator">===</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">chunk</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[[1,2,3],[4,5,6],[7]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="difference"><a href="#difference" class="headerlink" title="difference()"></a>difference()</h3><p>作用：数组差集——判断第一个数组内的元素是否存在于第二个数组；若存在，剔除该元素，返回一个新的数组。</p><p>参数：</p><ol><li>基础数组</li><li>排除名单数组</li></ol><p>返回值：求差集后的新数组</p><p>实现思路：使用filter()过滤数组，使用includes()方法0判断基础数组中的元素是否存在于排除名单数组中。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">difference</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span>arr2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 数组一为空，返回空数组</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 数组二为空，通过slice返回一个新的arr1数组</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr2<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 数组一的元素若不存在于数组二则放入结果数组返回</span>  <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">!</span>arr2<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">difference</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2,3,7]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="pull"><a href="#pull" class="headerlink" title="pull()"></a>pull()</h3><p>作用：删除数组元素。</p><p>参数：</p><ol><li>待删除的数组</li><li>要删除的值</li></ol><p>返回值：被删除的元素的数组</p><p>实现思路：创建一个结果数组用于存放被删除的数，对待删除的数组进行遍历，当遍历的元素存在于rest参数形成的数组中时，将这个元素放入被删除的数组中，并且在原数组中删除这个数，注意被删除了一位后下标需要自减一位，以免跳过了被删除元素的下一位的判断。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">pull</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 存放被删除的数</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 遍历数组元素</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 此元素书否存在于传入的参数中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若存在先保存该数组</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 调用splice()从原数组中删除这个数</span>      arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 由于删除了一个数，所以下次遍历时下标要后移动一位</span>      <span class="token comment">// 否则会跳过一个数的判断</span>      i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回被删除的元素数组</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">pull</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3, 3, 7]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="pullAll"><a href="#pullAll" class="headerlink" title="pullAll()"></a>pullAll()</h3><p>作用：从数组一中删除数组二中所有的元素。</p><p>参数：</p><ol><li>待删除的数组</li><li>要删除的值的数组</li></ol><p>返回值：被删除的元素的数组</p><p>实现思路：直接调用上方的pull()方法并将其值返回。不同的是，pull()使用rest接收多个参数，而pullAll()是直接接收一个数组，因此在pullAll()中调用pull()方法时，第二个参数需要用spread展开再传给pull()。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">pullAll</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span>arr2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">pull</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">pullAll</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3, 3, 7]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="drop"><a href="#drop" class="headerlink" title="drop()"></a>drop()</h3><p>作用：数组过滤——过滤掉该数组从左起count个数。</p><p>参数：</p><ol><li>待处理数组</li><li>过滤的个数</li></ol><p>返回值：过滤后的数组</p><p>实现思路：利用filter()，条件为元素下标大于等于过滤的个数。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">drop</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> index <span class="token operator">>=</span> count<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">drop</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3, 4, 5, 6, 7, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="dropRight"><a href="#dropRight" class="headerlink" title="dropRight()"></a>dropRight()</h3><p>作用：数组过滤——过滤掉该数组从右起count个数。</p><p>参数：</p><ol><li>待处理数组</li><li>过滤的个数</li></ol><p>返回值：过滤后的数组</p><p>实现思路：利用filter()，条件为元素下标小于数组长度与过滤个数之差。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dropRight</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>count</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> count<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dropRight</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 3, 4, 5, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="对象相关"><a href="#对象相关" class="headerlink" title="对象相关"></a>对象相关</h2><h3 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance()"></a>newInstance()</h3><p>作用：创建新的对象。</p><p>参数：</p><ol><li>构造函数</li><li>创建对象时要传入的参数</li></ol><p>返回值：</p><ul><li>新的实例对象</li><li>构造函数自身返回的对象</li></ul><p>实现思路：创建一个新的对象，修改传入的构造函数的this指向为这个新对象，并且传入接收到的参数进行执行，并且要修改新对象的隐式原型的指向。注意：若构造函数内部返回值是一个对象，那么我们实例化这个对象返回值也是一个对象。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token parameter">Fn<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建新的对象</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 修改this指向obj，传入参数</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">Fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token comment">// 实例对象的隐式原型等于构造函数的显式原型</span>  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype  <span class="token comment">// 当函数执行结果直接返回一个对象，那就直接将这个对象返回</span>  <span class="token comment">// 如果不是一个对象，就返回构建的实例对象</span>  <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token comment">// return &#123;</span>  <span class="token comment">//   a:1</span>  <span class="token comment">// &#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">newInstance</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="instanceOf"><a href="#instanceOf" class="headerlink" title="instanceOf()"></a>instanceOf()</h3><p>作用：比对对象类型——通过判断对象的隐式原型是否存在于构造函数的原型链上。</p><p>参数：</p><ol><li>要判断的实例对象</li><li>被判断的构造函数</li></ol><p>返回值：Boolean</p><p>实现思路：获取实例对象的隐式原型与构造函数的显式原型，通过遍历原型链的方式来比对对象类型。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">instanceOf</span><span class="token punctuation">(</span><span class="token parameter">obj <span class="token punctuation">,</span> Fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取实例对象的隐式原型</span>  <span class="token keyword">let</span> proto <span class="token operator">=</span> obj<span class="token punctuation">.</span>__proto__  <span class="token comment">// 获取构造函数的显式原型</span>  <span class="token keyword">let</span> prototype <span class="token operator">=</span> <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype  <span class="token comment">// 遍历原型链</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>proto<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当原型对象相等返回true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prototype <span class="token operator">===</span> proto<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 沿着隐式原型向上</span>    proto <span class="token operator">=</span> proto<span class="token punctuation">.</span>__proto__  <span class="token punctuation">&#125;</span>  <span class="token comment">// 原型对象匹配不成功返回false</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">instanceOf</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="mergeObject"><a href="#mergeObject" class="headerlink" title="mergeObject()"></a>mergeObject()</h3><p>作用：传入多个对象，将它们合成一个对象并返回</p><p>参数：使用rest参数接收多个对象</p><p>返回值：合并后的新对象</p><p>实现思路：定义一个新对象用于存放结果，遍历传入的对象当结果对象中出现与正在遍历的对象有重名的key则用一个数组去合并这两个值；如果没有重名则直接将对象的值赋予结果对象。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeObject</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 用于存放新的对象</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 遍历传入参数，获取所有对象</span>  args<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">obj</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 取到一个对象中所有的key值，并遍历这些key</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 当结果对象中出现重名的key，用一个新的数组去保存他们合并的结果</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果在结果对象中没有出现重名的key值，则直接将此对象的值放入结果数组</span>        result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回结果对象</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">4</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> other <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">z</span><span class="token operator">:</span><span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token string">'foo'</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mergeObject</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><p>作用：浅拷贝（引用地址拷贝）——拷贝一个新的结果（修改了拷贝出来的对象的值原对象的值也会跟着改变）</p><p>参数：被克隆的目标</p><p>返回值：克隆后的对象</p><p>实现思路：</p><ul><li>使用ES6拓展运算符实现——判断当前是否为引用数据类型，若不是则直接返回该结果；若是则再次判断其是否是一个数组后分别进行复制。</li><li>使用ES5语法实现——判断当前诗句是否为引用数据类型，若不是则直接返回该结果；若是则根据被克隆的目标的类型来创建一个空的数组或对象。遍历目标上的键，将目标当前身上的属性的键值赋值一份给结果变量。</li></ul><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用ES6拓展运算符实现</span><span class="token keyword">function</span> <span class="token function">clone1</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 判断当前目标是不是引用数据类型（由于typeof的特点需要排除null）</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 数组也是引用数据类型的一种，要拿出来单独处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>target<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>target<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果是基本数据类型则直接返回</span>    <span class="token keyword">return</span> target  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ES5语法实现</span><span class="token keyword">function</span> <span class="token function">clone2</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 判断数据类型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根据target的数据类型来创建初始值</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 遍历target的key</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 由于for...in..也能遍历对象原型上的数据</span>      <span class="token comment">// 因此需要判断对象当前身上是否包含该属性</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将属性设置到result中</span>        result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> target  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token string">'abc'</span><span class="token punctuation">,</span>  <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">m</span><span class="token operator">:</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">clone2</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>result<span class="token punctuation">.</span>y<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;x: 'abc', y: &#123;m:2&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;x: 'abc', y: &#123;m:2&#125;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result <span class="token operator">===</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="deepClone"><a href="#deepClone" class="headerlink" title="deepClone()"></a>deepClone()</h3><p>作用：深拷贝（值拷贝）——对拷贝后的对象进行修改不会影响原先的数据。</p><p>参数：被克隆的目标</p><p>返回值：克隆后的对象</p><p>实现思路：</p><ol><li>乞丐版：使用JSON字符串转换对象返回新的拷贝对象，缺点是不能拷贝对象中的方法，也不能处理循环引用的问题。</li><li>普通版：在ES5浅拷贝的基础上，使用递归的方式进行深拷贝，缺点是如果遇到了循环引用会发生死循环导致栈内存的溢出。</li><li>完整版：在普通版的基础上，通过设置map()的方式来解决循环引用的问题。</li><li>性能优化版本：在完整版的基础上，使用forEach代替了for…in…的循环——for…in…会遍历到对象的原型上的内容，还需要多加一次判断，因此性能较差。</li></ol><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//乞丐版</span><span class="token keyword">function</span> <span class="token function">deepClone1</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//普通版</span><span class="token keyword">function</span> <span class="token function">deepClone2</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 判断传入的值是不是对象</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根据传入的对象的类型创建一个存放结果的容器</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 通过key来循环传入的对象中的key值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果该对象的key值是该对象本身的属性（不是从原型链上获取到的）</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将对象的key对应的value放到结果中对应的位置</span>        <span class="token comment">// 由于传入的对象的value可能是一个数组或对象，因此要进行递归调用</span>        <span class="token comment">//如b:['e','f','g']</span>        result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone2</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将结果返回</span>    <span class="token keyword">return</span> result  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当传入的值是一个常量，直接返回：如：a:1</span>    <span class="token keyword">return</span> target  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//完整版</span><span class="token keyword">function</span> <span class="token function">deepClone3</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在map中获取此target对应的值作为缓存</span>    <span class="token keyword">let</span> cache <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token comment">// 当缓存存在就直接把这个缓存返回，不让函数进入循环</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cache    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 将这个target作为key，result作为value放入map中保存</span>    <span class="token comment">// 这个result先是空的，若后面的代码修改了这个result，map中的也会跟着修改</span>    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将这个map也作为一个值传入递归调用</span>        result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone3</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> target  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//性能优化</span><span class="token keyword">function</span> <span class="token function">deepClone4</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> cache <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cache    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> isArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> isArray <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>result<span class="token punctuation">)</span>    <span class="token comment">// 判断这个传入的值是数组还是对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 用数组下标去保存结果</span>      target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// item === target[index]</span>        result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone4</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>map<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 先获取所传对象的所有key值，再进行递归赋值</span>      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone4</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> target  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">h</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">d</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 循环引用</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>c<span class="token punctuation">)</span>obj<span class="token punctuation">.</span>c<span class="token punctuation">.</span>j <span class="token operator">=</span> obj<span class="token punctuation">.</span>b<span class="token comment">// const result = deepClone1(obj)</span><span class="token comment">// const result = deepClone2(obj)</span><span class="token comment">// const result = deepClone3(obj)</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">deepClone4</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>result<span class="token punctuation">.</span>c<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token number">200</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h2><h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate()"></a>truncate()</h3><p>作用：字符串截取。</p><p>参数：</p><ol><li>要被截取的字符串</li><li>要截取的长度</li></ol><p>返回值：被截取后的字符串。</p><p>实现思路：通过字符串的slice方法，从0开始，直接将size传入开始截取；由于数组从0开始，下标等于传入的值的那个地方的字符串不会截取到。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">truncate</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyz'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">truncate</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="reverseString"><a href="#reverseString" class="headerlink" title="reverseString()"></a>reverseString()</h3><p>作用：字符串反转。</p><p>参数：待反转的字符串</p><p>返回值：被反转后的字符串</p><p>实现思路：先将字符串转成数组，反转数组后再将数组转成字符串。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> arrStr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span>  arrStr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> arrStr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'iloveyou'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reverseString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="palindrome"><a href="#palindrome" class="headerlink" title="palindrome()"></a>palindrome()</h3><p>作用：检测字符串是否为回文。</p><p>参数：待检测的字符串。</p><p>返回值：Boolean</p><p>实现思路：借助字符串反转判断反转前后的字符串是否相等。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> str <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'asddsa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">palindrome</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h2><h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener()"></a>addEventListener()</h3><p>作用：委托绑定事件。</p><p>参数：</p><ol><li>选择器。</li><li>绑定事件类型。</li><li>事件触发的响应函数。</li><li>绑定的子选择器（可选）</li></ol><p>返回值：无</p><p>实现思路：获取传入选择器的对应DOM元素；判断是否传入了子选择器，若无则直接将事件绑定在传入的选择器上；若有则需要通过事件源判断点击的目标是不是传入的选择器，再去调用响应回调。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>type<span class="token punctuation">,</span>fn<span class="token punctuation">,</span>selector</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> el <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selector<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>fn<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target      <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>e<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../src/event/event-bind.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'#items'</span><span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'li'</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><p>我们通过定义一个对象作为事件总线，并且在其中有一个callbacks对象属性，该对象属性的key值为事件的类别，value值为这一事件类别的回调函数所形成的数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> eventBus <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">callbacks</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">// [type]:[fn1,fn2]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且该对象会对外开放三个API：</p><ol><li>on：绑定事件</li><li>emit：触发事件</li><li>off：解绑事件</li></ol><h3 id="on"><a href="#on" class="headerlink" title="on"></a>on</h3><p>作用：绑定事件——可以为一个类型的事件绑定多个回调函数。</p><p>参数：</p><ol><li>事件种类</li><li>事件回调</li></ol><p>返回值：无</p><p>实现思路：判断传入的事件类型在对象的回调属性内是否已经保存了同样类型的回调，如果存在则将回调函数放入事件总线同一类型的回调形成的数组中；若不存在则在事件总线的回调属性内创建类型并且把回调函数作为这一回调类型数组的初始值。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventBus<span class="token punctuation">.</span><span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当此类型事件存在，直接把回调函数压入保存</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当此类型事件不存在，创建类型，并把回调函数作为初始值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">'用户已经登录'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>eventBus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">'登录数据已经写入'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h3><p>作用：触发事件——可以触发同一类型事件的所有回调函数</p><p>参数：</p><ol><li>事件种类</li><li>事件回调要用到的数据</li></ol><p>返回值：无</p><p>实现思路：判断传入的事件类型是否存在于事件总线的回调属性中，并且该事件类型是否存在响应的响应回调，若存在则将这个事件对应的回调数组进行遍历执行。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventBus<span class="token punctuation">.</span><span class="token function-variable function">emit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 判断此类型的事件是否存在回调函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 若存在则遍历执行</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventBus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="off"><a href="#off" class="headerlink" title="off"></a>off</h3><p>作用：解绑事件——将事件类型及其回调函数从对象中删去。</p><p>参数：事件类型名称</p><p>返回值：无</p><p>实现思路：判断是否有传入参数，如果有传入参数则删除指定事件类型的回调，如果没有传入参数则清空所有事件的回调。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventBus<span class="token punctuation">.</span><span class="token function-variable function">off</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">eventName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当传入事件名，删除对应事件回调</span>    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 没有传入事件名则清空所有事件回调</span>    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventBus<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><p>发布订阅模式与上述事件总线差不多。也是通过一个对象来保存事件的种类与其对应的回调函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> PubSub <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 设置一个唯一的值作为频道标识符</span>  <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">// 频道与回调保存容器</span>  <span class="token literal-property property">callbacks</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">// channel:&#123;</span>    <span class="token comment">//   token_1:callback1,</span>    <span class="token comment">//   token_2:callback2</span>    <span class="token comment">// &#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且这个对象会对外开放三个API：</p><ol><li>subscribe：订阅频道</li><li>publish：发布消息</li><li>unsubscribe：取消订阅</li></ol><h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><p>作用：订阅频道——可以为一个频道用对象键值对的形式保存一到多个回调。</p><p>参数：</p><ol><li>频道名</li><li>回调函数</li></ol><p>返回值：无</p><p>实现思路：借由发布订阅模式对象内的id生成唯一的频道标识符，并且判断传入的频道是否存在。若存在，则向这个频道中加入key做为唯一标识符的回调；若不存在，则先创建频道，再将唯一标识符与对应回调作为键值对一起保存到此频道对象中。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">PubSub<span class="token punctuation">.</span><span class="token function-variable function">subscribe</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">channel<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 自动生成频道标识符</span>  <span class="token keyword">let</span> token <span class="token operator">=</span> <span class="token string">'token_'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">++</span>  <span class="token comment">// 当此频道存在，向频道中加入回调函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>channel<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>channel<span class="token punctuation">]</span><span class="token punctuation">[</span>token<span class="token punctuation">]</span> <span class="token operator">=</span> callback  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当频道不存在，先创建频道，再保存回调</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span>token<span class="token punctuation">]</span> <span class="token operator">:</span> callback    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'pay'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'商家接到订单开始制作'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'pay'</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'骑手接到订单准备开始取餐'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p>作用：发布消息——给一个频道内所有的回调函数发布消息（传递数据），并且执行频道内所有的回调。</p><p>参数：</p><ol><li>频道名</li><li>消息数据</li></ol><p>返回值：无</p><p>实现思路：判断传入的频道名是否存在，如果存在则先用Object.values取得此频道中所有的回调函数然后依次传入消息数据并执行。</p><p>代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">PubSub<span class="token punctuation">.</span><span class="token function-variable function">publish</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">channel<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 当此频道存在，将信息发给频道中所有回调去执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>channel<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>channel<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'pay'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'鱼香肉丝盖饭'</span><span class="token punctuation">,</span>    <span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>    <span class="token literal-property property">pos</span><span class="token operator">:</span><span class="token string">'三年二班'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unsubscribe"><a href="#unsubscribe" class="headerlink" title="unsubscribe"></a>unsubscribe</h3><p>作用：取消订阅——根据传入的参数删除频道内的回调。</p><p>参数：标识符（可选——无|频道token|频道名称）</p><p>返回值：无</p><p>实现思路：判断是否传入标识符，若没有传入则清空发布订阅模式对象内的回调对象的内容；若传入了标识符，判断此标识符是频道token还是频道名称，若是频道token则从回调对象中</p><p>代码：</p><p>调用方法：</p><h2 id="axios简易封装"><a href="#axios简易封装" class="headerlink" title="axios简易封装"></a>axios简易封装</h2>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端开发 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级知识</title>
      <link href="/2022/05/16/javascript-advanced/"/>
      <url>/2022/05/16/javascript-advanced/</url>
      
        <content type="html"><![CDATA[<h1 id="基础深入"><a href="#基础深入" class="headerlink" title="基础深入"></a>基础深入</h1><h2 id="数据类型的分类和判断"><a href="#数据类型的分类和判断" class="headerlink" title="数据类型的分类和判断"></a>数据类型的分类和判断</h2><ul><li><p>基本(值)类型</p><ul><li>Number —– 任意数值 ——– typeof</li><li>String —– 任意字符串 —— typeof</li><li>Boolean —- true/false —– typeof</li><li>undefined — undefined —– typeof/===</li><li>null ——– null ———- ===</li></ul></li><li><p>对象(引用)类型</p><ul><li>Object —– typeof/instanceof</li><li>Array —— instanceof</li><li>Function —- typeof</li></ul></li></ul><h2 id="数据-变量-内存的理解"><a href="#数据-变量-内存的理解" class="headerlink" title="数据,变量, 内存的理解"></a>数据,变量, 内存的理解</h2><ul><li>什么是数据?<ul><li>在内存中可读的, 可传递的保存了特定信息的’东东’</li><li>一切皆数据, 函数也是数据</li><li>在内存中的所有操作的目标: 数据</li></ul></li><li>什么是变量?<ul><li>在程序运行过程中它的值是允许改变的量</li><li>一个变量对应一块小内存, 它的值保存在此内存中  </li></ul></li><li>什么是内存?<ul><li>内存条通电后产生的存储空间(临时的)</li><li>一块内存包含2个方面的数据<ul><li>内部存储的数据</li><li>地址值数据</li></ul></li><li>内存空间的分类<ul><li>栈空间: 全局变量和局部变量</li><li>堆空间: 对象 </li></ul></li></ul></li><li>内存,数据, 变量三者之间的关系<ul><li>内存是容器, 用来存储不同数据</li><li>变量是内存的标识, 通过变量我们可以操作(读/写)内存中的数据  </li></ul></li></ul><h2 id="对象的理解和使用"><a href="#对象的理解和使用" class="headerlink" title="对象的理解和使用"></a>对象的理解和使用</h2><ul><li><p>什么是对象?</p><ul><li>多个数据(属性)的集合</li><li>用来保存多个数据(属性)的容器</li></ul></li><li><p>属性组成:</p><ul><li>属性名 : 字符串(标识)</li><li>属性值 : 任意类型</li></ul></li><li><p>属性的分类:</p><ul><li>一般 : 属性值不是function  描述对象的状态</li><li>方法 : 属性值为function的属性  描述对象的行为</li></ul></li><li><p>特别的对象</p><ul><li>数组: 属性名是0,1,2,3之类的索引</li><li>函数: 可以执行的</li></ul></li><li><p>如何操作内部属性(方法)</p><ul><li><p>.属性名</p></li><li><p>[‘属性名’]: 属性名有特殊字符/属性名是一个变量</p></li></ul></li></ul><h2 id="函数的理解和使用"><a href="#函数的理解和使用" class="headerlink" title="函数的理解和使用"></a>函数的理解和使用</h2><ul><li><p>什么是函数?</p><ul><li>用来实现特定功能的, n条语句的封装体</li><li>只有函数类型的数据是可以执行的, 其它的都不可以</li></ul></li><li><p>为什么要用函数?</p><ul><li>提高复用性</li><li>便于阅读交流</li></ul></li><li><p>函数也是对象</p><ul><li>instanceof Object===true</li><li>函数有属性: prototype</li><li>函数有方法: call()/apply()</li><li>可以添加新的属性/方法</li></ul></li><li><p>函数的3种不同角色</p><ul><li>一般函数 : 直接调用</li><li>构造函数 : 通过new调用</li><li>对象 : 通过.调用内部的属性/方法</li></ul></li><li><p>函数中的this</p><ul><li>显式指定谁: obj.xxx()</li><li>通过call/apply指定谁调用: xxx.call(obj)</li><li>不指定谁调用: xxx()  : window</li><li>回调函数: 看背后是通过谁来调用的: window/其它</li></ul></li><li><p>匿名函数自调用:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">w<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//实现代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>专业术语为: IIFE (Immediately Invoked Function Expression) 立即调用函数表达式    </li></ul></li></ul><h2 id="回调函数的理解"><a href="#回调函数的理解" class="headerlink" title="回调函数的理解"></a>回调函数的理解</h2><ul><li><p>什么函数才是回调函数?</p><ul><li><p>你定义的</p></li><li><p>你没有调用</p></li><li><p>但它最终执行了(在一定条件下或某个时刻)</p></li><li><p>常用的回调函数</p><ul><li>dom事件回调函数</li><li>定时器回调函数</li><li>ajax请求回调函数(后面讲解)</li><li>生命周期回调函数(后面讲解)</li></ul></li></ul></li></ul><h3 id="同步回调"><a href="#同步回调" class="headerlink" title="同步回调"></a>同步回调</h3><p>理解: 在函数定义后立即执行，完全执行完了才结束，不会放入回调队列中</p><p>例子: 数组遍历相关的回调函数 / Promise的excutor函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1. 同步回调函数</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">// 遍历回调, 同步回调函数, 不会放入列队, 一上来就要执行完</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'forEach()之后'</span><span class="token punctuation">)</span><span class="token comment">//1</span><span class="token comment">//3</span><span class="token comment">//5</span><span class="token comment">//forEach()之后</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h3><p>理解: 不会在函数定义了之后就立即执行， 会放入回调队列中将来执行</p><p>例子: 定时器回调 / ajax回调 / Promise的成功|失败的回调</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 2. 异步回调函数</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 异步回调函数, 会放入队列中将来执行</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timout callback()'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout()之后'</span><span class="token punctuation">)</span><span class="token comment">//setTimeout()之后</span><span class="token comment">//timout callback()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数对象与实例对象"><a href="#函数对象与实例对象" class="headerlink" title="函数对象与实例对象"></a>函数对象与实例对象</h2><ul><li>函数对象: 将函数作为对象使用时, 简称为函数对象</li><li>实例对象: new 函数产生的对象, 简称为对象</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// Fn函数 </span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Fn是构造函数  fn是实例对象(简称为对象)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// Fn是函数对象</span><span class="token function">Fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// Fn是函数对象</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span> <span class="token comment">// jQuery函数</span>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/test'</span><span class="token punctuation">)</span> <span class="token comment">// jQuery函数对象</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="错误和错误处理"><a href="#错误和错误处理" class="headerlink" title="错误和错误处理"></a>错误和错误处理</h2><p>mdn文档: https: //developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error</p><h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><table><thead><tr><th>错误</th><th>含义</th></tr></thead><tbody><tr><td>Error</td><td>所有错误的父类型</td></tr><tr><td>ReferenceError</td><td>引用的变量不存在</td></tr><tr><td>TypeError</td><td>数据类型不正确的错误</td></tr><tr><td>RangeError</td><td>数据值不在其所允许的范围内</td></tr><tr><td>SyntaxError</td><td>语法错误</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ReferenceError: 引用的变量不存在</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// ReferenceError: a is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-----'</span><span class="token punctuation">)</span> <span class="token comment">// 没有捕获error, 下面的代码不会执行</span><span class="token comment">// TypeError: 数据类型不正确的错误</span><span class="token keyword">let</span> bconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span> <span class="token comment">// TypeError: Cannot read property 'xxx' of undefined</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>b<span class="token punctuation">.</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// TypeError: b.xxx is not a function</span><span class="token comment">// RangeError: 数据值不在其所允许的范围内</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// RangeError: Maximum call stack size exceeded</span><span class="token comment">// SyntaxError: 语法错误</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token string">""</span><span class="token string">""</span> <span class="token comment">// SyntaxError: Unexpected string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p><strong>捕获错误</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 捕获错误: try ... catch</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> d  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'出错之后'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>抛出错误并处理</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 抛出错误: throw error</span><span class="token keyword">function</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'当前时间为奇数, 可以执行任务'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果时间是偶数抛出异常, 由调用来处理</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'当前时间为偶数无法执行任务'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 捕获处理异常</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数高级"><a href="#函数高级" class="headerlink" title="函数高级"></a>函数高级</h1><h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><ul><li>所有函数都有一个特别的属性:<ul><li><code>prototype</code> : 显式原型属性</li></ul></li><li>所有实例对象都有一个特别的属性:<ul><li><code>__proto__</code> : 隐式原型属性</li></ul></li><li>显式原型与隐式原型的关系<ul><li>函数的prototype: 定义函数时被自动赋值, 值默认为{}, 即用为原型对象</li><li>实例对象的<code>__proto__</code>: 在创建实例对象时被自动添加, 并赋值为构造函数的prototype值</li><li>原型对象即为当前实例对象的父对象</li></ul></li><li>原型链<ul><li>所有的实例对象都有<code>__proto__</code>属性, 它指向的就是原型对象</li><li>这样通过<code>__proto__</code>属性就形成了一个链的结构—-&gt;原型链</li><li>当查找对象内部的属性/方法时, js引擎自动沿着这个原型链查找</li><li>当给对象属性赋值时不会使用原型链, 而只是在当前对象中进行操作</li></ul></li></ul><p><img src="D:\课程资料\前端开发\自学笔记\img\原型链.jpg" alt="原型链"></p><h2 id="执行上下文与执行上下文栈"><a href="#执行上下文与执行上下文栈" class="headerlink" title="执行上下文与执行上下文栈"></a>执行上下文与执行上下文栈</h2><ul><li>变量提升与函数提升<ul><li>变量提升: 在变量定义语句之前, 就可以访问到这个变量(undefined)</li><li>函数提升: 在函数定义语句之前, 就执行该函数</li><li>函数提升要比变量提升的优先级要高一些，且不会被变量声明覆盖，但是会被变量赋值之后覆盖。</li></ul></li><li>理解<ul><li>执行上下文: 由js引擎自动创建的对象, 包含对应作用域中的所有变量属性</li><li>执行上下文栈: 用来管理产生的多个执行上下文</li></ul></li><li>分类:<ul><li>全局: window</li><li>函数: 对程序员来说是透明的</li></ul></li><li>生命周期<ul><li>全局 : 准备执行全局代码前产生, 当页面刷新/关闭页面时死亡</li><li>函数 : 调用函数时产生, 函数执行完时死亡</li></ul></li><li>包含哪些属性:<ul><li>全局 : <ul><li>用var定义的全局变量  ==&gt;undefined</li><li>使用function声明的函数   ===&gt;function</li><li>this   ===&gt;window</li></ul></li><li>函数<ul><li>用var定义的局部变量  ==&gt;undefined</li><li>使用function声明的函数   ===&gt;function</li><li>this   ===&gt; 调用函数的对象, 如果没有指定就是window </li><li>形参变量   ===&gt;对应实参值</li><li>arguments ===&gt;实参列表的伪数组</li></ul></li></ul></li><li>执行上下文创建和初始化的过程<ul><li>全局:<ul><li>在全局代码执行前最先创建一个全局执行上下文(window)</li><li>收集一些全局变量, 并初始化</li><li>将这些变量设置为window的属性</li></ul></li><li>函数:<ul><li>在调用函数时, 在执行函数体之前先创建一个函数执行上下文</li><li>收集一些局部变量, 并初始化</li><li>将这些变量设置为执行上下文的属性</li></ul></li></ul></li></ul><h2 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h2><ul><li>理解:<ul><li>作用域: 一块代码区域, 在编码时就确定了, 不会再变化</li><li>作用域链: 多个嵌套的作用域形成的由内向外的结构, 用于查找变量</li></ul></li><li>分类:<ul><li>全局</li><li>函数</li><li>js没有块作用域(在ES6之前)</li></ul></li><li>作用<ul><li>作用域: 隔离变量, 可以在不同作用域定义同名的变量不冲突</li><li>作用域链: 查找变量</li></ul></li><li>区别作用域与执行上下文<ul><li>作用域: 静态的, 编码时就确定了(不是在运行时), 一旦确定就不会变化了</li><li>执行上下文: 动态的, 执行代码时动态创建, 当执行结束消失</li><li>联系: 执行上下文环境是在对应的作用域中的</li></ul></li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul><li><p>理解:</p><ul><li>当嵌套的内部函数引用了外部函数的变量时就产生了闭包</li><li>通过chrome工具得知: 闭包本质是内部函数中的一个对象, 这个对象中包含引用的变量属性</li></ul></li><li><p>作用:</p><ul><li>延长局部变量的生命周期</li><li>让函数外部能操作内部的局部变量</li></ul></li><li><p>写一个闭包程序</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">++</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> fn2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>闭包应用:</p><ul><li>模块化: 封装一些数据以及操作数据的函数, 向外暴露一些行为</li><li>循环遍历加监听</li><li>JS框架(jQuery)大量使用了闭包</li></ul></li><li><p>缺点:</p><ul><li>变量占用内存的时间可能会过长</li><li>可能导致内存泄露</li><li>解决:<ul><li>及时释放 : f = null; //让内部函数对象成为垃圾对象</li></ul></li></ul></li></ul><h2 id="内存溢出与内存泄露"><a href="#内存溢出与内存泄露" class="headerlink" title="内存溢出与内存泄露"></a>内存溢出与内存泄露</h2><ol><li>内存溢出</li></ol><ul><li>一种程序运行出现的错误</li><li>当程序运行需要的内存超过了剩余的内存时, 就出抛出内存溢出的错误</li></ul><ol start="2"><li>内存泄露</li></ol><ul><li>占用的内存没有及时释放</li><li>内存泄露积累多了就容易导致内存溢出</li><li>常见的内存泄露:<ul><li>意外的全局变量</li><li>没有及时清理的计时器或回调函数</li><li>闭包</li></ul></li></ul><h1 id="对象高级"><a href="#对象高级" class="headerlink" title="对象高级"></a>对象高级</h1><h2 id="对象的创建模式"><a href="#对象的创建模式" class="headerlink" title="对象的创建模式"></a>对象的创建模式</h2><ul><li><p>Object构造函数模式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span>obj<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>对象字面量模式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>  <span class="token function-variable function">setName</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构造函数模式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构造函数+原型的组合模式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="继承模式"><a href="#继承模式" class="headerlink" title="继承模式"></a>继承模式</h2><ul><li><p>原型链继承 : 得到方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子类型的原型指向父类型实例</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//有test()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>借用构造函数 : 得到属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">xxx</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx <span class="token operator">=</span> xxx<span class="token punctuation">&#125;</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">xxx<span class="token punctuation">,</span>yyy</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//借用构造函数   this.Parent(xxx)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//child.xxx为'a', 但child没有test()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组合</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">xxx</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx <span class="token operator">=</span> xxx<span class="token punctuation">&#125;</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">xxx<span class="token punctuation">,</span>yyy</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//借用构造函数   this.Parent(xxx)</span><span class="token punctuation">&#125;</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到test()</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//child.xxx为'a', 也有test()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>new一个对象背后做了些什么?</p><ul><li>创建一个空对象</li><li>给对象设置<code>__proto__</code>, 值为构造函数对象的prototype属性值   this.<code>__proto__</code> = Fn.prototype</li><li>执行构造函数体(给对象添加属性/方法)</li></ul></li></ul><h1 id="线程机制与事件机制"><a href="#线程机制与事件机制" class="headerlink" title="线程机制与事件机制"></a>线程机制与事件机制</h1><h2 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h2><ul><li>进程:<ul><li>程序的一次执行, 它占有一片独有的内存空间</li><li>可以通过windows任务管理器查看进程</li></ul></li><li>线程:<ul><li>是进程内的一个独立执行单元</li><li>是程序执行的一个完整流程</li><li>是CPU的最小的调度单元</li></ul></li><li>关系<ul><li>一个进程至少有一个线程(主)</li><li>程序是在某个进程中的某个线程执行的</li></ul></li></ul><h2 id="浏览器内核模块组成"><a href="#浏览器内核模块组成" class="headerlink" title="浏览器内核模块组成"></a>浏览器内核模块组成</h2><ul><li>主线程<ul><li>js引擎模块 : 负责js程序的编译与运行</li><li>html,css文档解析模块 : 负责页面文本的解析</li><li>DOM/CSS模块 : 负责dom/css在内存中的相关处理 </li><li>布局和渲染模块 : 负责页面的布局和效果的绘制(内存中的对象)</li></ul></li><li>分线程<ul><li>定时器模块 : 负责定时器的管理</li><li>DOM事件模块 : 负责事件的管理</li><li>网络请求模块 : 负责Ajax请求</li></ul></li></ul><h2 id="js线程"><a href="#js线程" class="headerlink" title="js线程"></a>js线程</h2><ul><li>js是单线程执行的(回调函数也是在主线程)</li><li>H5提出了实现多线程的方案: Web Workers</li><li>只能是主线程更新界面</li></ul><h2 id="定时器问题"><a href="#定时器问题" class="headerlink" title="定时器问题"></a>定时器问题</h2><ul><li>定时器并不真正完全定时</li><li>如果在主线程执行了一个长时间的操作, 可能导致延时才处理</li></ul><h2 id="事件处理机制-图"><a href="#事件处理机制-图" class="headerlink" title="事件处理机制(图)"></a>事件处理机制(图)</h2><ul><li>代码分类<ul><li>初始化执行代码: 包含绑定dom事件监听, 设置定时器, 发送ajax请求的代码</li><li>回调执行代码: 处理回调逻辑</li></ul></li><li>js引擎执行代码的基本流程: <ul><li>初始化代码===&gt;回调代码</li></ul></li><li>模型的2个重要组成部分:<ul><li>事件管理模块</li><li>回调队列</li></ul></li><li>模型的运转流程<ul><li>执行初始化代码, 将事件回调函数交给对应模块管理</li><li>当事件发生时, 管理模块会将回调函数及其数据添加到回调列队中</li><li>只有当初始化代码执行完后(可能要一定时间), 才会遍历读取回调队列中的回调函数执行</li></ul></li></ul><h2 id="宏队列与微队列"><a href="#宏队列与微队列" class="headerlink" title="宏队列与微队列"></a>宏队列与微队列</h2><ul><li><p>宏列队: 用来保存待执行的宏任务(回调), 比如: 定时器回调/DOM事件回调/ajax回调</p></li><li><p>微列队: 用来保存待执行的微任务(回调), 比如: promise的回调/MutationObserver的回调</p></li></ul><p>JS执行时会区别这2个队列，JS引擎首先必须先执行所有的初始化同步任务代码，每次准备取出第一个宏任务执行前, 都要将所有的微任务一个一个取出来执行</p><p>执行顺序：同步任务&gt;微队列&gt;宏队列</p><p>注意点：</p><ul><li>Promise的excutor执行器与then()\catch()方法为同步任务，在then()\catch()中定义的方法为微队列的Promise回调</li><li>在链式操作中，then()会作为同步方法直接执行，而then()中定义的回调函数会放入微队列中，等待微队列中的其他方法执行完再继续执行此回调函数，然后再执行下一个then()</li><li>当遇到await时，await的返回值不是一个Promise，则会阻塞该async函数的下面的执行，先去执行外面的同步任务</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//3 2 4 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">// 2 5 3 4 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">first</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment">//因为下面已经调用了resolve(1)，改变了此Promise的状态，所以不会生效</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">// 3 7 4 1 2 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//1 7 2 3 8 4 6 5 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span> <span class="token comment">//同步任务2</span>    <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//执行函数后阻塞线程，因为返回值不是Promise，因此会先让外面的同步任务先执行</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span> <span class="token comment">//执行完同步任务后回来执行微任务6</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span>  <span class="token comment">//同步任务3</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span>  <span class="token comment">//同步任务1                      </span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span>  <span class="token comment">//宏任务8</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//执行函数</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span>  <span class="token comment">//阻塞后优先执行同步任务4</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span>  <span class="token comment">//微任务7</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span> <span class="token comment">//同步任务5</span><span class="token comment">/*     输出:       script start      async1 start      async2      promise1      script end      async1 end      promise2      setTimeout     */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="H5-Web-Workers"><a href="#H5-Web-Workers" class="headerlink" title="H5 Web Workers"></a>H5 Web Workers</h2><ul><li><p>可以让js在分线程执行</p></li><li><p>Worker</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">'worker.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span><span class="token function-variable function">onMessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>event<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span> <span class="token operator">:</span> 用来接收另一个线程发送过来的数据的回调worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span> <span class="token operator">:</span> 向另一个线程发送数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>问题:</p><ul><li>worker内代码不能操作DOM更新UI</li><li>不是每个浏览器都支持这个新特性</li><li>不能跨域加载JS</li></ul></li><li><p>svn版本控制</p></li><li><p>svn server</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端开发 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2022/05/16/ecmascript/"/>
      <url>/2022/05/16/ecmascript/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>作用域的含义：变量在什么范围内是可用的</p><p>每一个{ }都算是一个块级作用域</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'wwh'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>没有块级作用域会引起的问题</strong></p><p>var属于全局变量，在哪里都能使用，如果使用let定义name，在函数外会打印undefined</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义一个函数变量，本意是为了打印出if中的name</span><span class="token keyword">var</span> func<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">'wwh'</span><span class="token punctuation">;</span>    <span class="token function-variable function">func</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为定义的是用var，所以把函数调用拿到块之外也可以调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> func<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">'wwh'</span><span class="token punctuation">;</span>    <span class="token function-variable function">func</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这样如果别人定义了与name相同的变量名，会改掉块内name的值，此时函数再次打印就不会是我们原本定义的那个name值了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> func<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">'wwh'</span><span class="token punctuation">;</span>    <span class="token function-variable function">func</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>name<span class="token operator">=</span><span class="token string">'wh'</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样是作用域的问题，以下代码无论是哪个按钮被点击都会显示第五个按钮被点击，因为他点击时for循环已经在给其他按钮绑定单机响应函数时遍历完毕，i已经变成5了</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'个按钮被点击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以使用闭包函数来解决这个问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//每次调用这个创建单机函数就给他传入当前的i作为参数</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第'</span><span class="token operator">+</span>num<span class="token operator">+</span><span class="token string">'个按钮被点击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为函数本身就有是一个作用域，当我们将变量作为参数传入时，外面无论怎么更改都不会影响到函数内传入参数的值</p><p>总结：ES5之前因为if和for都没有块级作用域的概念，所以很多时候外面都必须借助于function的作用域来解决应用外面变量的问题</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>ES6中，加入了let（定义变量），let它<strong>存在块级作用域</strong>，用let定义后的变量后<strong>不可以再次重复声明</strong>，可以避免变量重复声明导致的污染</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'个按钮被点击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时已经能实现上面使用闭包函数实现的效果了，因为使用let定义i后，for后面的大括号已经有了属于自己的作用域了，作用域内的i不会随着for循环而更改，也就是<strong>不存在变量提升也不影响作用域链</strong></p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>使用const将修饰的标识符<strong>设置为常量</strong>，<strong>不可再次赋值</strong>，当我们修饰的标识符不会再次被赋值时，就可以使用const来保证数据的安全性</li><li>在使用const定义标识符时<strong>必须进行赋值</strong></li><li>常量的含义时是指向的对象不能修改，但是可以改变对象内部的属性</li><li>在ES6开发中，优先使用const，只有需要改变某一个标识符的时候才使用let，避免在以后的开发中无意修改了他</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'个按钮被点击'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>btns <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'wwh'</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'wh'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将obj对象赋值给const后，相当于const指向的是obj的内存地址，这个内存地址无法更改，新的对象有新的内存地址，因此无法更改const赋值完成了的内容</p><hr><p>问：什么是暂时性死区？</p><p>答：在同一个块级作用域中，使用let、const定义的变量不存在变量提升，因此在作用域开始到此变量被定义的这一段代码中，被称为此变量的暂时性死区。</p><h2 id="增强写法"><a href="#增强写法" class="headerlink" title="增强写法"></a>增强写法</h2><p>对象字面量可以边声明边赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//常规定义对象的写法</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'wwh'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//对象字面量的写法</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'wwh'</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性的增强写法"><a href="#属性的增强写法" class="headerlink" title="属性的增强写法"></a>属性的增强写法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> name<span class="token operator">=</span><span class="token string">'wwh'</span><span class="token punctuation">;</span><span class="token comment">//ES5中属性的写法</span><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span>id<span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span>name<span class="token punctuation">&#125;</span><span class="token comment">//ES6中属性的写法</span><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>    id<span class="token punctuation">,</span>    name<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数的增强写法"><a href="#函数的增强写法" class="headerlink" title="函数的增强写法"></a>函数的增强写法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//ES5中函数的写法</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">run</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">eat</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//ES6中函数的写法</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环的增强写法"><a href="#循环的增强写法" class="headerlink" title="循环的增强写法"></a>循环的增强写法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//普通写法</span><span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> totalPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        totalPrice <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> totalPrice<span class="token punctuation">&#125;</span><span class="token comment">//in写法：将所有对象的内容作为循环变量</span><span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> totalPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        totalPrice <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> totalPrice<span class="token punctuation">&#125;</span><span class="token comment">//of写法：直接将单个对象的内容作为循环变量</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    totalPrice <span class="token operator">+=</span> item<span class="token punctuation">.</span>price <span class="token operator">*</span> item<span class="token punctuation">.</span>count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> totalPrice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="数组的解构"><a href="#数组的解构" class="headerlink" title="数组的解构"></a>数组的解构</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token string">'ls'</span><span class="token punctuation">,</span><span class="token string">'ww'</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> name1 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> name2 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> name3 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name1<span class="token punctuation">,</span>name2<span class="token punctuation">,</span>name3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//zs ls ww</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token string">'ls'</span><span class="token punctuation">,</span><span class="token string">'ww'</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name1<span class="token punctuation">,</span>name2<span class="token punctuation">,</span>name3<span class="token punctuation">]</span> <span class="token operator">=</span> names<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name1<span class="token punctuation">,</span>name2<span class="token punctuation">,</span>name3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//zs ls ww</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">'man'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token keyword">const</span> gender <span class="token operator">=</span> obj<span class="token punctuation">.</span>gender<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//zhangsan 10 man</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以将其写为以下形式，他会自己一一对应该对象属性然后赋予外面的name,age,gender</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>        <span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">'man'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//zhangsan 10 man</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类的解构"><a href="#类的解构" class="headerlink" title="类的解构"></a>类的解构</h3><p>当我们要解构一个自定义的类的方法出来全局使用的时候，需要注意的是我们类中的方法<strong>不应该有this的指向</strong>，因为解构出来的方法会使此方法的this指向发生错误。</p><h2 id="参数赋值"><a href="#参数赋值" class="headerlink" title="参数赋值"></a>参数赋值</h2><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>我们在传参的时候如果要传入多个参数可以在函数中传入可变参数，输出是一个数组，可以结合数组的一些方法</p><p>rest参数必须要放在参数的最后，这样其他有对应的赋值会在对应的变量上，其他值会形成一个数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//控制台输出10 20</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//控制台输出 10 20 30 40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>扩展运算符可以将一个数组转化为一个参数序列，扩展运算符不能和<code>for...of...</code>同时对一个结果进行操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PERSON</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token string">'ls'</span><span class="token punctuation">,</span><span class="token string">'ww'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token constant">PERSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出['zs','ls','ww']</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token constant">PERSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出'zs','ls','ww'，相当于传参print('zs','ls','ww');</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用场景：</p><ul><li><p>数组的合并</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> kuaizi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'王太利'</span><span class="token punctuation">,</span><span class="token string">'肖央'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> fenghuang <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'曾毅'</span><span class="token punctuation">,</span><span class="token string">'玲花'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//const zuixuanxiaopingguo = kuaizi.concat(fenghuang);</span><span class="token keyword">const</span> zuixuanxiaopingguo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>kuaizi<span class="token punctuation">,</span> <span class="token operator">...</span>fenghuang<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zuixuanxiaopingguo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数组的克隆</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sanzhihua <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sanyecao <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>sanzhihua<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sanyecao<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  ['E','G','M']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>将为数组转为真数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换前其实是一个对象</span><span class="token keyword">const</span> divArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>divs<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// arguments</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>ES6允许给函数参数赋予初始值，通常放在最后一位，并且允许与解构赋值组合使用，如果没有传则使用相对应的默认值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>host<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>    <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">"root"</span><span class="token punctuation">,</span>    <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">"root"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>当我们要把一个函数作为另一个函数的参数时，我们经常使用箭头函数来简化代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//普通函数表达式写法</span><span class="token comment">//无参数</span><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//一个参数</span><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//两个参数</span><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//箭头函数写法</span><span class="token comment">//无参数</span><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//一个参数(可以省略参数的括号)</span><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token parameter">num1</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1<span class="token operator">*</span>num1<span class="token punctuation">&#125;</span><span class="token comment">//二个参数</span><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//箭头函数返回值</span><span class="token comment">//当箭头函数的函数代码块中只有一行代码时</span><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span> <span class="token operator">=></span> num1<span class="token operator">+</span>num2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h3><p>箭头函数中的this指向的是父级作用域中的this，他会向箭头函数的外层一层一层地查找，直到有this的定义</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//window</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//因为函数b在对象中，因此我们在调用此函数时一定是obj.b(),因此这个箭头函数的this指向ob</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment">//obj</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：箭头函数不能作为<strong>构造实例化对象</strong>并且其<strong>不能使用arguments</strong>，也没有办法使用<strong>yield命令</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>gender</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">&#125;</span><span class="token comment">//会报错</span><span class="token comment">/*let Person = (name,gender) =>&#123;this.name = name,this.gender = gender&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>适合与this无关的回调：定时器，数组方法的回调</p><p>不适合this有关的回调：事件回调、对象的方法</p><h2 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h2><p>命令式编程/声明式编程</p><p>面向对象编程（第一公民：函数）/面向过程编程（第一公民：函数）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">//定义一个数组</span>    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//需求一：取出所有小于100的数字</span>    <span class="token keyword">let</span> newNumArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">of</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            newNumArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNumArr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//需求二：将所有小于100的数字进行转化：全部*2</span>    <span class="token keyword">let</span> new2NumArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">of</span> newNumArr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        new2NumArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new2NumArr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//需求三：将所有new2NumArr数字相加，得到最终的结果</span>    <span class="token keyword">let</span> totalNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">of</span> new2NumArr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        totalNum <span class="token operator">+=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>totalNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>可以为其传入一个回调函数，根据数组内容长度的不同，能自动调用回调函数不同的次数</p><p>filter中的回调函数有一个要求：必须返回一个boolean值</p><ul><li>当返回true时，函数内部会自动将这次的n加入到新的数组内</li><li>当返回false时，函数内部会自动过滤掉这个n</li></ul><p>在经过过滤后，filter会生成一个新的数组作为filter函数执行的返回值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义一个数组</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//需求一：取出所有小于100的数字</span><span class="token keyword">let</span> newNumArr <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>可以传入一个回调函数，根据数组内容长度的不同，能自动调用回调函数不同的次数</p><p>map中的回调函数可以返回一个值，我们可以对这个值进行操作</p><p>在经过一系列map调用回调函数后，map也会生成一个新的数组作为map函数执行的返回值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//需求二：将所有小于100的数字进行转化：全部*2</span><span class="token keyword">let</span> new2NumArr <span class="token operator">=</span> newNumArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>至少传入两个参数</p><p>reduce的作用是对数组中所有的内容进行汇总，数组有多少元素回调函数就调用几次</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">new2NumArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">preValue <span class="token punctuation">,</span> num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//遍历四次</span><span class="token comment">//第一次：preValue:0(我们传入的第二个参数),num:20</span><span class="token comment">//第二次：preValue:1(回调函数的返回值),num:40</span><span class="token comment">//第三次：preValue:1(回调函数的返回值),num:80</span><span class="token comment">//第四次：preValue:1(回调函数的返回值),num:100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//需求三：将所有new2NumArr数字相加，得到最终的结果</span><span class="token keyword">let</span> new3NumArr <span class="token operator">=</span> new2NumArr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">preValue <span class="token punctuation">,</span> num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> preValue <span class="token operator">+</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高阶函数写法"><a href="#高阶函数写法" class="headerlink" title="高阶函数写法"></a>高阶函数写法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> totalNum <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">preValue<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> preValue <span class="token operator">+</span> n <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="箭头函数写法"><a href="#箭头函数写法" class="headerlink" title="箭头函数写法"></a>箭头函数写法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> totalNum <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=></span> n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>reduce第二个参数的默认值为0，因此在使用箭头函数时可以省略不写</p><p>箭头函数只有当return只有一行时才可以省略大括号</p><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>ES6的一种全新的数据类型，类似于字符串，但是其内容是唯一的，并且他的值无法进行运算</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建Symbol</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">typeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Symbol(),"Symbol"</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'尚硅谷'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'尚硅谷'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token operator">===</span>s3<span class="token punctuation">)</span><span class="token comment">//false</span><span class="token comment">//Symbol.for 创建</span><span class="token keyword">let</span> s4 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'尚硅谷'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s5 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'尚硅谷'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//let result = s + 100;</span><span class="token comment">//let result = s > 100;</span><span class="token comment">//let result = s + s;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们想要向一个对象添加方法时，我们不知道这个方法内部是否已经定义该方法，此时可以利用Symbol的唯一性来添加方法，此时这些方法可以共存</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//向对象中添加方法 up down</span><span class="token keyword">let</span> game <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'俄罗斯方块'</span><span class="token punctuation">,</span>    <span class="token function-variable function">up</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">down</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//声明一个对象</span><span class="token keyword">let</span> methods <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">up</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">down</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>game<span class="token punctuation">[</span>methods<span class="token punctuation">.</span>up<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我可以改变形状"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>game<span class="token punctuation">[</span>methods<span class="token punctuation">.</span>down<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我可以快速下降!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> youxi <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"狼人杀"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我可以发言"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'zibao'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以自爆'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>youxi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><p><img src="D:\课程资料\前端开发\自学笔记\img\Symbol相关方法.png" alt="QQ截图20210816004747"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'检测'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  arr2<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token boolean">false</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署了Iterator接口，就可以完成便利操作</p><ol><li>ES6创造了一种新的遍历命令 <code>for...of</code>主要用来遍历循环对象的value（<code>for...in</code>主要用来遍历循环对象的key），Iterator主要供<code>for...of</code>消费</li><li>原生具备iterator接口的数据（即可用<code>for...of</code>遍历的）<ol><li>Array</li><li>Arguments</li><li>Set</li><li>Map</li><li>String</li><li>TypedArray</li><li>NodeList</li></ol></li><li>工作原理<ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>调用其内置的next()方法可以让指针自动指向下一个对象</li><li>每次调用next()返回一个包含value和done属性的对象</li></ol></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">//声明一个数组</span>    <span class="token keyword">const</span> xiyou <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'唐僧'</span><span class="token punctuation">,</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span><span class="token string">'猪八戒'</span><span class="token punctuation">,</span><span class="token string">'沙僧'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//使用 for...of 遍历数组</span>    <span class="token comment">// for(let v of xiyou)&#123;</span>    <span class="token comment">//     console.log(v);</span>    <span class="token comment">// &#125;</span>    <span class="token keyword">let</span> iterator <span class="token operator">=</span> xiyou<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用对象的next方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据此原理可以手动实现迭代器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> banji <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"YM"</span><span class="token punctuation">,</span>  <span class="token literal-property property">stus</span><span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token string">'ming'</span><span class="token punctuation">,</span><span class="token string">'ning'</span><span class="token punctuation">,</span><span class="token string">'tian'</span><span class="token punctuation">,</span><span class="token string">'knight'</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>_this<span class="token punctuation">.</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span>_this<span class="token punctuation">.</span>stus<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">done</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span>          index<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> result        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token literal-property property">done</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> banji<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>ES6提供的一种异步编程解决方案</p><ul><li>在函数声明时使用*来定义一个生成器</li><li>生成器函数返回的结果是迭代器对象，可以使用迭代器的方法</li><li>yield相当于暂停标记，每次调用一次next()方法执行一段代码</li><li>next()可以传递实参，作为上一个yield语句的返回值</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//AAA</span>  <span class="token keyword">let</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//BBB</span>  <span class="token keyword">yield</span> <span class="token number">2</span>  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token string">'AAA'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'BBB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以定义生成器来处理异步编程</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用定时器定义三个要按顺序执行的方法，模拟异步编程</span><span class="token keyword">function</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">"用户信息"</span>    iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">//第二个next()，参数传给第一个yield作为返回值</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">"订单信息"</span>    iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">//第三个next()，参数传给第二个yield作为返回值</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">"商品信息"</span>    iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">//第四个next()，参数传给第三个yield作为返回值</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用生成器运行上面的三个方法</span><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//定义变量接收next()传过来的数据</span>  <span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> orders <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> goods <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个next()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>见Promise笔记汇总专题</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>ES6新的数据结构（集合），类似于数组，但是成员的值都是唯一的，可以使用扩展运算符和<code>for...of</code>进行遍历</p><table><thead><tr><th>属性|方法</th><th>作用</th></tr></thead><tbody><tr><td>size</td><td>返回集合的个数</td></tr><tr><td>add</td><td>增加一个新元素，返回当前集合</td></tr><tr><td>delete</td><td>删除元素，返回Boolean值</td></tr><tr><td>has</td><td>检测集合中是否包含某个元素，返回Boolean值</td></tr><tr><td>clear</td><td>清空集合，返回undefined</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义集合</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 添加元素</span>s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token comment">// 删除元素</span>s2<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token comment">// 检测元素</span><span class="token keyword">let</span> result <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token comment">// 清空元素</span>s3<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 遍历集合</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>s3<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 数组去重</span><span class="token comment">//1、利用Set()唯一值的特性，将数组直接作为参数传入</span><span class="token comment">//2、用扩展运算符加上[]将结果转换成数组</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 数组交集</span><span class="token comment">//1、先将arr1转成数组，用高阶函数过滤</span><span class="token comment">//2、将arr2放入Set()，使用has()方法判断arr1中的数是否存在于arr2</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 数组并集</span><span class="token comment">//1、先用扩展运算符合并两个数组</span><span class="token comment">//2、再用Set()去重之后转换成数组</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">// 数组差集</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>WeakSet结构与Set类似，也是一个不重复的值的集合，但他与Set有两点不同：</p><ul><li><p>WeakSet的成员只能是对象，不能使其他类型的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// TypeError: Invalid value used in weak set</span>ws<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// TypeError: invalid value used in weak set</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组内成员是Object</span><span class="token keyword">const</span> ws1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// WeakSet &#123;[1, 2], [3, 4]&#125;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组内成员不是Object</span><span class="token keyword">const</span> ws2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Uncaught TypeError: Invalid value used in weak set(…)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>WeakSet中的对象都是弱引用，不计入垃圾回收机制。</p></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>也是ES6的新的数据结构，类似于对象，是键值对的集合，但是键的范围不限于字符串，各种类型的值包括对象都能当作键，可以使用扩展运算符和<code>for...of</code>进行遍历</p><table><thead><tr><th>属性|方法</th><th>作用</th></tr></thead><tbody><tr><td>size</td><td>返回Map元素的个数</td></tr><tr><td>set</td><td>添加元素，返回当前Map</td></tr><tr><td>get</td><td>返回键名对象的键值</td></tr><tr><td>has</td><td>检测Map中是否包含某个元素，返回Boolean值</td></tr><tr><td>clear</td><td>清空Map，返回undefined</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建Map</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 放入键和值</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'wwh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">school</span><span class="token operator">:</span><span class="token string">'bilibili'</span><span class="token punctuation">&#125;</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'尚硅谷'</span><span class="token punctuation">,</span><span class="token string">'coderwhy'</span><span class="token punctuation">,</span><span class="token string">'黑马'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// Map长度</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除key为'name'的值</span>m<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token comment">// 取key对应的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清除map</span>m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>WeakMap的结构也与Map的结构类似，也是用于生成键值对的集合，同样也有两点区别（与Set与WeakSet的区别大致相同）：</p><ul><li>WeakMap只能接受对象作为键名（null除外）。</li><li>WeakMap的键名所指的对象同样也是弱引用，也不计入垃圾回收机制。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// TypeError: 1 is not an object!</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// TypeError: Invalid value used as weak map key</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// TypeError: Invalid value used as weak map key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> e1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> e2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span>e1<span class="token punctuation">,</span> <span class="token string">'foo 元素'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>e2<span class="token punctuation">,</span> <span class="token string">'bar 元素'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 不需要 e1 和 e2 的时候</span><span class="token comment">// 必须手动删除引用</span>arr <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>arr <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> wm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token string">'some information'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token comment">// "some information"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>弱引用：即垃圾回收机制不会考虑WeakSet中对对象的引用，如果其他对象不再引用该对象，JS的垃圾回收机制不会考虑该对象是否存在于WeakSet中而直接释放。</p><p>WeakSet和WeakMap经常用于存储一些临时的引用数据，因为其是弱引用的特性，可以避免忘记使用完该对象后未释放导致的内存泄漏的问题。</p><p>因为他们中的数据成员的个数是不确定的，因此无法进行遍历，也无法获取他们的size。</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>ES5对原型链的封装，算是一个语法糖</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//ES5构造函数的写法</span><span class="token keyword">function</span> <span class="token function">Phone</span><span class="token punctuation">(</span><span class="token parameter">brand<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">&#125;</span><span class="token class-name">Phone</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">call</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> Huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token string">"Huawei"</span><span class="token punctuation">,</span><span class="token number">5222</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Huawei<span class="token punctuation">)</span><span class="token punctuation">;</span>Huawei<span class="token punctuation">.</span>call<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 构造方法名固定为construct</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">brand<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price  <span class="token punctuation">&#125;</span>  <span class="token comment">// 必须使用ES6的增强写法</span>  <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> Huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token string">"Huawei"</span><span class="token punctuation">,</span><span class="token number">5232</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Huawei<span class="token punctuation">)</span><span class="token punctuation">;</span>Huawei<span class="token punctuation">.</span>call<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>如果我们不在构造函数的显式原型对象中添加方法和属性，其实例对象是没法访问到的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Phone<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"phone"</span>Phone<span class="token punctuation">.</span><span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"change the world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Phone</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token string">'15cm'</span><span class="token keyword">let</span> Huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Huawei<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Huawei<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//ES6写法</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> name <span class="token operator">=</span> <span class="token string">'phone'</span>  <span class="token keyword">static</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'change the world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Phone</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token string">'15cm'</span><span class="token keyword">let</span> Huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Huawei<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Huawei<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//ES5构造函数的继承</span><span class="token comment">// 父类</span><span class="token keyword">function</span> <span class="token function">Phone</span><span class="token punctuation">(</span><span class="token parameter">brand<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price  <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">&#125;</span><span class="token comment">// 父类方法</span><span class="token class-name">Phone</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">call</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'phone call'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 子类</span><span class="token keyword">function</span> <span class="token function">SmartPhone</span><span class="token punctuation">(</span><span class="token parameter">brand<span class="token punctuation">,</span>price<span class="token punctuation">,</span>color<span class="token punctuation">,</span>size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 通过call将子类的属性传给父类，并且修改this指向</span>  <span class="token function">Phone</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color  <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">&#125;</span><span class="token comment">// 用于继承Phone中的方法</span><span class="token class-name">SmartPhone</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 修正SmartPhone的原型对象的构造函数的指向</span><span class="token class-name">SmartPhone</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>construct <span class="token operator">=</span> SmartPhone<span class="token comment">// 子类方法</span><span class="token class-name">SmartPhone</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">photo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'phone phtot'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">SmartPhone</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">game</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'phone game'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以封装一个继承函数，核心原理为，但我们利用一个空对象来作为跳板，这样就不会使父类的显式原型指向错误</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">SmartPhone</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token parameter">Child<span class="token punctuation">,</span> Parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义一个空对象作为原型链的跳板</span>    <span class="token keyword">var</span> <span class="token function-variable function">F</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//将空对象的原型指向父类的原型</span>    <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>    <span class="token comment">//将子类的原型指向跳板的实例对象</span>    <span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//修正子类原型对象构造函数的指向</span>    <span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span>    Child<span class="token punctuation">.</span>uber <span class="token operator">=</span> <span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>　　<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>ES6的继承是通过extends关键字来实现的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">brand<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price  <span class="token punctuation">&#125;</span>  <span class="token comment">// 使用class使内部方法必须使用增强写法</span>  <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'phone call'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SmartPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">brand<span class="token punctuation">,</span>price<span class="token punctuation">,</span>color<span class="token punctuation">,</span>size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 对应ES5中的Phone.call(this,brand,price)</span>    <span class="token keyword">super</span> <span class="token punctuation">(</span>brand<span class="token punctuation">,</span>price<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size  <span class="token punctuation">&#125;</span>  <span class="token function">photo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"SmartPhone photo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token constant">MI</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmartPhone</span><span class="token punctuation">(</span><span class="token string">"xiaomi"</span><span class="token punctuation">,</span><span class="token string">'999'</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">,</span><span class="token string">'15cm'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">MI</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a><strong>重写</strong></h3><p>我们可以直接在子类中定义一个与父类方法同名的方法，这样子就能对父类同名方法进行重写（就近原则）</p><h3 id="get-set"><a href="#get-set" class="headerlink" title="get\set"></a>get\set</h3><p>使用get定义方法，方法名为属性名，当该属性被读取时会自动执行get方法内部的函数，并且他的返回值就是读取到的属性值</p><p>使用set定义方法，方法名为属性名，当该属性被修改时会自动执行set方法内部的函数，他需要将修改后新的属性值作为参数传入，并且可以对其修改</p><p>get方法一般用于封装一些对象的动态属性，如平均数。set方法可以添加对值的控制与判断，如是否时数字等。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span>  <span class="token keyword">get</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'price is readed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'999'</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">set</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'New price is '</span> <span class="token operator">+</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phone<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>phone<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token string">'888'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h2><p>新增了二进制和八进制的写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0b11</span><span class="token punctuation">;</span><span class="token comment">//二进制</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">0o11</span><span class="token punctuation">;</span><span class="token comment">//八进制</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment">//十进制</span><span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token number">0x11</span><span class="token punctuation">;</span><span class="token comment">//十六进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3 9 11 17</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Number.EPSILON</td><td>是Js中最小的精度，其值非常小</td></tr><tr><td>Number.isFinite</td><td>检测一个数是否为无线数</td></tr><tr><td>Number.isNaN</td><td>检测一个数的值是否为NaN</td></tr><tr><td>Number.parseInt</td><td>字符串转整数</td></tr><tr><td>Number.parseFloat</td><td>字符串转浮点数</td></tr><tr><td>Number.isIntger</td><td>判断值是否为整数</td></tr><tr><td>Math.trunc</td><td>将小数抹除</td></tr><tr><td>Math.sign</td><td>判断一个数是正数负数还是零（返回1、0、-1）</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token keyword">function</span> <span class="token function">equal</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'3.14love'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'3.14love'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.14</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Object.is</td><td>判断两个值是否相等（与===作用类似，除了对两个NaN的判断）</td></tr><tr><td>Object.assign</td><td>对象的合并（第一个参数作为模板对象，第二个参数作为要覆盖的对象，类似数组合并）</td></tr><tr><td>Object.setPrototypeOf</td><td>将参数二设置为参数一的原型对象</td></tr><tr><td>Object.getPrototypeOf</td><td>获取参数的原型对象</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>  <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">3306</span><span class="token punctuation">,</span>  <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">"root"</span><span class="token punctuation">,</span>  <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">"123456"</span><span class="token punctuation">,</span>  <span class="token literal-property property">test1</span><span class="token operator">:</span><span class="token string">"test1"</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">"http://baidu.com"</span><span class="token punctuation">,</span>  <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">3308</span><span class="token punctuation">,</span>  <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">"wuweihan"</span><span class="token punctuation">,</span>  <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">"111111"</span><span class="token punctuation">,</span>  <span class="token literal-property property">test2</span><span class="token operator">:</span><span class="token string">"test2"</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*&#123;    host: "http://baidu.com"    password: "111111"    port: 3308    test1: "test1"    test2: "test2"    username: "wuweihan"&#125;*/</span><span class="token keyword">const</span> school <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'qzqz'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> city <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">xiaoqu</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'jinshan'</span><span class="token punctuation">,</span><span class="token string">'tianhou'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>school<span class="token punctuation">,</span>city<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>school<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*    name: "qzqz"    __proto__:        xiaoqu: (2) ["jinshan", "tianhou"]        __proto__: Object*/</span><span class="token comment">/*    xiaoqu: (2) ["jinshan", "tianhou"]    __proto__: Object*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>模块化是指讲一个搭的程序文件拆分成许多小文件，然后把小文件组合起来</p><p>好处：</p><ul><li>防止命名冲突</li><li>代码复用</li><li>易于维护</li></ul><p>ES6之前的模块化规范有：</p><ul><li>CommonJS：NodeJS、Browserify</li><li>AMD：requireJS</li><li>CMD：seaJS</li></ul><p>模块化最基础的封装，即，在匿名函数内定义一个对象，给对象添加各种方法与属性，之后将这个对象返回，并且定义一个值去接受这个立即执行函数的返回值，我们就可以通过这个值去取得模块内对象的各种属性和方法，并且不会与其他js代码产生代码的覆盖</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//module.js</span><span class="token keyword">var</span> moduleA <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span>obj<span class="token punctuation">.</span><span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//main.js</span><span class="token keyword">if</span><span class="token punctuation">(</span>moduleA<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"模块属性获取成功"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>moduleA<span class="token punctuation">.</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token string">"模块方法调用成功"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleA<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>（了解）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导出</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">flag</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//CommonJS模块</span><span class="token comment">//导入</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>test<span class="token punctuation">,</span>demo<span class="token punctuation">,</span>flag<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moduleA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等同于</span><span class="token keyword">let</span> _mA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moduleA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> test <span class="token operator">=</span> _mA<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">let</span> demo <span class="token operator">=</span> _mA<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">let</span> flag <span class="token operator">=</span> _mA<span class="token punctuation">.</span>flag<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>模块功能主要有两个命令构成：export 和 import</p><ul><li>export：该命令用于规定模块的对外接口</li><li>import：该命令用于输入其他模块提供的功能</li></ul><p>在引用模块的script标签上加上一个属性type=”module”</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./app.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//moduleA.js</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//1、导出对应的属性名</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>    flag<span class="token punctuation">,</span>sum<span class="token punctuation">&#125;</span><span class="token comment">//2、直接在声明前面加上export</span><span class="token comment">//导出属性</span><span class="token keyword">export</span> <span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//导出方法</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//导出类</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//3、使用default关键字</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token string">"福建泉州"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//app.js</span><span class="token comment">//1、通配符导入一个文件内所有的属性，用as起一个模块对象的别名</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m1 <span class="token keyword">from</span> <span class="token string">"./moduleA.js"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"模块测试"</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2、使用解构赋值导入该模块内的对应的属性</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> num1<span class="token punctuation">,</span>add<span class="token punctuation">,</span>Person<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./moduleA.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//3、当使用expotr default导出时自定义名称</span><span class="token keyword">import</span> addr <span class="token keyword">from</span> <span class="token string">"./moduleA.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用export default导出可以不用起名字，而在导入的时候不用添加大括号，而是自定义名称</p><p>在导入时如果有同名的可以使用as关键字</p><p>注意：export default在同一个模块中只能存在一个</p><p>在导入的时候除了以上几种情况时，可以统一全部导入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> moduleA <span class="token keyword">from</span> <span class="token string">'./moduleA.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleA<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>因为不是所有浏览器都支持ES6的新特性，因此我们需要使用babel将ES6转化为ES5，打包后再进行调用，以保证兼容性</p><p>具体步骤：</p><ol><li><p>安装工具</p><ol><li>babel-cli：babel的一个命令行的工具</li><li>babel-preset-env：一个babel预设包，能将ES的新特性转化为ES5</li><li>browserify：打包工具（在项目中会使用webpack，但是需要额外的配置）</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//初始化npm</span>npm init <span class="token operator">--</span>yes<span class="token comment">//安装</span>npm i babel<span class="token operator">-</span>cli babel<span class="token operator">-</span>preset<span class="token operator">-</span>env browserify <span class="token operator">-</span><span class="token constant">D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用babel将ES6转化ES5</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用babel转换</span><span class="token comment">//1、局部安装babel要加上npx</span><span class="token comment">//2、第一个参数为存放js文件的目录 </span><span class="token comment">//3、-d 后的参数为要存放生成的文件的目录，目录如果不存在会自动创建</span><span class="token comment">//4、--presets指定转化包</span>npx babel src<span class="token operator">/</span>js <span class="token operator">-</span>d dist<span class="token operator">/</span>js <span class="token operator">--</span>presets<span class="token operator">=</span>babel<span class="token operator">-</span>preset<span class="token operator">-</span>env<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用browserify打包</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1、第一个参数为要打包的目录（模块引入的主js文件）</span><span class="token comment">//2、-o 后面的参数为生成的bundle.js文件的位置</span>npx browserify dist<span class="token operator">/</span>js<span class="token operator">/</span>test<span class="token punctuation">.</span>js <span class="token operator">-</span>o dist<span class="token operator">/</span>bundle<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在html页面内调用</p><p>转化后的暴露语法规范为commonjs的语法规范，使用script标签后可以省略type=”module”，直接引入转化打包好的bundle.js文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../dist/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="npm包引用"><a href="#npm包引用" class="headerlink" title="npm包引用"></a>npm包引用</h3><p>需求：使用npm包引入jquery后改变主页面的背景颜色</p><p>步骤：</p><ol><li><p>使用npm包下载jquery</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//i:install的简写</span>npm i jquery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在开发文件夹src的主文件中引入jquery，并且使用jquery改变背景色</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">'jquery'</span><span class="token comment">//ES5写法：const $ = require('jquery')</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>重新转化打包</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//转化</span>npx babel src<span class="token operator">/</span>js <span class="token operator">-</span>d dist<span class="token operator">/</span>js <span class="token operator">--</span>presets<span class="token operator">=</span>babel<span class="token operator">-</span>preset<span class="token operator">-</span>env<span class="token comment">//打包</span>npx browserify dist<span class="token operator">/</span>js<span class="token operator">/</span>app<span class="token punctuation">.</span>js <span class="token operator">-</span>o dist<span class="token operator">/</span>bundle<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="ES7语法"><a href="#ES7语法" class="headerlink" title="ES7语法"></a>ES7语法</h1><p>新增了数组内容判断语法includes()：判断所传参数是否存在于数组内部</p><p>简化了幂运算的写法：x**y 相当于Math.pow(x,y)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sidamingzhu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'西游记'</span><span class="token punctuation">,</span><span class="token string">'红楼梦'</span><span class="token punctuation">,</span><span class="token string">'三国演义'</span><span class="token punctuation">,</span><span class="token string">'水浒传'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sidamingzhu<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'西游记'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sidamingzhu<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'简爱'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES8语法"><a href="#ES8语法" class="headerlink" title="ES8语法"></a>ES8语法</h1><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>ES8中使用async和await两种语法结合可以让异步代码像同步代码一样，详情见Promise笔记汇总专题</p><h2 id="对象扩展-1"><a href="#对象扩展-1" class="headerlink" title="对象扩展"></a>对象扩展</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Object.keys</td><td>获取对象的所有键</td></tr><tr><td>Object.values</td><td>获取对象的所有值</td></tr><tr><td>Object.entries</td><td>将键和值按照数组的形式输出，可用来创建Map</td></tr><tr><td>Object.getOwnPropertyDescriptors</td><td>打印出此对象包括对其的描述，有利于对象深拷贝</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"wwh"</span><span class="token punctuation">,</span>  <span class="token literal-property property">phone</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'18959268130'</span><span class="token punctuation">,</span><span class="token string">'13328577199'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">// 查询所有键</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询所有值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将键和值按照数组的形式输出，可用来创建Map</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个对象，第一个参数为该对象的原型对象，第二个为要创建的对象</span><span class="token comment">// 第二个参数每个对象内的属性值都有其详细的描述</span><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">'wwh'</span><span class="token punctuation">,</span>    <span class="token literal-property property">writable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//打印出此对象包括对其的描述，有利于对象深拷贝</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES9语法"><a href="#ES9语法" class="headerlink" title="ES9语法"></a>ES9语法</h1><p>ES9的Rest参数与spread扩展运算符不仅仅支持数组，还支持对象</p><h2 id="Rest可变参数"><a href="#Rest可变参数" class="headerlink" title="Rest可变参数"></a>Rest可变参数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//对象赋值的普通写法</span><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>host<span class="token punctuation">,</span>port<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>  <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">3306</span><span class="token punctuation">,</span>  <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">'root'</span><span class="token punctuation">,</span>  <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">'root'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/*localhost3306rootroot*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用rest参数可以把对象中没有作为参数传入的几个值，统一打包成一个对象参数传给该方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>host<span class="token punctuation">,</span>port<span class="token punctuation">,</span><span class="token operator">...</span>user<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>  <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">3306</span><span class="token punctuation">,</span>  <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">'root'</span><span class="token punctuation">,</span>  <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">'root'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/*localhost3306&#123;username: "root", password: "root"&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spread扩展运算符"><a href="#Spread扩展运算符" class="headerlink" title="Spread扩展运算符"></a>Spread扩展运算符</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> skillOne <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">q</span><span class="token operator">:</span><span class="token string">'天音波'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> skillTwo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">w</span><span class="token operator">:</span><span class="token string">'金钟罩'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> skillThree <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">e</span><span class="token operator">:</span><span class="token string">'天雷破'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> skillFour <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">r</span><span class="token operator">:</span><span class="token string">'猛龙摆尾'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> mangseng <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>skillOne<span class="token punctuation">,</span><span class="token operator">...</span>skillTwo<span class="token punctuation">,</span><span class="token operator">...</span>skillThree<span class="token punctuation">,</span><span class="token operator">...</span>skillFour<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mangseng<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;q: "天音波", w: "金钟罩", e: "天雷破", r: "猛龙摆尾"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则扩展"><a href="#正则扩展" class="headerlink" title="正则扩展"></a>正则扩展</h2><h3 id="命名捕获分组"><a href="#命名捕获分组" class="headerlink" title="命名捕获分组"></a>命名捕获分组</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'&lt;a href="http://www.baidu.com">百度&lt;/a>'</span><span class="token comment">// 需求：提取url与标签文本</span><span class="token comment">//将想要提取的部分用(.*)括起来</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;a href="(.*)">(.*)&lt;\/a></span><span class="token regex-delimiter">/</span></span><span class="token keyword">const</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回的结果是一个数组</span><span class="token comment">/*0: "&lt;a href=\"http://www.baidu.com\">百度&lt;/a>"1: "http://www.baidu.com"2: "百度"groups: undefinedindex: 0input: "&lt;a href=\"http://www.baidu.com\">百度&lt;/a>"length: 3*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用正则扩展运算符可以向上面返回的groups添加一个对象</p><p>该对象的键为正则扩展运算符内的自定义文本，值为上面括号里匹配到的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'&lt;a href="http://www.baidu.com">百度&lt;/a>'</span><span class="token comment">// 需求：提取url与标签文本</span><span class="token comment">// const reg = /&lt;a href="(.*)">(.*)&lt;\/a>/</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;a href="(?&lt;url>.*)">(?&lt;text>.*)&lt;\/a></span><span class="token regex-delimiter">/</span></span><span class="token keyword">const</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*http://www.baidu.com百度*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的好处是用一个别名去提取，日后如果要添加捕获的内容，可以直接用key去取，不会因为数组下标的变动而要改变其他的代码</p><h3 id="正向断言"><a href="#正向断言" class="headerlink" title="正向断言"></a>正向断言</h3><p>根据目标后面的一个字来对他进行唯一的判断和提取</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'js24124你知道吗555啦啦啦'</span><span class="token punctuation">;</span><span class="token comment">// 需求提取555</span><span class="token comment">// 写一个正则，判断此数字后面是不是啦字</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d+(?=啦)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*0: "555"groups: undefinedindex: 11input: "js24124你知道吗555啦啦啦"length: 1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反向断言"><a href="#反向断言" class="headerlink" title="反向断言"></a>反向断言</h3><p>根据目标前面的一个字来对他进行唯一的判断和提取</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'js24124你知道吗555啦啦啦'</span><span class="token punctuation">;</span><span class="token comment">// 需求提取555</span><span class="token comment">// 写一个正则，判断此数字前面是不是吗字</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=吗)\d+</span><span class="token regex-delimiter">/</span></span><span class="token keyword">const</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正向断言和反向断言如果有匹配到的只会返回匹配到的第一个字符串</p><h3 id="dotAll"><a href="#dotAll" class="headerlink" title="dotAll"></a>dotAll</h3><p>我们如果要匹配一段长代码的内容，需要一直用\s来匹配换行符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;ul>&lt;li>  &lt;a>肖申克的救赎&lt;/a>  &lt;p>上架日期：1994-09-10&lt;/p>&lt;/li>&lt;li>  &lt;a>阿甘正传&lt;/a>  &lt;p>上架日期：1994-07-06&lt;/p>&lt;/li>&lt;/ul></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;li>\s+&lt;a>(.*?)&lt;\/a>\s+&lt;p>(.*?)&lt;\/p></span><span class="token regex-delimiter">/</span></span><span class="token keyword">let</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以在正则后加上s，然后在其中用.*?来匹配换行符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;li>.*?&lt;a>(.*?)&lt;\/a>.*?&lt;p>(.*?)&lt;\/p></span><span class="token regex-delimiter">/</span><span class="token regex-flags">s</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以加上g来进行全局匹配（即匹配列表中所有类似的结构）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;li>.*?&lt;a>(.*?)&lt;\/a>.*?&lt;p>(.*?)&lt;\/p></span><span class="token regex-delimiter">/</span><span class="token regex-flags">gs</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> result<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以进一步地将匹配好的数据压入数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;li>.*?&lt;a>(.*?)&lt;\/a>.*?&lt;p>(.*?)&lt;\/p></span><span class="token regex-delimiter">/</span><span class="token regex-flags">gs</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> result<span class="token punctuation">;</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">time</span><span class="token operator">:</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ES10语法"><a href="#ES10语法" class="headerlink" title="ES10语法"></a>ES10语法</h1><h2 id="对象扩展-2"><a href="#对象扩展-2" class="headerlink" title="对象扩展"></a>对象扩展</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>Object.fromEntries</td><td>创建一个对象（参数可以是二维数组、Map）作用与Object.entries相反</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'wwh'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">,</span><span class="token string">'13328577199,18959268130'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;name: "wwh", phone: "13328577199,18959268130"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'wwh'</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">,</span><span class="token string">'18959268130,13328577199'</span><span class="token punctuation">)</span><span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>trimStart</td><td>清除字符串右侧空白</td></tr><tr><td>trimEnd</td><td>清除字符串左侧空白</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'   im a str   '</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>flat</td><td>将多维数组转化为低维数组（参数表示转化数组的深度，默认为1）</td></tr><tr><td>flatMap</td><td>如果map函数的返回值是一个数组，可以flatMap将他转化成低维数组</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">//二维数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 3, Array(3)]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 3, 4, 5, 6]</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">//三维数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 3, 4, 5, 6, Array(3)]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">const</span> result1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//若返回值是一个数组，可以使用flatMap转化成低维数组</span><span class="token keyword">const</span> result2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">[</span>item<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> result3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">[</span>item<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[10, 20, 30]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[Array(1), Array(1), Array(1)]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[10, 20, 30]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Symbol扩展"><a href="#Symbol扩展" class="headerlink" title="Symbol扩展"></a>Symbol扩展</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'wwh'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//wwh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="ES11语法"><a href="#ES11语法" class="headerlink" title="ES11语法"></a>ES11语法</h1><h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><p>在ES11的class中，可以使用#来声明私有属性，该属性无法在类的外部被读取，但是可以在类中定义方法，通过该方法来访问类的私有属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 共有属性</span>  name<span class="token punctuation">;</span>  <span class="token comment">// 私有属性</span>  #age<span class="token punctuation">;</span>  #height<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>#age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>#height <span class="token operator">=</span> height  <span class="token punctuation">&#125;</span>  <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>#age<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>#height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'pp'</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">'165cm'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 报错</span><span class="token comment">// console.log(girl.#age);</span><span class="token comment">// console.log(girl.#height);</span>girl<span class="token punctuation">.</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//pp 21 165cm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h2><p>见Promise笔记汇总专题</p><h2 id="字符串扩展-1"><a href="#字符串扩展-1" class="headerlink" title="字符串扩展"></a>字符串扩展</h2><p>matchAll()方法：用于批量匹配字符串内的内容，该方法会返回一个RegExpStringIterator {}的可迭代对象，可以使用<code>for...of...</code>进行遍历（我们之前ES9中是使用while循环的方法来输出匹配的内容的）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  &lt;ul>  &lt;li>    &lt;a>肖申克的救赎&lt;/a>    &lt;p>上架日期：1994-09-10&lt;/p>  &lt;/li>  &lt;li>    &lt;a>阿甘正传&lt;/a>    &lt;p>上架日期：1994-07-06&lt;/p>  &lt;/li>  &lt;/ul></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;li>.*?&lt;a>(.*?)&lt;\/a>.*?&lt;p>(.*?)&lt;\/p></span><span class="token regex-delimiter">/</span><span class="token regex-flags">sg</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们甚至可以使用spread扩展运算符来将这个结果放到数组中去</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>result<span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[Array(3), Array(3)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符"></a>可选链操作符</h2><p>当我们要访问一个对象内部比较深层的一个属性，并且在访问前要先判断此属性是否存在，要先拼接很长的一串判断</p><p>如果没有这么长串的判断，对象中若没有想要的数据则会报错</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> dbHost <span class="token operator">=</span> config <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>db <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>db<span class="token punctuation">.</span>host  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dbHost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">db</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">'192.168.1.1'</span><span class="token punctuation">,</span>    <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">'root'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">cache</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">'192.168.1.2'</span><span class="token punctuation">,</span>    <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">'admin'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可选链操作符：?.会先判断问号前面的属性是否存在再继续向下判断（相当于向对象取值前先判断），并且如果属性值不存在，只会返回undefined，不会报错</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> dbHost <span class="token operator">=</span> config<span class="token operator">?.</span>db<span class="token operator">?.</span>host<span class="token punctuation">;</span>  <span class="token keyword">const</span> dbPwd <span class="token operator">=</span> config<span class="token operator">?.</span>db<span class="token operator">?.</span>password<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dbHost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//192.168.1.1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dbPwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">db</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">'192.168.1.1'</span><span class="token punctuation">,</span>    <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">'root'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">cache</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">host</span><span class="token operator">:</span><span class="token string">'192.168.1.2'</span><span class="token punctuation">,</span>    <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">'admin'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态import"><a href="#动态import" class="headerlink" title="动态import"></a>动态import</h2><p>可以实现按需加载，具体运用在Vue-router中的按需加载</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--index.html--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./app.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//app.js</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>hello<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./func.js'</span><span class="token comment">//静态引入方法</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//func.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用动态引入可以使用import()函数，该函数的返回结果是一个Promise对象，该成功的值就是Promise模块内的那个文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// import &#123;hello&#125; from './func.js'</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./func.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    module<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h2><p>ES11的新数据类型：大整形，定义方式在普通Number定义的数字后面加个n</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">2123n</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2123n "bigint"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>他有个方法能将Int型（不能是浮点型）的数转化为BigInt型的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该方法常用来做大数值的运算</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> max <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token comment">//普通的整型在9007199254740992就没法再网上加了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9007199254740991</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9007199254740992</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9007199254740992</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9007199254740991n</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9007199254740992n</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">BigInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9007199254740993n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：BigInt型只能和BigInt型做运算</p><h2 id="绝对全局对象"><a href="#绝对全局对象" class="headerlink" title="绝对全局对象"></a>绝对全局对象</h2><p>globalThis：该this永远指向全局（在浏览器中是Window，在Nodejs下面是global）</p><p>如果想要忽略this直接向Window操作就可以用globalThis</p><h1 id="Promise汇总"><a href="#Promise汇总" class="headerlink" title="Promise汇总"></a>Promise汇总</h1><p>Promise是异步编程的一种解决方案，一般情况下有异步操作时，会使用Promise对这个异步操作进行封装。</p><p>我们通常在网络请求时会进行<strong>异步编程</strong>——我们可能在进行网络请求时，没办法直接拿到该结果，而是要传入到另一个函数，当结果取到时，通过这个函数把结果回调出去，但是当回调函数里面也需要对数据进行处理，嵌套了多层的回调函数，就会形成<strong>回调地狱</strong>，不利于阅读与维护。</p><p>我们可以用定时器来模拟异步操作的网络请求。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"模拟异步操作"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建Promise"><a href="#创建Promise" class="headerlink" title="创建Promise"></a>创建Promise</h2><p>创建Promise需要实例化Promise类，这个类需要传入一个拥有两个参数（<strong>resolve</strong>，<strong>reject</strong>）的回调函数（该回调函数被称为<strong>executor</strong>执行器）作为参数，并且<strong>这两个参数本身也是两个函数</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"回调第一层"</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"回调第二层"</span><span class="token punctuation">)</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"回调第三层"</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上案例已经形成了回调地狱</p><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve()"></a>resolve()</h3><p>resolve()回调函数的参数是此次<strong>网络请求成功的结果</strong>，并且将这个结果传给**then()**作为参数，并且在then()中对此结果进行处理</p><p>我们可以通过调用resolve()方法，然后将回调函数放在then()方法中，如果then()中还有回调函数，则返回一个新的Promise实例，在此Promise实例中操作，以此类推……</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 第一次网络请求</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"第一次网络请求结果"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 第二次网络请求</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"第二次网络请求结果"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 第三次网络请求</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"第三次网络请求结果"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reject"><a href="#reject" class="headerlink" title="reject()"></a>reject()</h3><p>与resolve()相反，reject()回调函数的参数是此次<strong>网络请求失败的结果</strong>，并且他会将此结果传给**catch()**作为参数，并且在catch()中对此结果进行处理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 第一次网络请求</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"第一次网络请求结果"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 第二次网络请求</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"第二次网络请求结果"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 第三次网络请求</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"第三次网络请求失败"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上案例可见，Promise将网络请求和请求数据的处理进行分离</p><ol><li>在Promise的回调函数中主要进行网络请求</li><li>将网络请求成功所得结果放在resolve中，将网络请求失败所得结果放在reject中</li><li>resolve将请求成功结果作为参数传给then()方法处理，reject将请求失败结果传给catch()方法进行处理</li><li>在then()或catch()中进行对网络请求数据进行操作</li></ol><h2 id="执行状态变化过程"><a href="#执行状态变化过程" class="headerlink" title="执行状态变化过程"></a>执行状态变化过程</h2><p>执行过程：</p><ol><li>实例化Promise对象，将异步请求包裹到Promise中</li><li>调用Promise中的构造函数保存一些状态信息，执行传入的回调函数</li><li>执行回调函数有三种状态：<ul><li>Pending：等待状态，正在进行网络请求或定时器未到时间</li><li>Fulfilled：满足状态，请求成功，将成功数据传给resolve()数据，再在then()方法中对成功数据进行处理</li><li>Rejected：拒绝状态，请求失败，将失败信息传给reject()数据，再在catch()方法中对失败的数据进行处理</li></ul></li></ol><p><img src="D:\课程资料\前端开发\自学笔记\img\执行状态变化过程.png" alt="image-20210720202709946"></p><p>1、问：如何改变promise的状态?</p><p>答：</p><ul><li>resolve(value): 如果当前是pendding就会变为resolved</li><li>reject(reason): 如果当前是pendding就会变为rejected</li><li>抛出异常: 如果当前是pendding就会变为rejected</li></ul><p>2、问：一个promise指定多个成功/失败回调函数, 都会调用吗?</p><p>答：当promise改变为对应状态时都会调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// resolve(1) // promise变为resolved成功状态</span>  <span class="token comment">// reject(2) // promise变为rejected失败状态</span>  <span class="token comment">// throw new Error('出错了') // 抛出异常, promse变为rejected失败状态, reason为 抛出的error</span>  <span class="token keyword">throw</span> <span class="token number">3</span> <span class="token comment">// 抛出异常, promse变为rejected失败状态, reason为 抛出的3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reason'</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//reason3</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'reason2'</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//reason3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、问：改变promise状态和指定回调函数谁先谁后？</p><p>答：</p><ul><li>都可能，一般都是先指定回调再改变状态</li><li>如果要先改状态再指定回调，可以直接在执行器函数中调用resolve()/reject()，进行延迟后再调用then()</li><li>如果先指定回调，那当状态改变时，回调函数就会调用得到数据</li><li>如果先改变状态，那么当指定回调函时，对调函数就会立刻调用，得到数据。</li></ul><h2 id="另外处理方式"><a href="#另外处理方式" class="headerlink" title="另外处理方式"></a>另外处理方式</h2><p>当我们请求失败时，不一定需要将数据放入catch()中进行处理，而是在then()中，传入第二个回调函数，当我们处理失败信息时，就会调用这第二个回调函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1. 创建一个新的promise对象</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">// 执行器函数  同步回调</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行 excutor'</span><span class="token punctuation">)</span>  <span class="token comment">// 2. 执行异步操作任务</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> time <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 如果当前时间是偶数就代表成功, 否则代表失败</span>    <span class="token comment">// 3.1. 如果成功了, 调用resolve(value)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的数据, time='</span> <span class="token operator">+</span> time<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 3.2. 如果失败了, 调用reject(reason)</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败的数据, time='</span> <span class="token operator">+</span> time<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new Promise()之后'</span><span class="token punctuation">)</span><span class="token comment">//先有结果再指定回调函数</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 接收得到成功的value数据    onResolved</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功的回调'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">// 接收得到失败的reason数据  onRejected</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败的回调'</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问：使用Promise的原因？</p><p>答：</p><ul><li>如果不使用Promise，我们的回调函数必须在启动异步任务前就指定；使用了Promise后，我们可以在启动异步任务并且得到返回的Promise对象后再给Promise对象指定回调函数（甚至再异步任务结束后再指定也可）</li><li>支持链式调用、可以解决回调地狱的问题。</li></ul><h2 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h2><p>需求：将一个a通过Promise拼接成字符串abc</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//最初写法</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//a</span>    res <span class="token operator">=</span> res <span class="token operator">+</span><span class="token string">'b'</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//ab</span>      res <span class="token operator">=</span> res <span class="token operator">+</span> <span class="token string">'c'</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//abc</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>reject参数是可选的，如果我们没有用到可以将其省略</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//简写一：省略reject</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//a</span>  res <span class="token operator">=</span> res <span class="token operator">+</span><span class="token string">'b'</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//ab</span>    res <span class="token operator">=</span> res <span class="token operator">+</span> <span class="token string">'c'</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//abc</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、 问：Promise异常传递（穿透）是什么？</p><p>答：</p><ul><li>当时用Promise的then链式调用时，可以在最后指定失败的回调，前面任何操作出现了异常，都会传到最后的失败的回调中处理。</li><li>我们只在then()中指定一个成功的回调时，其失败的方法可以看成默认将错误抛出，抛给下一个then()的错误处理中，一直往下，直到catch()。</li><li>catch()也会返回一个成功状态的回调结果，但这个成功的value为undefined，如果在catch()后面指定then()会进入成功的回调，想要时其进入失败的回调对失败结果进行二次处理可以通过抛出错误或者返回<code>Promise.reject(reason)</code>，但是这样没有意义。</li></ul><p>2、 问：如何中断Promise链？</p><p>答：当我们想在进行链式调用时，在其中某一环停止不再往下调用回调函数，我们可以在回调函数中返回一个pendding状态的Promise对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// resolve(1)</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved1()'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">2</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// reason => &#123;throw reason&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved2()'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">3</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> reason<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved3()'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">reason</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onReejected1()'</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span>  <span class="token comment">// throw reason</span>  <span class="token comment">// return Promise.reject(reason)</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token comment">// 返回一个pending的promise  中断promise链</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onResolved3()'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onReejected2()'</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise的API"><a href="#Promise的API" class="headerlink" title="Promise的API"></a>Promise的API</h2><ol><li><p>Promise构造函数: Promise (excutor) {}</p><p>  excutor函数: 同步执行 (resolve, reject) =&gt; {}</p><p>  resolve函数: 内部定义成功时我们调用的函数 value =&gt; {}</p><p>  reject函数: 内部定义失败时我们调用的函数 reason =&gt; {}</p><p>  说明: excutor会在Promise内部立即同步回调,异步操作在执行器中执行</p></li><li><p>Promise.prototype.then方法: (onResolved, onRejected) =&gt; {}</p><p>  onResolved函数: 成功的回调函数 (value) =&gt; {}</p><p>  onRejected函数: 失败的回调函数 (reason) =&gt; {}</p><p>  说明: 指定用于得到成功value的成功回调和用于得到失败reason的失败回调，返回一个新的promise对象</p></li><li><p>Promise.prototype.catch方法: (onRejected) =&gt; {}</p><p>  onRejected函数: 失败的回调函数 (reason) =&gt; {}</p><p>  说明: then()的语法糖, 相当于: then(undefined, onRejected)</p></li><li><p>Promise.resolve方法: (value) =&gt; {}</p><p>  value: 成功的数据或promise对象</p><p>  说明: 返回一个成功/失败的promise对象</p></li><li><p>Promise.reject方法: (reason) =&gt; {}</p><p>  reason: 失败的原因</p><p>  说明: 返回一个失败的promise对象</p></li><li><p>Promise.all方法: (promises) =&gt; {}</p><p>  promises: 包含n个promise的数组</p><p>  说明: 返回一个新的promise, 只有所有的promise都成功才成功, 只要有一个失败了就直接失败</p></li><li><p>Promise.race方法: (promises) =&gt; {}</p><p>  promises: 包含n个promise的数组</p><p>  说明: 返回一个新的promise, 第一个完成的promise的结果状态就是最终的结果状态</p></li></ol><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h3><p>Promise提供了一个resolve()方法在这个方法中，可以直接将对响应结果的处理作为参数，然后传给then()进行处理</p><p>该方法会自动将对响应结果的处理包裹在Promise对象中，然后我们就可以直接使用then()方法接着对这个处理结果进行下一步处理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//简写二：省略返回新的Promise对象</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//a</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res <span class="token operator">+</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//ab</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>res <span class="token operator">+</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//abc</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们甚至可以使用<strong>return关键字</strong>进一步简洁为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//简写三：省略Promise.resolve()的调用</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//a</span>  <span class="token keyword">return</span> res <span class="token operator">+</span> <span class="token string">'b'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//ab</span>  <span class="token keyword">return</span> res <span class="token operator">+</span> <span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//abc</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们在链的中间有一次错误，我们可以在链的最低端使用catch()来处理这次错误（即多个then()，一个catch()）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//a</span>  res <span class="token operator">=</span> res <span class="token operator">+</span><span class="token string">'b'</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    res <span class="token operator">=</span> res <span class="token operator">+</span> <span class="token string">'c'</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token comment">//error</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h3><p>与resolve()方法相同，此方法用来处理错误</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//a</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token keyword">return</span> res <span class="token operator">+</span> <span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token comment">//error</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以用<strong>throw关键字</strong>对该方法进行进一步的简写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//a</span>  <span class="token keyword">throw</span> <span class="token string">'error'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token keyword">return</span> res <span class="token operator">+</span> <span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token comment">//error</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all([])"></a>Promise.all([])</h3><p><strong>处理双请求</strong></p><p>当我们在开发中，需要对两个接口进行访问，并且<strong>都访问到结果才继续下一步的处理</strong></p><p>这时候我们就可以使用Promise.all()来处理多个请求</p><p>该方法的参数是一个数组，数组内是多个Promise对象，分别发起网络请求并且各自将结果抛出</p><p>在方法外的then()方法中接收到的是一个<strong>结果数组</strong>，通过索引数组的取值方式就可以取到上面两个Promise抛出的结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token comment">//第一个请求</span>      <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'url1'</span><span class="token punctuation">,</span>          <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">//第二个请求</span>      <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'url2'</span><span class="token punctuation">,</span>          <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">results</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">//结果一</span>      results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment">//结果二</span>      results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用定时器模拟：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token comment">//第一个请求</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'第一个请求结果'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//第二个请求</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'第二个请求结果'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">results</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//两秒后才显示结果</span><span class="token comment">//(2) ["第一个请求结果", "第二个请求结果"]</span><span class="token comment">//第一个请求结果 第二个请求结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise-allSettled-1"><a href="#Promise-allSettled-1" class="headerlink" title="Promise.allSettled([])"></a>Promise.allSettled([])</h3><p>该方法接收一个Promise的数组，返回的结果是一个Promise对象，并且其返回值永远成功</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reslove<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">reslove</span><span class="token punctuation">(</span><span class="token string">'商品数据1'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reslove<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">reslove</span><span class="token punctuation">(</span><span class="token string">'商品数据2'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> result <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*[[PromiseState]]: "fulfilled"[[PromiseResult]]: Array(2)    0: &#123;status: "fulfilled", value: "商品数据1"&#125;    1: &#123;status: "fulfilled", value: "商品数据2"&#125;    length: 2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有其中一个失败了，他也仅仅会在[[PromiseResult]]中将该Promise对象的status改成rejected</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reslove<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">reslove</span><span class="token punctuation">(</span><span class="token string">'商品数据1'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reslove<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//失败</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'商品数据2'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> result <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*[[PromiseState]]: "fulfilled"[[PromiseResult]]: Array(2)    0: &#123;status: "fulfilled", value: "商品数据1"&#125;    1: &#123;status: "rejected", reason: "商品数据2"&#125;    length: 2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：与Promise.all()不同，Promise.all()方法只有该方法内部的Promise全部都成功才会返回成功的值</p><p>他们都用于处理批量异步任务，如果我们想得到每个Promise对象的结果，我们就用allSettled()；如果我们想要这些Promise对象都执行成功后再进行下一步，就使用all()</p><h2 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h2><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p>主要采用ES5的方法定义Promise模块：</p><ul><li>使用匿名函数自调用的方式，接收window为参数，并且将Promise构造函数暴露出去</li><li>定义构造函数Promise，在Promise内有resolve()和reject()方法</li><li>构造函数Promise接收一个excutor函数作为执行器，并且在函数内自调用</li><li>添加Promise原型对象上的方法then()、catch()（由Promise实例对象调用）</li><li>添加Promise函数对象上的方法resolve()、reject()、all([])、race([])（由Promise调用）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'pending'</span>  <span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">'resolved'</span>  <span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'rejected'</span>    <span class="token keyword">function</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token parameter">excutor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将当前的Promise对象的this存起来以防后面函数调用时出现this指向错误</span>    <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment">// 给Promise对象执行status属性，初始值为pending</span>    _this<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>    <span class="token comment">// 给Promise对象指定一个用于存储结果数据的属性</span>    _this<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">undefined</span>     <span class="token comment">// 存放元素的结构：&#123;onResolved() &#123;&#125;, onRejected() &#123;&#125;&#125;</span>    _this<span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">// 执行器由两个函数参数组成resolve()、reject()</span>    <span class="token comment">// 当resolve执行说明Promise返回成功结果</span>    <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>    <span class="token comment">// 当reject执行说明Promise返回失败结果</span>    <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">&#125;</span>    <span class="token comment">// 立即同步执行excutor</span>    <span class="token comment">// 如果执行器抛出异常，状态也变成失败</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token function">excutor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * Promise原型对象上的方法：then() catch()   */</span>  <span class="token comment">/**   * then()   * @param &#123;function&#125; onResolved 成功的回调函数   * @param &#123;function&#125; onRejected 失败的回调函数   * @returns &#123;Promise&#125;   */</span>  <span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * catch()   * @param &#123;function&#125; onRejected 失败的回调   * @returns &#123;Promise&#125;   */</span>  <span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * Promise函数对象上的方法：resolve()、reject()、all([])、race([])   */</span>  <span class="token comment">/**   * resolve()   * @param &#123;*&#125; value 成功的值   * @returns &#123;Promise&#125; 状态为Fulfilled，结果为value   */</span>  Promise<span class="token punctuation">.</span><span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * reject()   * @param &#123;*&#125; error 失败的值    * @returns &#123;Promise&#125; 状态为Rejected，结果为error   */</span>  Promise<span class="token punctuation">.</span><span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * all([])   * @param &#123;array&#125; promises 一个由Promise对象组成的数组   * @returns &#123;Promise&#125; 当所有Promise都执行成功时Promise状态为Fulfilled，如果有一个失败Promise的状态为Rejected   */</span>  Promise<span class="token punctuation">.</span><span class="token function-variable function">all</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * race()   * @param &#123;array&#125; promises 一个由Promise对象组成的数组   * @returns &#123;Promise&#125; 该Promise的结果由第一个完成的Promise决定   */</span>  Promise<span class="token punctuation">.</span><span class="token function-variable function">race</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>  <span class="token comment">// 向外暴露Promise函数</span>  window<span class="token punctuation">.</span>Promise <span class="token operator">=</span> Promise<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>编写思路：</p><ul><li>定义四个变量_this、status、data、callbacks分别存放构造函数的this指向、Promise状态、传递的数据、处理Promise结果的回调函数</li><li>构造函数内的resolve()与reject()方法分别接收成功回调的value和失败回调的error，并且主要处理三件事：<ul><li>改变Promise状态</li><li>存储传递的value或者error数据</li><li>异步执行保存在回调函数数组内的对应的Promise回调函数（onResolved()或onRejected()），将数据传递到对应回调函数中。</li></ul></li><li>在构造函数内直接执行excutor函数，捕获执行过程中抛出的错误，交给Promise内的reject()进行操作</li></ul><p>注意点：</p><ul><li>Promise的状态只能改变一次，因此如果当前状态不是pending则直接结束resolve()\reject()的运行</li><li>因为Promise中的resolve()和reject()是异步执行自定义的回调函数，因此可以使用setTimeOut来将该回调函数放入setTimeOut执行队列中模拟异步队列中函数的执行</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Promise构造函数 * @param &#123;function&#125; excutor 构造器函数(同步执行) */</span><span class="token keyword">function</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token parameter">excutor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 将当前的Promise对象的this存起来以防后面函数调用时出现this指向错误</span>  <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment">// 给Promise对象执行status属性，初始值为pending</span>  _this<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span>  <span class="token comment">// 给Promise对象指定一个用于存储结果数据的属性</span>  _this<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">undefined</span>   <span class="token comment">// 存放元素的结构：&#123;onResolved() &#123;&#125;, onRejected() &#123;&#125;&#125;</span>  _this<span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 执行器由两个函数参数组成resolve()、reject()</span>  <span class="token comment">// 当resolve执行说明Promise返回成功结果</span>  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 因为状态只能改变一次，所有如果当前状态不是pending直接结束</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>status<span class="token operator">!==</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token comment">// 1、将状态改为resolved</span>    _this<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">RESOLVED</span>    <span class="token comment">// 2、将value数据保存</span>    _this<span class="token punctuation">.</span>data <span class="token operator">=</span> value    <span class="token comment">// 3、若有待执行的回调函数，立即异步执行onResolved</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 指定一个定时器可以将回调函数放入异步队列里面执行</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        _this<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callbacksObj</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          callbacksObj<span class="token punctuation">.</span><span class="token function">onResolved</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 当reject执行说明Promise返回失败结果</span>  <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 因为状态只能改变一次，所有如果当前状态不是pending直接结束</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>status<span class="token operator">!==</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token comment">// 1、将状态改为rejected</span>    _this<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span>    <span class="token comment">// 2、将value数据保存</span>    _this<span class="token punctuation">.</span>data <span class="token operator">=</span> error    <span class="token comment">// 3、若有待执行的回调函数，立即异步执行onRejected</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 指定一个定时器可以将回调函数放入异步队列里面执行</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        _this<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callbacksObj</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          callbacksObj<span class="token punctuation">.</span><span class="token function">onRejected</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 立即同步执行excutor</span>  <span class="token comment">// 如果执行器抛出异常，状态也变成失败</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token function">excutor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="then-catch"><a href="#then-catch" class="headerlink" title="then()\catch()"></a>then()\catch()</h3><p>编写思路：</p><ul><li>then()方法接收两个自定义的回调函数对Promise的结果进行处理</li><li>then()方法会对上一个实例对象的Promise的执行结果进行判断，并且进行处理：<ul><li>状态为pending时，将then()中自定义的两个回调函数放入Promise构造函数定义的回调数组callbacks中</li><li>状态为resolved时，异步执行定义在onResolved()的回调函数</li><li>状态为rejected时，异步执行定义在onRejected()的回调函数</li></ul></li><li>then()方法中定义在onResolved()和onRejected()输出结果有三种情况：<ul><li>直接return一个值时，此时return的值直接作为成功的Promise的结果交给Promise中的resolve(value)执行</li><li>throw一个异常时，此时的return的Promise即为失败的Pormise实例对象，将抛出的异常结果交给Promise中的reject(error)执行</li><li>return的值如果是一个Promise对象实例时，调用这个新的实例对象的then()方法，并且将这个实例对象的值传给resolve()和reject()进行调用</li></ul></li><li>catch()的实现可以看作是then()的onResolved()为undefined，可以将失败的回调交给此函数对象的then()方法来执行，逻辑一致</li></ul><p>注意点：</p><ul><li>当上一个Promise对象实例的状态为pending时，我们不直接将自定义在onResolved()和onRejected()上的函数直接放入待执行的回调函数数组中，而是调用其内部的resolve()\reject()去对要返回的一个新的Promise进行状态的更改</li><li>由于then()方法的onRejected()回调函数可能为空，此时我们也要把异常的信息传递下去（即实现异常传递），因此我们需要判断此回调函数是否存在<ul><li>不存在时将onRejected()默认设置为：<code>error =&gt; &#123;throw error&#125;</code></li></ul></li><li>当onResolved()不存在时（即实现catch()），我们就算不处理成功的数据时，也要将成功的值传递下去：<code>value =&gt; value</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Promise原型对象上的方法：then() catch() */</span><span class="token comment">/** * then() * @param &#123;function&#125; onResolved 成功的回调函数 * @param &#123;function&#125; onRejected 失败的回调函数 * @returns &#123;Promise&#125; */</span><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//如果不处理成功的，也要将成功的值传下去（如catch()）</span>  onResolved <span class="token operator">=</span> <span class="token keyword">typeof</span> onResolved <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onResolved</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=></span> value  <span class="token comment">//判断this的第二个回调是否有指定（实现异常传递）</span>  onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> error<span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 调用指定的回调函数进行处理，根据执行结果改变return的Promise的状态     * @param &#123;function&#125; callback      */</span>    <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//then有三种执行情况</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 如果回调函数返回new Promise，则return的值为这个Promise实例对象的结果</span>          <span class="token comment">/*            result.then(              value => resolve(value),              error => reject(error)            )          */</span>          <span class="token comment">//简洁写法：再次调用then方法，去执行新的Promise对象内的回调函数取得结果</span>          <span class="token comment">//onResolved和onRejected为外部传来的回调函数，其返回值会自动传给resolve和reject的参数</span>          result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 如果回调函数直接return，则该return的值就是Promise成功的返回值value</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果抛出异常，return的Promise则失败，data则为error</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断当前状态</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 1、当前状态是pending，将指定的回调函数放入callbacks保存</span>      <span class="token comment">// 之所以不直接将回调函数传入数组，是因为还需要再次调用内部resolve和reject去更改Promise的状态</span>      _this<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">onResolved</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">handle</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">onRejected</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">handle</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 2、当前状态如果是resolved，异步执行onResolved更改return的Promise的状态</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">handle</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 3、当前状态是rejected，异步执行onRejected更改return的Promise的状态</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">handle</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * catch() * @param &#123;function&#125; onRejected 失败的回调 * @returns &#123;Promise&#125; */</span><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">catch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="resolve-reject"><a href="#resolve-reject" class="headerlink" title="resolve()\reject()"></a>resolve()\reject()</h3><p>编写思路：</p><ul><li>resolve()接收的值有两种情况：<ul><li>一般值：则返回一个成功的Promise，值为这个值</li><li>一个成功或失败的Promise实例对象，返回的值为这个Promise的结果</li></ul></li><li>reject()一经调用，就会返回一个失败的Promise实例对象，值为reject()中接收到的error</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**   * resolve()   * @param &#123;*&#125; value 成功的值   * @returns &#123;Promise&#125; 返回的Promise可能是成功也可能失败   */</span>  Promise<span class="token punctuation">.</span><span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//当接收的value是一个Promise，则返回的value是该Promise的结果</span>        value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//当接收的是一个值，直接返回一个成功的Promise，值为value</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * reject()   * @param &#123;*&#125; error 失败的值    * @returns &#123;Promise&#125; 状态为Rejected，结果为error   * 一经调用永远返回一个失败的Promise   */</span>  Promise<span class="token punctuation">.</span><span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="all-race"><a href="#all-race" class="headerlink" title="all([])\race([])"></a>all([])\race([])</h3><p>编写思路：</p><ul><li>all()和race()都是接收一个由Promise对象组成的数组</li><li>all()会保存数组中所有Promise对象的值，如果全部的Promise都是成功才会返回成功的一个Promise，该Promise的值为所传的所有Promise的结果数组</li><li>race()同样返回一个Promise，而该Promise的结果由所传的所有Promise对象第一个执行完的结果决定，无论此结果是成功还是失败</li></ul><p>注意点：</p><ul><li>在all()和race()接收的数组中，可能有成功的值，这时这个值直接看作一个成功的Promise的结果，我们可以通过Promise.resolve()把这个值包装成一个Promise，省去了判断的过程</li><li>all()的结果是否成功可以定义一个计数器，每次有成功的Promise触发then()方法后此计数器自增，再通过比较计数器与所传数组的长的可以判断all()的返回结果，匹配成功后将所保留的Promise的对象的值交给resolve()执行，去将新返回的Promise对象的状态改成满足态</li><li>all()返回的数组值的结果的顺序应该与传入的Promise数组的顺序对应，如果在遍历后直接使用push()会使所得值与所传值的结果相反，因此可以使用数组下标的方式指定每个值所在的数组位置</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * all([]) * @param &#123;array&#125; promises 一个由Promise对象组成的数组 * @returns &#123;Promise&#125; 当所有Promise都执行成功时Promise状态为Fulfilled，如果有一个失败Promise的状态为Rejected */</span>Promise<span class="token punctuation">.</span><span class="token function-variable function">all</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 用来保存所有成功的value的值，指定他的长度为promises的长度</span>  <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment">// 定义一个用来保存成功Promise的数量</span>  <span class="token keyword">let</span> resolvedCount <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 返回一个新的Promise</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历Promises获取每个Promise的结果</span>    promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 注意：我们接收到的数组也可能是一个已经成功的值</span>      <span class="token comment">//对于这种情况我们可以用判断，简便方法是直接将这个值包装成一个Promise</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token comment">// 当接收到的Promise是成功的，将成功的value保存在values中，计数器自增</span>        <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 注意如果直接用push()方法，那么我们values中的值会和promises中的结果相反</span>          resolvedCount<span class="token operator">++</span>          values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value          <span class="token comment">// 根据成功的值和所传Promise的个数来判断</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedCount <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * race() * @param &#123;array&#125; promises 一个由Promise对象组成的数组 * @returns &#123;Promise&#125; 该Promise的结果由第一个完成的Promise决定 */</span>Promise<span class="token punctuation">.</span><span class="token function-variable function">race</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历Promises获取每个Promise的结果</span>    promises<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 一旦有成功的，把return变成成功的Promise</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 一旦有失败的，将return变成失败的Promise</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h3><p>resolveDelay()\rejectDelay()</p><p>编写思路：</p><ul><li>与resolve()\reject方法相比，多接收一个参数，通过定时器，延迟将结果返回，可以用来测试all()和race()方法</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * resolveDelay() * @param &#123;*&#125; value  * @param &#123;*&#125; time  * @returns &#123;Promise&#125; 返回的Promise对象在指定的时间后才确定结果 */</span>Promise<span class="token punctuation">.</span><span class="token function-variable function">resolveDelay</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//当接收的value是一个Promise，则返回的value是该Promise的结果</span>        value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//当接收的是一个值，直接返回一个成功的Promise，值为value</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * rejectDelay() * @param &#123;*&#125; value  * @param &#123;Number&#125;&#125; time  * @returns &#123;Promise&#125; 返回的Promise对象在制定的时间后才失败 */</span> Promise<span class="token punctuation">.</span><span class="token function-variable function">rejectDelay</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 一经调用永远返回一个失败的Promise</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="async-1"><a href="#async-1" class="headerlink" title="async"></a>async</h2><p>特点：</p><ul><li><p>async函数的返回值为promise对象</p></li><li><p>promise对象的结果由async函数执行的返回值决定</p><ul><li><p>当使用return关键字返回结果时，promise的状态为fulfilled</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"WWH"</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Promise &#123;&lt;fulfilled>: "WWH"&#125;</span><span class="token comment">//[[PromiseState]]: "fulfilled"</span><span class="token comment">//[[PromiseResult]]: "WWH"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当时用throw关键字抛出错物时，promise的状态为rejected</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">throw</span> <span class="token string">"WWH"</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Promise &#123;&lt;rejected>: "WWH"&#125;</span><span class="token comment">// [[PromiseState]]: "rejected"</span><span class="token comment">// [[PromiseResult]]: "WWH"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当返回的结果是一个promise对象时，该promise对象返回的值于函数的返回值相等，并且此函数的执行结果可以调用then()方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success data'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Promise &#123;&lt;pending>&#125;</span><span class="token comment">// [[PromiseState]]: "fulfilled"</span><span class="token comment">// [[PromiseResult]]: "success data"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error msg'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Promise &#123;&lt;pending>&#125;</span><span class="token comment">// [[PromiseState]]: "rejected"</span><span class="token comment">// [[PromiseResult]]: "error msg"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success data'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//success data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="await-1"><a href="#await-1" class="headerlink" title="await"></a>await</h2><p>await表达式要搭配async函数使用，await可以取出async函数中promise对象的成功的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> p  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果Promise对象返回的是失败的值，可以用try…catch…来处理错误</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"error msg"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> p    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="综合运用"><a href="#综合运用" class="headerlink" title="综合运用"></a>综合运用</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p>写两个方法读取文件，返回Promise对象来处理读取文件的结果</p><p>写一个async函数来接收这几个方法Promise对象处理成功的结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入nodejs读取文件模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">//读取async函数.html文件</span><span class="token keyword">function</span> <span class="token function">readAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./async函数.html"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//读取await.html文件</span><span class="token keyword">function</span> <span class="token function">readAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./await.html"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// await按顺序执行，只有当前面的await有了结果后才会执行下一个</span>  <span class="token keyword">let</span> asyncData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> awaitData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readAwait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>asyncData<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>awaitData<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Ajax请求封装和使用"><a href="#Ajax请求封装和使用" class="headerlink" title="Ajax请求封装和使用"></a>Ajax请求封装和使用</h4><p>封装一个发送ajax请求的函数，内部将网络请求的结果封装成Promise对象后返回出来，再写一个async函数用来接收ajax请求的结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sendAJAX</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    x<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>response<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>status<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendAJAX</span><span class="token punctuation">(</span><span class="token string">"https://www.fastmock.site/mock/9843734bc8c44034f659599c76a53f73/erp/login/login"</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendAJAX</span><span class="token punctuation">(</span><span class="token string">"http://api.erp.com/product/product/index"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端开发 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios</title>
      <link href="/2022/05/16/axios/"/>
      <url>/2022/05/16/axios/</url>
      
        <content type="html"><![CDATA[<h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>测试url：httpbin.org 、<a href="http://123.207.32.32:8000/home/multidata">http://123.207.32.32:8000/home/multidata</a></p><h3 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h3><p>我们可以用json-server搭建一个虚拟的API以供网络测速。</p><pre class="line-numbers language-none"><code class="language-none">npm i -g json-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建一个json-server文件夹，在里面创建db.json用于存放虚拟的json数据</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;posts&quot;: [    &#123;      &quot;id&quot;: 1,      &quot;title&quot;: &quot;json-server&quot;,      &quot;author&quot;: &quot;typicode&quot;    &#125;,    &#123;      &quot;id&quot;: 2,      &quot;title&quot;: &quot;青春修炼手册&quot;,      &quot;author&quot;: &quot;wwh&quot;    &#125;  ],  &quot;comments&quot;: [    &#123;      &quot;id&quot;: 1,      &quot;body&quot;: &quot;some comment&quot;,      &quot;postId&quot;: 1    &#125;  ],  &quot;profile&quot;: &#123;    &quot;name&quot;: &quot;typicode&quot;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这文件夹内打开命令行工具，并且用json-server监听此db.json文件。</p><p>之后我们就可以根据命令行输出的几个API来取得这几个json数据。</p><pre class="line-numbers language-none"><code class="language-none">PS D:\workplace\web\json-server&gt; json-server --watch db.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>支持使用rest API的请求方式，如：</p><h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul><li>在浏览器中发送XMLHttpRequest请求</li><li>在node.js中发送http请求</li><li>支持Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ol><li><p>安装axios：npm install axios –save</p></li><li><p>引用插件，并编写一个请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token comment">//1、引用</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//2、发送请求</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000/home/multidata'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>axios()方法默认返回一个Promise对象，因此我们可以直接用then()方法去对数据进行处理</p><h3 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h3><p>axios()方法可以传入一个对象，对象内有不同的参数，常用的数据类型有：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>url（必须）</td><td>指定发送请求的目标接口</td></tr><tr><td>method（可选）</td><td>指定发送请求的类型，如果不填默认为GET请求</td></tr><tr><td>baseURL（可选）</td><td>指定一个基础url，之后在请求url时就可以省去这一段指定好的url，也可以<strong>把这个参数拉出方法外单独定义</strong></td></tr><tr><td>params（可选）</td><td>当我们使用get请求时，需要在url后面拼接参数，可以直接写在url参数内，也可以写在params参数中</td></tr><tr><td>transformRequest:[function(data){}]（可选）</td><td>请求前数据处理，在回调函数中处理完的数据需要return才能生效</td></tr><tr><td>transformResponse:[function(data){}]（可选）</td><td>请求后数据处理，在回调函数中处理完的数据需要return才能生效</td></tr><tr><td>headers:{‘x-Requested-With’:’XMLHttpRequest’}（可选）</td><td>自定义请求头信息（token会放到这里面）</td></tr><tr><td>paramsSerializer:function(params){}</td><td>查询对象序列化函数</td></tr><tr><td>data（可选）</td><td>请求体，对应post请求</td></tr><tr><td>timeout（可选）</td><td>超时设置</td></tr><tr><td>withCredentials（可选）</td><td>跨域是否携带Token</td></tr><tr><td>adapter:function(resolv,reject,config){}（可选）</td><td>自定义请求处理</td></tr><tr><td>auth（可选）</td><td>身份验证信息</td></tr><tr><td>responseType（可选）</td><td>响应数据格式</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//指定基础URL</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL<span class="token operator">=</span><span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//默认方式</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">//baseURL:'http://123.207.32.32:8000',</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/multidata'</span><span class="token punctuation">,</span>  <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//axios.get()方法</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/home/data?type=sell$page=3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/data'</span><span class="token punctuation">,</span>  <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>  <span class="token comment">//get方法携带的参数</span>  <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'sell'</span><span class="token punctuation">,</span>    <span class="token literal-property property">page</span><span class="token operator">:</span><span class="token number">3</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>开发中有很多参数都是固定的，需要在很多地方重复使用，我们可以把他们抽取到axios()外面单独定义，在axios()内就可以省略这些配置</p><p>全局配置的优先级低于使用create创建的实例对象中的配置。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//指定基础URL</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL<span class="token operator">=</span><span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">;</span><span class="token comment">//指定超时时间（毫秒，如果请求时间超过则报错）</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout<span class="token operator">=</span><span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求别名"><a href="#请求别名" class="headerlink" title="请求别名"></a>请求别名</h3><p>为方便起见，为所有支持的请求方法提供了别名</p><p><strong>axios.request(config)</strong></p><p><strong>axios.get(url[, config])</strong></p><p><strong>axios.delete(url[, config])</strong></p><p><strong>axios.head(url[, config])</strong></p><p><strong>axios.options(url[, config])</strong></p><p><strong>axios.post(url[, data[, config]])</strong></p><p><strong>axios.put(url[, data[, config]])</strong></p><p><strong>axios.patch(url[, data[, config]])</strong></p><p>注意：在使用别名方法时，url、method、data 这些属性都不必在配置中指定。</p><h3 id="并发请求"><a href="#并发请求" class="headerlink" title="并发请求"></a>并发请求</h3><p>当我们在开发中，需要对两个接口进行访问，并且<strong>都访问到结果才继续下一步的处理</strong></p><p>与Promise.all([])类似，我们可以使用axios.all([])来处理并发请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/multidata'</span><span class="token punctuation">,</span>    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/data'</span><span class="token punctuation">,</span>    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>    <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'sell'</span><span class="token punctuation">,</span>      <span class="token literal-property property">page</span><span class="token operator">:</span><span class="token number">3</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同在于，axios返回的结果可以用spread()方法展开</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/multidata'</span><span class="token punctuation">,</span>    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/data'</span><span class="token punctuation">,</span>    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>    <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'sell'</span><span class="token punctuation">,</span>      <span class="token literal-property property">page</span><span class="token operator">:</span><span class="token number">3</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res1<span class="token punctuation">,</span>res2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios实例"><a href="#axios实例" class="headerlink" title="axios实例"></a>axios实例</h3><p>我们在平时使用axios()发送请求的时候其实是用的一个全局的axios实例，其中defaults的配置也是全局的</p><p>但当我们有向多个不同的域名发送请求的需求的时候，通过全局配置的axios方法就会导致请求冲突，此时我们可以创建单个实例来处理这种分布式请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用create()方法创建一个axios实例</span><span class="token keyword">const</span> instance1 <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">baseURL</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">,</span>  <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">instance1</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/multidata'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">instance1</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/data'</span><span class="token punctuation">,</span>  <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>  <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'sell'</span><span class="token punctuation">,</span>    <span class="token literal-property property">page</span><span class="token operator">:</span><span class="token number">3</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般情况下我们都是使用这种方式来封装axios网络请求的实例</p><h2 id="模块封装"><a href="#模块封装" class="headerlink" title="模块封装"></a>模块封装</h2><p>一般我们要在组件中封装axios网络请求都是在Vue的生命周期函数created中</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    &lt;p&gt;&#123;&#123;res&#125;&#125;&lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import axios from &#39;axios&#39;;export default &#123;  name: &#39;App&#39;,  data()&#123;    return &#123;      res:&#39;&#39;    &#125;  &#125;,  created()&#123;    axios(&#123;      baseURL:&#39;http:&#x2F;&#x2F;123.207.32.32:8000&#39;,      url:&#39;&#x2F;home&#x2F;multidata&#39;    &#125;).then(res &#x3D;&gt; &#123;      this.res &#x3D; res    &#125;)  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><p>但是很少直接在组件中引入axios这种第三方框架，为了避免更换技术栈的风险，我们一般在src下新建一个network文件夹用于存放对于网络请求的封装</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//src/network/request.js</span><span class="token comment">//1、引入axios框架</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token comment">//2、封装一个resquest请求，接收配置，以及成功与失败的回调函数</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span>success<span class="token punctuation">,</span>failure</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//3、使用create()创建一个axios实例，里面写上一些基础配置</span>  <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">baseURL</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//4、调用创建的axios实例来接收组件传来的配置，捕获成功与失败的回调函数，发送真正的网络请求</span>  <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//5.1、执行组件处理成功响应数据的回调函数</span>    <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//5.2、执行组件处理失败响应数据的回调函数</span>    <span class="token function">failure</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//App.vue</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//引入封装好的网络请求模块</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> request  <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./network/request"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">res</span><span class="token operator">:</span><span class="token string">''</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/multidata'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>res <span class="token operator">=</span> res    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h3><p>我们可以只让配置好的网络请求模块只接收一个config参数，在这个参数中分为baseConfig和回调函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">baseURL</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>baseConfig<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> config<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> config<span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;import &#123; request  &#125; from &quot;.&#x2F;network&#x2F;request&quot;;export default &#123;  name: &#39;App&#39;,  data()&#123;    return &#123;      res:&#39;&#39;    &#125;  &#125;,  created()&#123;    request(&#123;      baseConfig:&#123;        url:&#39;&#x2F;home&#x2F;multidata&#39;      &#125;,      success(res)&#123;        console.log(res);      &#125;,      failure(err)&#123;        console.log(err)      &#125;    &#125;)  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise写法"><a href="#Promise写法" class="headerlink" title="Promise写法"></a>Promise写法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//返回一个Promise，通过Promise的resolve和reject来传递回调数据</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">baseURL</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">,</span>      <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//网络请求执行Promise自带的回调函数</span>    <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> request  <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./network/request"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">res</span><span class="token operator">:</span><span class="token string">''</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//直接使用then与catch来处理数据</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/home/multidata'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>res <span class="token operator">=</span> res    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios框架最终封装方案"><a href="#axios框架最终封装方案" class="headerlink" title="axios框架最终封装方案"></a>axios框架最终封装方案</h3><p>axios框架在源码中，返回的本来就是一个Promise函数，因此我们可以在上面的Promise写法上面直接删去对Promise的封装，直接执行玩网络请求，将这个请求的结果返回，在组件中就直接可以用Promise的方式去调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">baseURL</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">,</span>      <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，若我们日后更换了网络请求框架的时候，如果返回的结果不是一个Promise，就可以用上面Promise的写法去自己封装一个</p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>在我们请求成功、请求失败、响应成功、响应失败这四种情况下，可以创建Axios拦截器对数据进行拦截、操作</p><table><thead><tr><th>拦截器方法</th><th>作用</th></tr></thead><tbody><tr><td>axios.interceptors.request.use()</td><td>拦截全局实例下的请求成功与请求失败的数据</td></tr><tr><td>axios.interceptors.response.use()</td><td>拦截全局实例下的响应成功与响应失败的数据</td></tr></tbody></table><h3 id="request拦截器"><a href="#request拦截器" class="headerlink" title="request拦截器"></a>request拦截器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">baseURL</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">,</span>      <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//对请求配置进行拦截</span>    instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//操作完需要把配置数据返回出去</span>      <span class="token keyword">return</span> config    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用场景</strong></p><ol><li>当config中一些信息不是我们想要的，我们就可以在拦截器里面进行配置、转化</li><li>每次在网络请求时，希望在页面中显示一个loading的图标</li><li>某些网络请求（例如登录）必须携带一些必须的特殊信息，如果没有这些信息，可以将其拦截，然后跳转到一个特定的地方（比如登录页面）</li></ol><h3 id="response拦截器"><a href="#response拦截器" class="headerlink" title="response拦截器"></a>response拦截器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">baseURL</span><span class="token operator">:</span><span class="token string">'http://123.207.32.32:8000'</span><span class="token punctuation">,</span>      <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//对响应数据操作完后也要把数据返回出去，否则前端的then中取得的响应结果是undefined</span>      <span class="token keyword">return</span> result<span class="token punctuation">.</span>data    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">instance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ol><li>若有多个拦截器存在，请求拦截器逆序执行，响应拦截器顺序执行。</li><li>如果使用create创建了的实例里面定义了拦截器，那么在外部定义的全局拦截器将被忽略。</li><li>拦截器可以赋值给一个标记变量，然后用拦截器中的eject()方法去执行这个方法，就可以取消拦截器。（如同定时器）</li><li>拦截器基于Promise，响应拦截器将Promise的状态改变为Resolved，响应响应拦截器执行成功或失败的回调将由response的结果决定，一但有一个拦截器将promise的状态改变为Rejected，他再执行响应拦截器会执行错误位置的回调。</li></ol><p>问：拦截器与transformRequest/transformResponse的差别？</p><p>答：</p><p>相同点：都能在发送请求前/接收到响应后为数据进行拦截处理。</p><p>不同点：</p><ul><li>拦截器支持所有网络请求方法，而transformRequest/transformResponse只能支持post、put、patch方法。</li><li>拦截器能对网络请求的所有配置进行修改，而transformRequest/transformResponse只能对data与headers进行操作。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端工程化 </tag>
            
            <tag> 前端开发 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础</title>
      <link href="/2022/05/16/javascript-basal/"/>
      <url>/2022/05/16/javascript-basal/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h1><h2 id="JS代码编写位置"><a href="#JS代码编写位置" class="headerlink" title="JS代码编写位置"></a>JS代码编写位置</h2><p>可以将JS代码编写到<strong>外部js文件中</strong>，通过script标签引入（最推荐的方式）</p><p>可以引用到不同的页面中，也可以利用浏览器的缓存机制</p><p>script标签一旦用于引入外部文件，就不能继续在内编写代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"js/script.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以将JS代码编写到<strong>script标签中</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是内部的JS代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以将JS代码编写到<strong>标签的onclick属性中</strong>，当我们点击按钮时，JS代码才会执行</p><p>虽然可以写在标签的属性中，但是他们属于结构与行为耦合，不方便维护（不推荐使用）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"alert('讨厌，你点我干嘛~~');"</span><span class="token operator">></span>点我一下<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以将JS代码写在超链接的<strong>href属性中</strong>，这样当点击超链接时，会执行JS代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:alert('让你点你就点！！');"</span><span class="token operator">></span>你也点我一下<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>多行注释 /**/</p></li><li><p>单行注释//</p></li></ul><h3 id="编写规范"><a href="#编写规范" class="headerlink" title="编写规范"></a>编写规范</h3><ul><li><p>JS中严格区分大小写</p></li><li><p>JS中每条语句以分号结尾</p></li></ul><h3 id="字面量与变量"><a href="#字面量与变量" class="headerlink" title="字面量与变量"></a>字面量与变量</h3><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><p>字面量都是一些不可改变的值</p><p>​    如：1 2 3 4 5</p><p>可以直接使用，但是一般不会直接使用</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量用于保存字面量，其值可以随便改变，在开发过程中一般使用变量去描述一个字面量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//声明变量</span><span class="token comment">//在js中使用var关键字来声明一个变量</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token comment">//为变量赋值</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">123124223423424</span><span class="token punctuation">;</span><span class="token comment">//声明和赋值同时进行</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">789</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//用变量描述字面量量</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>在JS中所有的可以由我们自主命名的都可以称为是标识符</p><p>​    例如：变量名、函数名、属性名都属于标识符</p><p>命名一个标识符时需要遵守如下的规则：</p><ul><li><p>标识符中可以含有字母、数字、下划线、$</p></li><li><p>标识符不能以数字开头</p></li><li><p>标识符不能使ES中的关键字或保留字</p></li><li><p>标识符一般采用驼峰命名法</p></li></ul><p>JS底层保存标识符时实际上时采用Unicode编码，因此理论上所有utf-8中含有的内容都可以作为标识符</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>指字面量的类型，JS中一共有6种数据类型</p><p>​    String(字符串)、Number(数值)、Boolean(布尔值)、Null(空值)、Undefined(未定义)、Object(对象)</p><p>​    其中String Number Boolean Null Undefined属于<strong>基本数据类型</strong></p><p>​    而Object属于<strong>引用数据类型</strong></p><p> 对象(引用)类型</p><p>​    Object: 任意对象</p><p>​    Function: 一种特别的对象(可以执行)</p><p>​    Array: 一种特别的对象(数值下标, 内部数据是有序的)</p><h4 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h4><ul><li>typeof<ul><li>能判断：undefined、数值、字符串、布尔值、function，结果返回一个数据类型的字符串</li><li>不能判断：null与Object——因为为了方便存储这两者的二进制都是以00xx开头，算是个远古遗留的bug。Object与array</li></ul></li><li>instanceof<ul><li>判断对象的具体类型，结果返回一个布尔值</li></ul></li><li>===<ul><li>可以用来判断undefined与null这种值只有一个的数据类型，结果返回一个布尔值</li></ul></li></ul><hr><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>在JS种字符串需要用单引号或双引号引起来，但是不要混着用</p><p>引号不能嵌套，即双引号内不能放双引号，单引号内不能放单引号</p><p>字符串中可以使用\作为转义字符，要表示一些特殊符号时可以使用\进行转义</p><ul><li>​    \“ 表示 “</li><li>​    \ &#39; 表示 ‘</li><li>​    \n 表示换行</li><li>​    \t 制表符</li><li>​    \\ 表示\</li></ul><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>在JS中所有数值都是Number类型，包括证书和浮点数（小数）</p><p>JS中可以表示的数字的最大值</p><ul><li>Number.MAX_VALUE，1.7976931348623157e+308</li><li>Number.MIN_VALUE 大于0的最小值，5e-324</li></ul><p>如果使用Number表示的数字超过了最大值，则会返回一个</p><p>​    Infinity 表示正无穷，-Infinity 表示负无穷</p><hr><p>可以使用一个运算符 typeof来检查一个变量的类型</p><p>​        语法：typeof 变量  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    使用typeof检查Infinity会返回number</p><p>NaN 是一个特殊的数字，表示Not a Number</p><p>​    使用typeof检查一个NaN也会返回number</p><p>在JS中整数的运算基本可以保证精确</p><p>如果使用JS进行浮点运算，可能得到一个不精确的结果</p><p><strong>所以千万不要使用JS进行对精确度要求比较高的运算</strong></p><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><p>布尔值只有两个（true、false）主要用来做逻辑判断</p><p>使用typeof检查一个布尔值时，会返回boolean</p><h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><p>空值类型的值只有一个，就是null</p><p>null这个值专门用来表示一个为空的对象</p><p>使用typeof检查一个null值时，会返回object</p><h4 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h4><p>未定义类型的值只有一个，就是undefined</p><p>当声明一个变量，但是并不给变量赋值时，它的值就是undefined</p><p>使用typeof检查一个undefined时也会返回undefined</p><hr><ol><li>undefined与null的区别?</li></ol><p>undefined代表定义未赋值</p><p>nulll定义并赋值了, 只是值为null</p><ol start="2"><li>什么时候给变量赋值为null呢?</li></ol><p>初始赋值, 表明将要赋值为对象</p><p>结束前, 让对象成为垃圾对象(被垃圾回收器回收)</p><ol start="3"><li><p>严格区别变量类型与数据类型?</p><p>数据的类型</p><p>​     基本类型</p><p>​     对象类型</p><p> 变量的类型(变量内存值的类型)</p><pre><code> 基本类型: 保存就是基本类型的数据  引用类型: 保存的是地址值</code></pre></li></ol><hr><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>指将一个数据类型强制转换为其他的数据类型</p><p>主要指将其他数据类型转换为String、Number、Boolean</p><hr><h4 id="将其他数据类型转换为String"><a href="#将其他数据类型转换为String" class="headerlink" title="将其他数据类型转换为String"></a>将其他数据类型转换为String</h4><p>方法一：</p><ul><li>调用倍转换数据类型的 toString()方法</li><li>该方法不会影响到原变量，它会将转换的结果返回</li><li>但是注意：null和undefined这两个值没有toString()方法，如果调用他们的方法，会报错。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//nunber</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123</span>a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//报错</span>a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：</p><ul><li>调用String()函数，并将被转换的数据作为参数传递给函数</li><li>使用String()函数做强制类型转换时，</li><li>对于Number和Boolean实际上就是调用的toString()方法</li><li>但是对于null和undefined，就不会调用toString()方法</li><li>它会将 null 直接转换为 “null”</li><li>将 undefined 直接转换为 “undefined”</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//调用String()函数，来将a转换为字符串</span>a <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"123"</span>a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"null"</span>a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"undefined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将其他数据类型转换为Number"><a href="#将其他数据类型转换为Number" class="headerlink" title="将其他数据类型转换为Number"></a>将其他数据类型转换为Number</h4><p>方法一：</p><p>使用Number()函数</p><ul><li><p>字符串 –&gt; 数字</p><p>如果是纯数字的字符串，则直接将其转换为数字</p><p>如果字符串中有非数字的内容，则转换为NaN</p><p>如果字符串是一个空串或者是一个全是空格的字符串，则转换为0</p></li><li><p>布尔 –&gt; 数字</p><p>true 转成 1</p><p>false 转成 0</p></li><li><p>null –&gt; 数字   0</p></li><li><p>undefined –&gt; 数字 NaN</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token comment">//调用Number()函数来将a转换为Number类型</span>a <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123</span>a <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：</p><ul><li>parseInt() 把一个字符串转换为一个整数</li><li>parseFloat() 把一个字符串转换为一个浮点数</li></ul><p>这种方式专门用来对付字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token string">"123567a567px"</span><span class="token punctuation">;</span><span class="token comment">//调用parseInt()函数将a转换为Number</span><span class="token comment">/** parseInt()可以将一个字符串中的有效的整数内容去出来，* 然后转换为Number*/</span>a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123567</span><span class="token comment">/** parseFloat()作用和parseInt()类似，不同的是它可以获得有效的小数*/</span>a <span class="token operator">=</span> <span class="token string">"123.456.789px"</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123.456</span><span class="token comment">/** 如果对非String使用parseInt()或parseFloat()* 它会先将其转换为String然后在操作*/</span>a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//"true"</span>a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NaN</span>a <span class="token operator">=</span> <span class="token number">198.23</span><span class="token punctuation">;</span><span class="token comment">//"198.23"</span>a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//198</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将其他数据类型转换为Boolean"><a href="#将其他数据类型转换为Boolean" class="headerlink" title="将其他数据类型转换为Boolean"></a>将其他数据类型转换为Boolean</h4><p>使用Boolean()函数</p><ul><li><p>数字 —&gt; 布尔</p><p>除了0和NaN，其余的都是true</p></li><li><p>字符串 —&gt; 布尔</p><p>除了空串，其余的都是true</p></li><li><p>null和undefined都会转换为false</p></li><li><p>对象也会转换为true</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">//true</span>a <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">//true</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//false</span>a <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span> <span class="token comment">//true</span>a <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">//false</span>a <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//true</span>a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//false</span>a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他进制类型的数字"><a href="#其他进制类型的数字" class="headerlink" title="其他进制类型的数字"></a>其他进制类型的数字</h4><ul><li>如果需要表示16进制的数字，则需要以0x开头</li><li>如果需要表示8进制的数字，则需要以0开头</li><li>如果要要表示2进制的数字，则需要以0b开头</li><li>但是不是所有的浏览器都支持</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//十六进制</span>a <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">0xCafe</span><span class="token punctuation">;</span><span class="token comment">//八进制数字</span>a <span class="token operator">=</span> <span class="token number">070</span><span class="token punctuation">;</span><span class="token comment">//二进制数字</span>a <span class="token operator">=</span> <span class="token number">0b10</span><span class="token punctuation">;</span><span class="token comment">//像"070"这种字符串，有些浏览器会当成8进制解析，有些会当成10进制解析</span>a <span class="token operator">=</span> <span class="token string">"070"</span><span class="token punctuation">;</span><span class="token comment">//可以在parseInt()中传递一个第二个参数，来指定数字的进制</span>a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token comment">//对于Number调用toString()时可以在方法中传递一个整数作为参数</span><span class="token comment">//此时它将会把数字转换为指定的进制,如果不指定则默认转换为10进制</span>a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11111111</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符也叫操作符</p><ul><li>通过运算符可以对一个或多个值进行运算,并获取运算结果</li><li>比如：typeof就是运算符，可以来获得一个值的类型</li><li>   它会将该值的类型以字符串的形式返回</li><li>   number string boolean undefined object</li></ul><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>当对非Number类型的值进行运算时，会将这些值转换为Number然后在运算</p><p>任何值和NaN做运算都得NaN</p><h5 id=""><a href="#" class="headerlink" title="+"></a>+</h5><p>​    +可以对两个值进行加法运算，并将结果返回</p><p>​    如果对两个字符串进行加法运算，则会做拼串</p><p>​    会将两个字符串拼接为一个字符串，并返回</p><p>​    任何的值和字符串做加法运算，都会先转换为字符串，然后再和字符串做拼串的操作</p><p>​    任何值和字符串相加都会转换为字符串，并做拼串操作</p><p>​    我们可以利用这一特点，来将一个任意的数据类型转换为String</p><p>​    我们只需要为任意的数据类型 + 一个 “” 即可将其转换为String</p><p>​    这是一种隐式的类型转换，由浏览器自动完成，实际上它也是调用String()函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>c <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//"123"</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"3"</span><span class="token punctuation">;</span> <span class="token comment">//33</span>result <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="-1"><a href="#-1" class="headerlink" title="-"></a>-</h5><p>​    - 可以对两个值进行减法运算，并将结果返回</p><h5 id="-2"><a href="#-2" class="headerlink" title="*"></a>*</h5><p>​    *可以对两个值进行乘法运算</p><h5 id="-3"><a href="#-3" class="headerlink" title="/"></a>/</h5><p>​    / 可以对两个值进行除法运算</p><h5 id="-4"><a href="#-4" class="headerlink" title="%"></a>%</h5><p>​    % 取模运算（取余数）</p><ul><li>任何值做- * /运算时都会自动转换为Number</li><li>我们可以利用这一特点做隐式的类型转换</li><li>可以通过为一个值 -0 *1 /1来将其转换为Number</li><li>原理和Number()函数一样，使用起来更加简单</li></ul><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><p>一元运算符，只需要一个操作数</p><h5 id="正号"><a href="#正号" class="headerlink" title="+正号"></a>+正号</h5><p>正号不会对数字产生任何影响</p><h5 id="负号"><a href="#负号" class="headerlink" title="- 负号"></a>- 负号</h5><p>负号可以对数字进行负号的取反</p><p>对于非Number类型的值，它会将先转换为Number，然后在运算</p><p>可以对一个其他的数据类型使用+,来将其转换为number</p><p>它的原理和Number()函数一样</p><hr><h5 id="自增"><a href="#自增" class="headerlink" title="++自增"></a>++自增</h5><p>通过自增使变量在自身基础上加1</p><p>分为<strong>前++<strong>与</strong>后++</strong>,无论是a++ 还是 ++a，都会立即使原变量的值自增1</p><p>不同的是a++ 和 ++a的值不同</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//a++的值等于原变量的值（自增前的值）</span><span class="token keyword">var</span> result1<span class="token operator">=</span>a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//result1=1,a=2,</span><span class="token comment">//++a的值等于新值 （自增后的值）</span><span class="token keyword">var</span> result2<span class="token operator">=</span><span class="token operator">++</span>a<span class="token punctuation">;</span><span class="token comment">//result2=3,a=3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="–自减"><a href="#–自减" class="headerlink" title="–自减"></a>–自减</h5><p>通过自减可以使变量在自身的基础上减1</p><p>分为**前–<strong>与</strong>后–**，无论是a– 还是 –a 都会立即使原变量的值自减1</p><p>不同的是a– 和 –a的值不同</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//a--的值等于原变量的值（自减前的值）</span><span class="token keyword">var</span> result1<span class="token operator">=</span>a<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//result1=3,a=2,</span><span class="token comment">//--a的值等于新值 （自减后的值）</span><span class="token keyword">var</span> result2<span class="token operator">=</span><span class="token operator">--</span>a<span class="token punctuation">;</span><span class="token comment">//result2=1,a=1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><h5 id="！非"><a href="#！非" class="headerlink" title="！非"></a>！非</h5><p>!可以用来对一个值进行非运算</p><p>​       * - 所谓非运算就是值对一个布尔值进行取反操作</p><p>​       *   true变false，false变true</p><p>​       * - 如果对一个值进行两次取反，它不会变化</p><p>​       * - 如果对非布尔值进行元素，则会将其转换为布尔值，然后再取反</p><p>​       *   所以我们可以利用该特点，来将一个其他的数据类型转换为布尔值</p><p>​       *   可以为一个任意数据类型取两次反，来将其转换为布尔值，</p><p>​       *   原理和Boolean()函数一样</p><h5 id="amp-amp-与"><a href="#amp-amp-与" class="headerlink" title="&amp;&amp;与"></a>&amp;&amp;与</h5><p>&amp;&amp;可以对符号两侧的值进行与运算并返回结果</p><p>​       * - 运算规则：</p><p>​       *   - 两个值中只要有一个值为false就返回false，</p><p>​       *     只有两个值都为true时，才会返回true</p><p>​       *   - JS中的“与”属于短路的与，</p><p>​       *     如果第一个值为false，则不会看第二个值</p><h5 id="或"><a href="#或" class="headerlink" title="|| 或"></a>|| 或</h5><p>||可以对符号两侧的值进行或运算并返回结果</p><p>​       * - 运算规则：</p><p>​       *   - 两个值中只要有一个true，就返回true</p><p>​       *     如果两个值都为false，才返回false</p><p>​       *   - JS中的“或”属于短路的或</p><p>​       *     如果第一个值为true，则不会检查第二个值</p><p>&amp;&amp; || 非布尔值的情况</p><p>​       * - 对于非布尔值进行与或运算时，</p><p>​       *   会先将其转换为布尔值，然后再运算，并且返回原值</p><p>​       * - 与运算：</p><p>​       *   - 如果第一个值为true，则必然返回第二个值</p><p>​       *   - 如果第一个值为false，则直接返回第一个值</p><p>​       * </p><p>​       * - 或运算</p><p>​       *   - 如果第一个值为true，则直接返回第一个值</p><p>​       *   - 如果第一个值为false，则返回第二个值</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//true &amp;&amp; true</span><span class="token comment">//与运算：如果两个值都为true，则返回后边的</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//与运算：如果两个值中有false，则返回靠前的false</span><span class="token comment">//false &amp;&amp; true</span>result <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//false &amp;&amp;　false</span>result <span class="token operator">=</span> <span class="token number">NaN</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">//true || true</span><span class="token comment">//如果第一个值为true，则直接返回第一个值</span>result <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token number">NaN</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//如果第一个值为false，则直接返回第二个值</span>result <span class="token operator">=</span> <span class="token number">NaN</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token number">NaN</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token string">"你好"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"result = "</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="= 赋值运算符"></a>= 赋值运算符</h4><p>=可以将符号右侧的值赋值给符号左侧的变量</p><h5 id="-5"><a href="#-5" class="headerlink" title="+="></a>+=</h5><p>​    a += 5 等价于 a = a + 5</p><h5 id="-6"><a href="#-6" class="headerlink" title="-="></a>-=</h5><p>​       * a -= 5 等价于 a = a - 5</p><h5 id="-7"><a href="#-7" class="headerlink" title="*="></a>*=</h5><p>​       * a *= 5 等价于 a = a * 5</p><h5 id="-8"><a href="#-8" class="headerlink" title="/="></a>/=</h5><p>​       * a /= 5 等价于 a = a / 5</p><h5 id="-9"><a href="#-9" class="headerlink" title="%="></a>%=</h5><p>​       * a %= 5 等价于 a = a % 5</p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>通过关系运算符可以比较两个值之间的大小关系，</p><p>如果关系成立它会返回true，如果关系不成立则返回false</p><h5 id="gt-大于号"><a href="#gt-大于号" class="headerlink" title="&gt; 大于号"></a>&gt; 大于号</h5><p>判断符号左侧的值是否大于右侧的值</p><p>如果关系成立，返回true，如果关系不成立则返回false</p><h5 id="gt-大于等于"><a href="#gt-大于等于" class="headerlink" title="&gt;= 大于等于"></a>&gt;= 大于等于</h5><p>判断符号左侧的值是否大于或等于右侧的值</p><h5 id="lt-小于号"><a href="#lt-小于号" class="headerlink" title="&lt; 小于号"></a>&lt; 小于号</h5><p>判断符号左侧的值是否小于右侧的值</p><p>如果关系成立，返回true，如果关系不成立则返回false</p><h5 id="lt-小于等于"><a href="#lt-小于等于" class="headerlink" title="&lt;= 小于等于"></a>&lt;= 小于等于</h5><p>判断符号左侧的值是否小于或等于右侧的值</p><h5 id="非数值的情况"><a href="#非数值的情况" class="headerlink" title="非数值的情况"></a>非数值的情况</h5><p>对于非数值进行比较时，会将其转换为数字然后在比较</p><p>如果符号两侧的值都是字符串时，不会将其转换为数字进行比较</p><p>而会分别比较字符串中字符的Unicode编码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">/** 在字符串中使用转义字符输入Unicode编码* \u四位编码*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"\u2620"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>在网页中使用Unicode编码<span class="token operator">&amp;</span>#编码<span class="token punctuation">;</span> 这里的编码需要的是<span class="token number">10</span>进制<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>h1 style<span class="token operator">=</span><span class="token string">"font-size: 200px;"</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">9760</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h1 style<span class="token operator">=</span><span class="token string">"font-size: 200px;"</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">9856</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h4><p>相等运算符用来比较两个值是否相等，</p><p>如果相等会返回true，否则返回false</p><h5 id="相等"><a href="#相等" class="headerlink" title="==相等"></a>==相等</h5><p>当使用==来比较两个值时，如果值的类型不同，则会自动进行类型转换，将其转换为相同的类型，然后再比较</p><h5 id="！-不相等"><a href="#！-不相等" class="headerlink" title="！=不相等"></a>！=不相等</h5><p>不相等用来判断两个值是否不相等，如果不相等返回true，否则返回false</p><p>不相等也会对变量进行自动的类型转换，如果转换后相等它也会返回false</p><h5 id="全等"><a href="#全等" class="headerlink" title="===全等"></a>===全等</h5><p>用来判断两个值是否全等</p><p>它和相等类似，不同的是它不会做自动的类型转换</p><p>如果两个值的类型不同，直接返回false</p><h5 id="不全等"><a href="#不全等" class="headerlink" title="!==不全等"></a>!==不全等</h5><p>用来判断两个值是否不全等</p><p>和不等类似，不同的是它不会做自动的类型转换</p><p>如果两个值的类型不同，直接返回true</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//console.log(a == 4); //false</span><span class="token comment">//console.log("1" == 1); //true</span><span class="token comment">//console.log(true == "1"); //true</span><span class="token comment">//console.log(null == 0); //false</span><span class="token comment">/** undefined 衍生自 null* 所以这两个值做相等判断时，会返回true*/</span><span class="token comment">//console.log(undefined == null);</span><span class="token comment">/** NaN不和任何值相等，包括他本身*/</span><span class="token comment">//console.log(NaN == NaN); //false</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">//判断b的值是否是NaN</span><span class="token comment">//console.log(b == NaN);</span><span class="token comment">/** 可以通过isNaN()函数来判断一个值是否是NaN* 如果该值是NaN则返回true，否则返回false*/</span><span class="token comment">//console.log(isNaN(b));</span><span class="token comment">//console.log(10 != 5); //true</span><span class="token comment">//console.log(10 != 10); //false</span><span class="token comment">//console.log("abcd" != "abcd"); //false</span><span class="token comment">//console.log("1" != 1);//false</span><span class="token comment">//console.log("123" === 123);//false</span><span class="token comment">//console.log(null === undefined);//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">!==</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><p>条件运算符也叫三元运算符</p><p>​       * 语法：</p><p>​       *   条件表达式?语句1:语句2;</p><p>​       * - 执行的流程：</p><p>​       *   条件运算符在执行时，首先对条件表达式进行求值，</p><p>​       *     如果该值为true，则执行语句1，并返回执行结果</p><p>​       *     如果该值为false，则执行语句2，并返回执行结果</p><p>​       *   如果条件的表达式的求值结果是一个非布尔值，</p><p>​       *     会将其转换为布尔值然后在运算</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">143</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment">//a > b ? alert("a大"):alert("b大");</span><span class="token comment">//获取a和b中的最大值</span><span class="token comment">//var max = a > b ? a : b;</span><span class="token comment">//获取a b c 中的大值</span><span class="token comment">//max = max > c ? max : c;</span><span class="token comment">//这种写法不推荐使用，不方便阅读</span><span class="token keyword">var</span> max <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c <span class="token operator">?</span> a <span class="token operator">:</span>c<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>b <span class="token operator">></span> c <span class="token operator">?</span> b <span class="token operator">:</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//console.log("max = "+max);</span><span class="token comment">//"hello"?alert("语句1"):alert("语句2");</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** , 运算符* 使用,可以分割多个语句，一般可以在声明多个变量时使用,*/</span><span class="token comment">//使用,运算符同时声明多个变量</span><span class="token comment">//var a , b , c;</span><span class="token comment">//可以同时声明多个变量并赋值</span><span class="token comment">//var a=1 , b=2 , c=3;</span><span class="token comment">//alert(b);</span><span class="token comment">/** 就和数学中一样，在JS中运算符也有优先级，* 比如：先乘除 后加减* 在JS中有一个运算符优先级的表，* 在表中越靠上优先级越高，优先级越高越优先计算，* 如果优先级一样，则从左往右计算。* 但是这个表我们并不需要记忆，如果遇到优先级不清楚* 可以使用()来改变优先级*/</span><span class="token comment">//var result = 1 + 2 * 3;</span><span class="token comment">/** 如果||的优先级高，或者两个一样高，则应该返回3* 如果与的优先级高，则应该返回1* */</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"result = "</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基础语句"><a href="#基础语句" class="headerlink" title="基础语句"></a>基础语句</h3><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** 我们的程序是由一条一条语句构成的* 语句是按照自上向下的顺序一条一条执行的* 在JS中可以使用&#123;&#125;来为语句进行分组,* 同一个&#123;&#125;中的语句我们称为是一组语句，* 它们要么都执行，要么都不执行，* 一个&#123;&#125;中的语句我们也称为叫一个代码块* 在代码块的后边就不用再编写;了* * JS中的代码块，只具有分组的的作用，没有其他的用途* 代码块内容的内容，在外部是完全可见的*/</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"语句"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a=10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h4><p>JS中的程序是从上到下一行一行执行的</p><p>通过流程控制语句可以控制程序执行流程，</p><p>使程序可以根据一定的条件来选择执行</p><p>语句的分类：</p><ol><li>条件判断语句</li><li>条件分支语句</li><li>循环语句</li></ol><h5 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h5><p>使用条件判断语句可以在执行某个语句之前进行判断， 如果条件成立才会执行语句，条件不成立则语句不执行。</p><p><strong>if语句</strong></p><p>语法：</p><p>if(条件表达式){</p><p>​    语句…w</p><p>​    }</p><p>if语句在执行时，会先对条件表达式进行求值判断</p><ul><li>如果条件表达式的值为true，则执行if后的语句</li><li>如果条件表达式的值为false，则不会执行if后的语句。</li><li>if语句只能控制紧随其后的那个语句</li><li>如果希望if语句可以控制多条语句，可以将这些语句统一放到代码块中</li><li>if语句后的代码块不是必须的，但是在开发中尽量写上代码块，即使if后只有一条语句</li></ul><hr><p><strong>if…else…语句</strong></p><p>语法：</p><p>if(条件表达式){</p><p>​    语句…</p><p>​    }else{</p><p>​    语句…</p><p>​    }</p><p>当该语句执行时，会先对if后的条件表达式进行求值判断</p><ul><li><p>如果该值为true，则执行if后的语句</p></li><li><p>如果该值为false，则执行else后的语句</p></li></ul><hr><p><strong>if…else if…else语句</strong></p><p>语法：</p><p>if(条件表达式){</p><p>​       语句…</p><p>​       }else if(条件表达式){</p><p>​       语句…</p><p>​       }else if(条件表达式){</p><p>​       语句…</p><p>​       }else{</p><p>​       语句…</p><p>​       }</p><p>if…else if…else</p><p>当该语句执行时，会从上到下依次对条件表达式进行求值判断</p><ul><li>如果值为true，则执行当前语句</li><li>如果值为false，则继续向下判断</li><li>如果所有的条件都不满足，则执行最后一个else后的语句</li></ul><p>该语句中，只会有一个代码块被执行，一旦代码块执行了，则直接结束语句</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token comment">/* * 从键盘输入小明的期末成绩: *当成绩为100时，'奖励一辆BMW' *当成绩为[80-99]时，'奖励一台iphone15s' *当成绩为[60-80]时，'奖励一本参考书' *其他时，什么奖励也没有 */</span>       <span class="token comment">/* * prompt()可以弹出一个提示框，该提示框中会带有一个文本框， * 用户可以在文本框中输入一段内容，该函数需要一个字符串作为参数， * 该字符串将会作为提示框的提示文字 *  * 用户输入的内容将会作为函数的返回值返回，可以定义一个变量来接收该内容 */</span>       <span class="token comment">//score就是小明的期末成绩  </span>       <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入小明的成绩(0-100):'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//判断值是否合法</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">||</span> score <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'输入的值不合法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'宝马拿去'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'手机拿去'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'参考书拿去'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'不及格？'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a>条件分支语句</h5><p>条件分支语句也叫switch语句</p><p> 语法：</p><p>   switch(条件表达式){</p><p>​     case 表达式:</p><p>​       语句…</p><p>​       break;</p><p>​    case 表达式:</p><p>​       语句…</p><p>​       break;</p><p>​     default:</p><p>​      语句…</p><p>​       break;</p><p>  }</p><p> 执行流程：</p><p>switch…case..语句</p><p>在执行时会依次将case后的表达式的值和switch后的条件表达式的值进行全等比较，如果比较结果为true，则从当前case处开始执行代码</p><p>当前case后的所有的代码都会执行，我们可以在case的后边跟着一个break关键字，这样可以确保只会执行当前case后的语句，而不会执行其他的case</p><p>如果比较结果为false，则继续向下比较</p><p>如果所有的比较结果都为false，则只执行default后的语句</p><p>switch语句和if语句的功能实际上有重复的，使用switch可以实现if的功能</p><p>同样使用if也可以实现switch的功能，所以我们使用时，可以根据自己的习惯选择。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>score<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"合格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不合格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h5><p>通过循环语句可以反复的执行一段代码多次</p><p><strong>while循环</strong></p><p>语法：</p><p>while(条件表达式){</p><p>​            语句…</p><p>​    }</p><p>while语句在执行时，先对条件表达式进行求值判断</p><p>如果值为true，则执行循环体，循环体执行完毕以后，继续对表达式进行判断</p><p>如果为true，则继续执行循环体，以此类推，如果值为false，则终止循环</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">/* * 假如投资的年利率为5%，试求从1000块增长到5000块，需要花费多少年 * 1000 1000*1.05 * 1050 1050*1.05 */</span><span class="token comment">//定义一个变量，表示当前的钱数</span><span class="token keyword">var</span> money <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//定义一个计数器</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//定义一个while循环来计算每年的钱数</span><span class="token keyword">while</span><span class="token punctuation">(</span>money <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>money <span class="token operator">*=</span> <span class="token number">1.05</span><span class="token punctuation">;</span><span class="token comment">//使count自增</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//console.log(money);</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"一共需要"</span><span class="token operator">+</span>count<span class="token operator">+</span><span class="token string">"年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>do…while循环</strong></p><p>语法：</p><p>   do{</p><p>​     语句…</p><p>   }while(条件表达式)</p><p>do…while语句在执行时，会先执行循环体，循环体执行完毕以后，在对while后的条件表达式进行判断，</p><p>如果结果为true，则继续执行循环体，执行完毕继续判断以此类推</p><p>如果结果为false，则终止循环</p><p>实际上这两个语句功能类似，不同的是<strong>while是先判断后执行，而do…while会先执行后判断</strong></p><p><strong>do…while可以保证循环体至少执行一次，而while不能</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">/* * 从键盘输入小明的期末成绩: *当成绩为100时，'奖励一辆BMW' *当成绩为[80-99]时，'奖励一台iphone15s' *当成绩为[60-80]时，'奖励一本参考书' *其他时，什么奖励也没有 */</span><span class="token comment">/* * prompt()可以弹出一个提示框，该提示框中会带有一个文本框， * 用户可以在文本框中输入一段内容，该函数需要一个字符串作为参数， * 该字符串将会作为提示框的提示文字 * 用户输入的内容将会作为函数的返回值返回，可以定义一个变量来接收该内容 */</span><span class="token comment">//将prompt放入到一个循环中</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//score就是小明的期末成绩</span><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入小明的期末成绩(0-100):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断用户输入的值是否合法</span><span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//满足该条件则证明用户的输入合法，退出循环</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入有效的分数！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断值是否合法</span><span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">||</span> score <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"拉出去毙了~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//根据score的值来决定给小明什么奖励</span><span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//奖励一台宝马</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"宝马，拿去~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//奖励一个手机</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"手机，拿去玩~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//奖励一本参考书</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"参考书，拿去看~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"棍子一根~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>for循环</strong></p><p>for语句，也是一个循环语句，也称为for循环</p><p>在for循环中，为我们提供了专门的位置用来放三个表达式：</p><p>   1.初始化表达式</p><p>​    2.条件表达式</p><p>   3.更新表达式</p><p>for循环的语法：</p><p>   for(①初始化表达式;②条件表达式;④更新表达式){</p><p>​     ③语句…</p><p>   }</p><p>for循环的执行流程：</p><p>​     ①执行初始化表达式，初始化变量（初始化表达式只会执行一次）</p><p>​     ②执行条件表达式，判断是否执行循环。</p><p>​       如果为true，则执行循环③</p><p>​       如果为false，终止循环</p><p>​     ④执行更新表达式，更新表达式执行完毕继续重复②</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>script<span class="token operator">></span>     <span class="token comment">/** 水仙花数是指一个3位数，它的每个位上的数字的3 次幂之和等于它本身。   （例如：1^3 + 5^3 + 3^3 = 153）,请打印所有的水仙花数。*/</span>     <span class="token keyword">var</span> i<span class="token punctuation">,</span> g<span class="token punctuation">,</span> s<span class="token punctuation">,</span> b<span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">999</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         g <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment">//parseInt()取整，在Javascript中若不加上parseInt()，i/10%10会计算出小数</span>         s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         b <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">*</span> g <span class="token operator">*</span> g <span class="token operator">+</span> s <span class="token operator">*</span> s <span class="token operator">*</span> s <span class="token operator">+</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">/* * 1.打印99乘法表 *  1*1=1 *  1*2=2 2*2=4 *  1*3=3 2*3=6 3*3=9 *  1*4=4 2*4=8 3*4=12 4*4=16 * ....9*9=81 *  * 2.打印出1-100之间所有的质数 */</span><span class="token comment">//创建外层循环，用来控制乘法表的高度</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">9</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//创建一个内层循环来控制图形的宽度</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;span>"</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>i<span class="token operator">*</span>j<span class="token operator">+</span><span class="token string">"&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出一个换行</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>break关键字和continue关键字</strong></p><p>break关键字可以用来退出switch或循环语句</p><p>不能在if语句中使用break和continue</p><p>break关键字，会立即终止离他最近的那个循环语句</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"@外层循环"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"内层循环:"</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//@外层循环0</span><span class="token comment">//@外层循环1</span><span class="token comment">//@外层循环2</span><span class="token comment">//@外层循环3</span><span class="token comment">//@外层循环4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以为循环语句创建一个label，来标识当前的循环</p><p>label:循环语句</p><p>使用break语句时，可以在break后跟着一个label，</p><p>这样break将会结束指定的循环，而不是最近的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">outer</span><span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"@外层循环"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span> outer<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"内层循环:"</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//@外层循环0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>continue关键字可以用来跳过当次循环</p><p>同样continue也是默认只会对离他最近的循环循环起作用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">outer</span><span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"-->"</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"@--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//@--->0</span><span class="token comment">//@--->1</span><span class="token comment">//@--->2</span><span class="token comment">//@--->3</span><span class="token comment">//@--->4</span><span class="token comment">//不加continue时每个外循坏上都会多出五次内循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>除了五大基本数据类型外的值全都是对象（Object）</p><p>基本数据类型都是单一的值，值与值之间没有任何关系</p><p>在JS中用来表示一个人的信息（Name Gender Age）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">"吴炜瀚"</span><span class="token punctuation">;</span><span class="token keyword">var</span> gender<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span><span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//若使用基本数据类型创建的数据，我们所建立的变量都是独立的，不能成为一个整体。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对象属于一种复合的数据类型，在对象种可以保存多个不同数据类型的属性。</p><h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><p><strong>内建对象</strong></p><p>​    由ES标准中定义的对象，在任何ES的实现中都可以使用，如Math String Number Boolean Function Object…</p><p><strong>宿主对象</strong></p><p>​    由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象，如BOM DOM</p><p><strong>自定义对象</strong></p><p>​    由开发人员自己创建的对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用new关键字调用的函数，是构造函数constructor</span><span class="token comment">//构造函数是专门用来创建对象的函数</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object</span><span class="token comment">//在对象中保存的值称为属性，语法 对象.属性名=属性值；</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"吴炜瀚"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>gender<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//读取对象中的属性，语法 对象.属性名</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"吴炜瀚"</span><span class="token comment">//修改对象的属性值，语法 对象.属性名=新值</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"wwh"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"wwh"</span><span class="token comment">//删除对象的属性值，语法 delete 对象.属性名</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"Undefined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象的属性名与属性值"><a href="#对象的属性名与属性值" class="headerlink" title="对象的属性名与属性值"></a>对象的属性名与属性值</h3><p><strong>属性名</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"吴炜瀚"</span><span class="token punctuation">;</span><span class="token comment">//对象的属性名不强制要求遵守标识符的规范，什么乱七八糟的名都可以使用，但是尽量还是按照标识符的规范去做</span>obj<span class="token punctuation">.</span>var<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">//如果要使用特殊的属性名，不能采用.的方式来操作，需要使用另一种方式，对象["属性名"]=属性值 读取的时候也要使用这种方式</span>obj<span class="token punctuation">[</span><span class="token string">"123"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">789</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">"123"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"789"</span><span class="token comment">//使用[]这种形式去操作属性更加的灵活</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>属性值</strong></p><p>JS对象的属性值可以是任意的数据类型，甚至也可以是一个对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>test<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>test<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>test<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"吴炜瀚"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>test<span class="token operator">=</span>obj2<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>test<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"吴炜瀚"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用<strong>in运算符</strong>来检查一个对象中是否含有指定的属性，如果有则返回true，没有则返回false</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name"</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"test2"</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h3><p><strong>基本数据类型</strong></p><p>String Number Boolean Null Undefined</p><p><strong>引用数据类型</strong></p><p>Object</p><hr><p>JS中的变量都是保存在栈内存中的</p><p>基本数据类型的值直接在栈内存中存储，值与值之间是独立存在的，修改一个变量不会影响其他的变量</p><p>JS中的对象是保存在堆内存中的</p><p>每创建一个新的对象，就会在堆内存中开辟出一个新的空间，而<strong>变量保存的是对象的内存地址</strong>（对象的引用，类似指针）</p><p>如果两个变量保存的是同一个对象的引用，当一个通过一个变量修改属性时，另一个也会受到影响</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//124</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"吴炜瀚"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"吴炜瀚"</span><span class="token keyword">var</span> obj2<span class="token operator">=</span>obj<span class="token punctuation">;</span><span class="token comment">//将obj指向的地址赋予obj2</span>obj2<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"wwh"</span><span class="token punctuation">;</span><span class="token comment">//将obj2的值name修改后obj的值name也会修改</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"wwh"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"wwh"</span>obj2<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//将obj2的值修改为null，切断其与obj的关联</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"Object"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"null"</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"沙和尚"</span><span class="token punctuation">;</span>obj4<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"沙和尚"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"沙和尚"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"沙和尚"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">==</span> obj4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当比较两个基本数据类型的值时，就是比较值。</p><p>而比较两个引用数据类型时，它是比较的对象的内存地址，</p><p>如果两个对象是一模一样的，但是地址不同，它也会返回false</p><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用对象字面量来创建一个对象</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//=> var obj = new Object();</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"吴炜瀚"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用对象字面量可以在创建对象时直接指定对象中的属性</p><p>语法：{属性名：属性值，属性名：属性值…}</p><p>属性名和属性值是一组一组的名值对结构</p><p>名和值之间使用：连接，多个名值对之间使用，隔开</p><p>而最后一个属性后面不加，</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"吴炜瀚"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对象字面量的属性名可以加引号也可以不加（建议不加）</p><p>如果要使用一些特殊的名字则必须加引号</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"吴炜瀚"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token literal-property property">test</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"wwh"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//test:&#123;name:"wwh"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><p>通过此方法可以给对象添加属性，并且传入配置</p><p>Object.defineProperty(obj, prop, descriptor)</p><p>obj：要操作的对象名</p><p>prop：要定义或修改的属性的名称或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> 。</p><p>descriptor：定义或修改的属性描述符</p><p>descriptor中允许的属性（属性没写默认为false|undefined）：</p><table><thead><tr><th>配置属性名</th><th>配置属性值类型</th><th>作用</th></tr></thead><tbody><tr><td>enumerable</td><td>boolean</td><td>该属性是否能被枚举（如被for…in…）</td></tr><tr><td>configurable</td><td>boolean</td><td>该属性能否被改变或删除</td></tr><tr><td>value</td><td>number、object、function</td><td>为该属性赋值</td></tr><tr><td>writable</td><td>boolean</td><td>此属性能否被赋值运算符重写</td></tr><tr><td>get</td><td>function</td><td>属性的getter，当此属性被访问会调用这个函数，会传入this对象，返回值会被当作属性的值</td></tr><tr><td>set</td><td>function</td><td>属性的setter，当此属性被操作会调用这个函数，要传入一个value作为参数（即新赋于的参数），会传入赋值时的this对象</td></tr></tbody></table><h4 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h4><p>通过此方法可以实现简单的数据代理，也是VUE双向绑定的原理。</p><p>即通过Obj2可以访问或操纵Obj1中的属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj1<span class="token punctuation">.</span>x  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    obj1<span class="token punctuation">.</span>x <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数也是一个对象，在函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码）</p><p>函数中可以保存一些代码在需要的时候调用</p><p>我们可以使用<strong>构造函数</strong>来创建一个函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//使用构造函数创建一个函数对象</span><span class="token keyword">var</span> fun<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用typeof检查一个函数对象时会返回function</span><span class="token comment">//可以将要封装的代码以字符串的形式传递给构造函数</span><span class="token keyword">var</span> fun1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"console.log('hello world')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//封装在函数内的代码不会立即执行，只会在函数被调用的时候执行</span><span class="token comment">//调用函数</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当调用函数时，函数中封装的代码会按照顺序执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在实际开发中很少使用构造函数创建一个函数对象，而是使用<strong>函数声明</strong>来创建一个函数</p><p>语法：</p><p>​    function 函数名 ([形参1，形参2…]){</p><p>​        语句</p><p>}</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以使用<strong>函数表达式</strong>来创建一个函数</p><p>语法：</p><p>​    var 函数名 = function([形参1，形参2….]){</p><p>​        语句</p><p>}</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">fun3</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义一个用来求俩个数之和的函数</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以在函数的（）中来制定一个或多个形参（形式参数）</p><p>多个形参之间使用逗号隔开，声明形参就相当于在函数内部生命了对应的变量，但是不赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在调用函数时，可以在（）中制定实参（实际参数）</span><span class="token comment">//实参将会赋值给函数中对应的形参</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p>​        调用函数时解析器不会检查实参的类型，函数的实参可以时任意的数据类型（甚至是一个对象,一个函数），所以要小心是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查</p><p>​        解析器也不会检查实参的数量，多余的实参不会被赋值,如果实参的数量少于形参的数量，则没有对相应实参的形参会是undifined</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个函数，用来计算三个数的和</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用函数</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"19"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以使用<strong>return</strong>来设置函数的返回值</p><p>语法：</p><p>​        return 值</p><ul><li>​    return后的值将会作为函数的执行结果返回，可以定义一个变量来接收该结果</li><li>​    在函数中return后的语句都不会被执行</li><li>​    return后可以跟任意类型的值（包括对象和函数）</li><li>​    当return后面没有值或没有return则相当于返回一个undefined</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> d <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">;</span><span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用函数</span><span class="token comment">//变量result的值就是函数的执行结果，函数返回什么result的值就是什么</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"19"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** 定义一个函数，判断一个数字是否是偶数，如果是返回true，否则返回false*/</span><span class="token keyword">function</span> <span class="token function">isOu</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">isOu</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** 定义一个函数，可以根据半径计算一个圆的面积，并返回计算结果* 3.14*r*r*/</span><span class="token keyword">function</span> <span class="token function">mianji</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">3.14</span><span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>result <span class="token operator">=</span> <span class="token function">mianji</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//console.log("result = "+result);</span><span class="token comment">/** 创建一个函数，可以在控制台中输出一个人的信息，可以输出人的 name age gender address* 实参可以是任意的数据类型，也可以是一个对象* 当我们的参数过多时，可以将参数封装到一个对象中，然后通过对象传递*/</span><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//console.log("o = "+o);//o=object;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token operator">+</span>o<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">",今年我"</span><span class="token operator">+</span>o<span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"岁了,"</span><span class="token operator">+</span><span class="token string">"我是一个"</span><span class="token operator">+</span>o<span class="token punctuation">.</span>gender<span class="token operator">+</span><span class="token string">"人"</span><span class="token operator">+</span><span class="token string">",我住在"</span><span class="token operator">+</span>o<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//sayHello("猪八戒",28,"高老庄","男");</span><span class="token comment">//创建一个对象，利用对象向函数里面传入参数</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>    <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">"花果山"</span><span class="token punctuation">,</span>    <span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">sayHello</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实参可以是一个对象，也可以是一个函数</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">a</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a相当于sayHello</span><span class="token punctuation">&#125;</span><span class="token function">fun</span><span class="token punctuation">(</span>sayHello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//fun(function()&#123;alert("hello")&#125;);</span><span class="token function">fun</span><span class="token punctuation">(</span>mianji<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a = return 3.14*r*r</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token function">mianji</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a = 314</span><span class="token comment">/** mianji()* - 调用函数* - 相当于使用的函数的返回值,传的是返回值* * mianji* - 函数对象* - 相当于直接使用函数对象，传的是函数本身*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"函数要执行了~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//使用break可以退出当前的循环</span><span class="token comment">//break;</span><span class="token comment">//continue用于跳过当次循环</span><span class="token comment">//continue;</span><span class="token comment">//使用return可以结束整个函数</span><span class="token comment">//return;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"函数执行完了~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//fun();</span><span class="token comment">/** 返回值可以是任意的数据类型* 也可以是一个对象，也可以是一个函数*/</span><span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//返回一个对象</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"沙和尚"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//在函数内部再声明一个函数</span><span class="token keyword">function</span> <span class="token function">fun4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是fun4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将fun4函数对象作为返回值返回</span><span class="token keyword">return</span> fun4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>a <span class="token operator">=</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><p>函数定义完会立即被调用，这种函数叫立即执行函数</p><p>立即执行函数往往只会执行一次</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//用一个（）将函数括起来表示其是一个整体</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是一个匿名函数~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后一个括号表示立即调用该函数，括号里面可以传入参数</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b = "</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数可以成为对象的属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向对象中添加属性</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"孙悟空"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会显示函数内容</span><span class="token comment">//调方法</span>obj<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会调用函数，得到函数的返回值</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//调函数</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token function-variable function">sayName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//该方式也一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="枚举对象"><a href="#枚举对象" class="headerlink" title="枚举对象"></a>枚举对象</h3><p>枚举对象中的属性可以使用可以使用for … in 语句查询有几个</p><p>语法：</p><p>​    for(var 变量 in 对象){</p><p>​    语句</p><p>}</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"吴炜瀚"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//n是对象中的属性名</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"name" "age"</span><span class="token function">console。log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"吴炜瀚" "18"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>指一个变量的作用的范围</p><p>JS中有两种作用域：全局作用域、函数作用域</p><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><p>直接编写在script标签中的JS代码，都在全局作用域</p><p>全局作用域在页面打开时创建，在页面关闭时销毁</p><p>在全局作用域中有一个全局对象window，它代表的是一个浏览器的窗口，它由浏览器创建我们可以直接使用</p><p>在全局作用域中：</p><ul><li>创建的变量都会作为window对象的属性保存</li><li>创建的函数都会作为window对象的方法保存</li><li>全局作用域中的变量都是全局变量，在页面的任意的部分都可以访问的到</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是fun函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"我是fun函数"</span>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="变量的声明提前"><a href="#变量的声明提前" class="headerlink" title="变量的声明提前"></a>变量的声明提前</h5><p>使用var关键字声明的变量，会所有的代码执行之前被声明，但是不会赋值。</p><p>但是如果声明变量是不使用var关键字，则变量不会被声明提前</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span>b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="函数的声明提前"><a href="#函数的声明提前" class="headerlink" title="函数的声明提前"></a>函数的声明提前</h5><p>使用函数声明形式创建的函数  <em>function 函数名(){}</em>  他会在所有的代码执行之前就给创建，所以我们可以在函数声明前来调用函数</p><p>使用函数表达式创建的函数 <em>var 函数名 = function(){}</em> ，不会被声明提前，所以不能在声明前调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//可以从前调用</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数声明，会被提前创建</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是一个fun函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//函数表达式，不会被提前创建</span><span class="token keyword">var</span> <span class="token function-variable function">fun2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是fun2函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//只能从后调用</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁</p><p>每调用一次函数就会创建一个新的函数作用域，他们之间是互相独立的</p><ul><li>在函数作用域中可以访问到全局作用域的变量</li><li>在全局作用域中无法访问到函数作用域的变量</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//定义一个全局变量</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//定义一个函数作用域</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错：b is not defined;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当函数作用域操作一个变量时，他会现在自身的作用域中寻找</p><p>如果有则直接调用，没有则向上一级作用域中寻找，直到找到全局作用域</p><p>如果全局作用域中依然没有找到，则会报错ReferenceError</p><p>在函数中要访问全局变量可以使用window对象</p><p><strong>在函数作用域中也有如同全局作用域的提前声明的特性</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//在函数中，不使用var声明的变量都会成为全局变量</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//window.a = 20;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span><span class="token comment">//定义形参就相当于在函数作用域中声明了变量</span><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun6</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fun6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span><span class="token comment">//如果在调用函数时传值则会显示该值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是this</p><p>this指向的是一个对象，这个对象我们称为函数执行的 上下文对象，根据函数的调用方式的不同，this会指向不同的对象</p><ul><li>以函数的形式调用时，this永远都是window</li><li>以方法的形式调用时，this就是调用方法的那个对象</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//this可以根据调用者的不同调用不同的属性值</span><span class="token punctuation">&#125;</span><span class="token comment">//创建一个对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token literal-property property">sayName</span><span class="token operator">:</span>fun<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"沙和尚"</span><span class="token punctuation">,</span><span class="token literal-property property">sayName</span><span class="token operator">:</span>fun<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"全局的name属性"</span><span class="token punctuation">;</span><span class="token comment">//以函数形式调用，this是window</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"全局的name属性"</span><span class="token comment">//以方法的形式调用，this是调用方法的对象</span>obj<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"孙悟空"</span>obj2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"沙和尚"</span><span class="token comment">//我们可以使用obj.sayName()可以输出对象中的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数中的方法"><a href="#函数中的方法" class="headerlink" title="函数中的方法"></a>函数中的方法</h3><h4 id="call-和apply"><a href="#call-和apply" class="headerlink" title="call()和apply()"></a><strong>call()和apply()</strong></h4><p>这两个方法都是函数对象的方法，需要通过函数对象来调用</p><p>当对函数调用call()和apply()都会调用函数执行</p><p>在调用call()和apply()可以将一个对象指定为第一个参数，此时这个对象将会成为函数执行时的this，可用于<strong>强制更改this的指向</strong></p><p>this的情况：</p><ul><li>以函数形式调用时，this永远都是window</li><li>以方法的形式调用时，this是调用方法的对象</li><li>以构造函数的形式调用时，this是新创建的那个对象</li><li>使用call和apply调用时，this是指定的那个对象</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以函数形式调用的对象为window</span><span class="token comment">//以下两种形式调用的对象为obj</span><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"obj"</span><span class="token punctuation">,</span><span class="token function-variable function">sayName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"obj2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//obj</span>obj<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//obj2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>call()方法可以将实参在对象之后依次传递</p><p>apply()方法需要将实参封装到一个数组中统一传递</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b = "</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>我们可以使用工厂方法创建对象，通过该方法可以大批量地创建方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//传统方法创建对象</span><span class="token keyword">var</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"wwh"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>gender<span class="token punctuation">;</span><span class="token string">"man"</span><span class="token punctuation">,</span><span class="token function-variable function">sayName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//工厂方法创建对象</span><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name <span class="token punctuation">,</span> age <span class="token punctuation">,</span>gender</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//创建一个新的对象 </span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向对象中添加属性</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>obj<span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>bj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//将新的对象返回</span><span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用工厂方法</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"白骨精"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj4 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"蜘蛛精"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"猪八戒"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用工厂方法创建的对象，使用的构造函数都是Object</p><p>所以创建的对象都是Object这个类型，就导致我们无法区分出多种不同类型的对象</p><h4 id="工厂方法中的构造函数"><a href="#工厂方法中的构造函数" class="headerlink" title="工厂方法中的构造函数"></a><strong>工厂方法中的构造函数</strong></h4><p>为了解决上述无法区分出多种不同类型的对象的问题</p><p>我们可以创建一个构造函数，专门用来创建Person对象</p><p>构造函数就是一个普通的函数，创建方式和普通函数没有区别，不同的是构造函数习惯上首字母大写</p><p>构造函数和普通函数的区别就是调用方式的不同</p><p>普通函数是直接调用，而构造函数需要使用<strong>new关键字</strong>来调用</p><p>构造函数的执行流程：</p><ol><li>立刻创建一个新的对象</li><li>将新建的对象设置为函数中this，在构造函数中可以使用this来引用新建的对象</li><li>逐行执行函数中的代码</li><li>将新建的对象作为返回值返回</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name <span class="token punctuation">,</span> age <span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> per2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"玉兔精"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> per3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"奔波霸"</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person</span><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Dog</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个类。我们将通过一个构造函数创建的对象，称为是该类的实例。</p><p>使用instanceof可以检查一个对象是否是一个类的实例</p><p>语法：</p><p>​    对象 instanceof 构造函数</p><p>​    如果是，则返回true，否则返回false</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token keyword">var</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token comment">//所有的对象都是Object的后代，所以任何对象和Object左instanceof检查时都会返回true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>综上，this的情况：</p><ol><li>当以函数的形式调用时，this是window</li><li>当以方法的形式调用时，谁调用方法this就是谁</li><li>当以构造函数的形式调用时，this就是新创建的那个对象</li></ol><h4 id="构造函数优化"><a href="#构造函数优化" class="headerlink" title="构造函数优化"></a>构造函数优化</h4><p>创建一个Person构造函数，在Person构造函数中，为每一个对象都添加了一个sayName方法。</p><p>目前我们的方法是在构造函数内部创建的，也就是构造函数每执行一次就会创建一个新的sayName方法，也是所有实例的sayName都是唯一的。</p><p>这样就导致了构造函数执行一次就会创建一个新的方法，执行10000次就会创建10000个新的方法，而10000个方法都是一模一样的，这是完全没有必要，完全可以使所有的对象共享同一个方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name <span class="token punctuation">,</span> age <span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token comment">//向对象中添加一个方法</span><span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> fun<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将sayName方法在全局作用域中定义</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello大家好，我是:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> per2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>per<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>per2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per<span class="token punctuation">.</span>sayName <span class="token operator">==</span> per2<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    将fun()函数定义在全局作用域，污染了全局作用域的命名空间，而且定义在全局作用域中也很不安全，为了避免这种风险外卖可以向原型中添加sayName方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//将sayName方法在全局作用域中定义</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello大家好，我是:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//向原型中添加sayName方法</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello大家好，我是:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="原型prototype"><a href="#原型prototype" class="headerlink" title="原型prototype"></a>原型prototype</h4><p>​    我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype，这个属性对应着一个对象，这个对象就是我们所谓的原型对象，如果函数作为普通函数调用prototype没有任何作用</p><p>​    当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象，我们可以通过__ proto__ 来访问该属性</p><p>​    原型对象就相当于一个<strong>公共的区域</strong>，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中共有的内容，统一设置到原型对象中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//向MyClass的原型中添加属性a</span><span class="token class-name">MyClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//向MyClass的原型中添加一个方法</span><span class="token class-name">MyClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//用函数表达式创建两个对象</span><span class="token keyword">var</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> mc2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">MyClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;a=123,sayHello=f&#125;;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc2<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token comment">//向mc中添加a属性</span>mc<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">"我是mc中的a"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我是mc中的a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    当我们访问对象的一个属性或方法时，它会<strong>先在对象自身中寻找</strong>，如果<strong>有则直接使用</strong>，如果<strong>没有则会去原型对象中寻找</strong>，如果找到则直接使用</p><p>​    以后我们创建构造函数时，可以将这些对象共有的属性和方法，<strong>统一添加到构造函数的原型对象中</strong>，这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了</p><h5 id="检查对象中的属性"><a href="#检查对象中的属性" class="headerlink" title="检查对象中的属性"></a><strong>检查对象中的属性</strong></h5><p>使用in检查对象中是否含有某个属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个构造函数</span><span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//向MyClass的原型中添加一个name属性</span><span class="token class-name">MyClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"我是原型中的名字"</span><span class="token punctuation">;</span><span class="token keyword">var</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mc<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"我是原型中的名字"</span><span class="token comment">//使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name"</span> <span class="token keyword">in</span> mc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性</p><p>使用该方法只有当对象自身中含有属性时，才会返回true</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个构造函数</span><span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//向MyClass的原型中添加一个name属性</span><span class="token class-name">MyClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"我是原型中的名字"</span><span class="token punctuation">;</span><span class="token keyword">var</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mc<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"hasOwnProperty"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false,在mc对象中查找</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"hasOwnProperty"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false，在mc对象的原型中查找</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"hasOwnProperty"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true，在mc对象的原型的原型中查找</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null，mc对象的原型的原型的原型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原型对象也是对象，所以它也有原型</p><p>当我们使用一个对象的属性或方法时，会现在自身中寻找</p><p>​    自身中如果有，则直接使用</p><p>​    如果没有则去原型对象中寻找，如果原型对象中有，则使用</p><p>​    如果没有则去原型的原型中寻找,直到找到Object对象的原型</p><p>​    Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回undefined</p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name <span class="token punctuation">,</span> age <span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建一个Person实例</span><span class="token keyword">var</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> per2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> per<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//result = [object Object]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person &#123;name: "孙悟空", age: 18, gender: "男"&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>per2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person &#123;name: "猪八戒", age: 28, gender: "男"&#125;</span><span class="token comment">//修改Person原型的toString</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Person[name="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">",age="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">",gender="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> result2 <span class="token operator">=</span> per<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"result2 = "</span> <span class="token operator">+</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//result2 = Person[name=孙悟空,age=18,gender=男]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h4><p>就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾</p><p>这些垃圾积攒过多以后，会导致程序运行的速度过慢</p><p>所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对对象进行各种操作。。。。</span>obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//断开对象与属性中的链接，以达到垃圾回收的目的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，所以这种垃圾必须进行清理</p><p>​    在JS中拥有<strong>自动的垃圾回收机制</strong>，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作,我们需要做的只是要<strong>将不再使用的对象设置null即可</strong></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组也是一个对象，它和我们普通对象功能类似，也是用来存储一些值的，不同的是普通对象是使用<strong>字符串作为属性名</strong>的，而数组时<strong>使用数字</strong>来<strong>作为索引</strong>操作元素</p><p>索引：从0开始的整数就是索引</p><p>数组的存储性能比普通对象要好，在开发中我们经常使用数组来存储一些数据</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建数组对象</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object</span><span class="token comment">//向数组中添加元素</span><span class="token comment">//语法：数组[索引] = 值</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span><span class="token comment">//读取数组中的元素</span><span class="token comment">//语法：数组[索引]</span><span class="token comment">//如果读取不存在的索引，他不会报错而是返回undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//44</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span><span class="token comment">//获取数组的长度</span><span class="token comment">//可以使用length属性来获取数组的长度(元素的个数)</span><span class="token comment">//语法：数组.length</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token comment">/*对于连续的数组，使用length可以获取到数组的长度（元素的个数）* 对于非连续的数组，使用length会获取到数组的最大的索引+1* 尽量不要创建非连续的数组*/</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11</span><span class="token comment">//修改length</span><span class="token comment">//如果修改的length大于原长度，则多出部分会空出来</span><span class="token comment">//如果修改的length小于原长度，则多出的元素会被隐藏</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10，33，22，44，empty × 6，55</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10，33，22，44</span><span class="token comment">//向数组的最后一个位置添加元素</span><span class="token comment">//语法：数组[数组.length] = 值;</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10, 33, 22, 44, empty × 6, 55, empty × 9, 70, 80, 90</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字面量创建数组"><a href="#字面量创建数组" class="headerlink" title="字面量创建数组"></a>字面量创建数组</h3><p>使用字面量创建数组时，可以在创建时就指定数组中的元素</p><p>语法:[]</p><p>​    var arr = [];</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用构造函数创建数组时，也可以同时添加元素，将要添加的元素作文构造函数的参数传递，元素之间使用,隔开</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10，20，30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个数组数组中只有一个元素10</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token comment">//创建一个长度为10的数组</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组中的元素"><a href="#数组中的元素" class="headerlink" title="数组中的元素"></a>数组中的元素</h3><p>数组中的元素可以是任意的数据类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以是对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"沙和尚"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"猪八戒"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"沙和尚"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以是一个函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//function()&#123;alert(1)&#125;,function()&#123;alert(2)&#125;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>数组中也可以放数组，如下这种数组我们称为二维数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1，2，3，3，4，5，5，6，7</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1，2，3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组中的方法"><a href="#数组中的方法" class="headerlink" title="数组中的方法"></a>数组中的方法</h3><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p>该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</p><p>可以将要添加的元素作为方法的参数传递，这样这些元素将会自动添加到数组的末尾</p><p>该方法会将数组新的长度作为返回值返回</p><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>该方法可以删除数组的最后一个元素,并将被删除的元素作为返回值返回</p><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>向数组开头添加一个或多个元素，并返回新的数组长度</p><p>向前边插入元素以后，其他的元素索引会依次调整</p><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p>可以删除数组的第一个元素，并将被删除的元素作为返回值返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token string">"沙和尚"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"唐僧"</span><span class="token punctuation">,</span><span class="token string">"蜘蛛精"</span><span class="token punctuation">,</span><span class="token string">"白骨精"</span><span class="token punctuation">,</span><span class="token string">"玉兔精"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"孙悟空","猪八戒","沙和尚","唐僧","蜘蛛精","白骨精","玉兔精"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7</span>result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"孙悟空","猪八戒","沙和尚","唐僧","蜘蛛精","白骨精"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span>result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"牛魔王"</span><span class="token punctuation">,</span><span class="token string">"二郎神"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"牛魔王","二郎神","孙悟空","猪八戒","沙和尚","唐僧","蜘蛛精","白骨精"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8</span>result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"牛魔王"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"二郎神","孙悟空","猪八戒","沙和尚","唐僧","蜘蛛精","白骨精"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>可以用来从数组提取指定元素</p><p>该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</p><p>参数：</p><p>1.截取开始的位置的索引,包含开始索引</p><p>2.截取结束的位置的索引,不包含结束索引</p><p>​    第二个参数可以省略不写,此时会截取从开始索引<strong>往后的所有元素</strong></p><p>​    索引可以传递一个负值，如果传递一个负值，则从后往前计算</p><p>​        -1 倒数第一个</p><p>​        -2 倒数第二个</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token string">"沙和尚"</span><span class="token punctuation">,</span><span class="token string">"唐僧"</span><span class="token punctuation">,</span><span class="token string">"白骨精"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"猪八戒","沙和尚","唐僧"</span>result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"唐僧","白骨精"</span>result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"猪八戒", "沙和尚", "唐僧" ，-1表示到倒数第一个为止（不包括倒数第一个）</span>result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"猪八戒", "沙和尚" ，-2表示到倒数第一个为止（不包括倒数第二个）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p>可以用于删除数组中的指定元素</p><p>使用splice()会影响到原数组，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回</p><p>参数：</p><p>​    第一个，表示开始位置的索引</p><p>​    第二个，表示删除的数量</p><p>​    第三个及以后可以传递一些新的元素，这些元素将会自动插入到<strong>开始位置索引前边</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token string">"沙和尚"</span><span class="token punctuation">,</span><span class="token string">"唐僧"</span><span class="token punctuation">,</span><span class="token string">"白骨精"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"孙悟空","猪八戒","沙和尚"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"唐僧","白骨精"</span><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"牛魔王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"牛魔王", "沙和尚"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"孙悟空", "猪八戒"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>concat()可以连接两个或多个数组，并将新的数组返回</p><p>该方法不会对原数组产生影响</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token string">"沙和尚"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"白骨精"</span><span class="token punctuation">,</span><span class="token string">"玉兔精"</span><span class="token punctuation">,</span><span class="token string">"蜘蛛精"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr2<span class="token punctuation">,</span><span class="token string">"牛魔王"</span><span class="token punctuation">,</span><span class="token string">"铁扇公主"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"孙悟空","猪八戒","沙和尚","白骨精","玉兔精","蜘蛛精","牛魔王","铁扇公主"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>该方法可以将数组转换为一个字符串,不会对原数组产生影响，而是将转换后的字符串作为结果返回</p><p>在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符，如果不指定连接符，则默认使用,作为连接符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token string">"沙和尚"</span><span class="token punctuation">,</span><span class="token string">"唐僧"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"@-@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"孙悟空@-@猪八戒@-@沙和尚@-@唐僧"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p> 该方法用来反转数组（前边的去后边，后边的去前边）</p><p>该方法会直接修改原数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3,2,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>可以用来对数组中的元素进行排序</p><p>也会影响原数组，默认会按照Unicode编码进行排序</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"a,b,c,d,e"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即使对于纯数字的数组，使用sort()排序时，也会按照Unicode编码来排序，所以对数字进排序时，可能会得到错误的结果。</p><p>我们可以自己来指定排序的规则</p><p>我们可以在sort()添加一个回调函数，来指定排序规则，回调函数中需要定义两个形参，浏览器将会分别使用数组中的元素作为实参去调用回调函数</p><p>使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//前边的大</span><span class="token comment">/*if(a > b)&#123;return -1;&#125;else if(a &lt; b)&#123;return 1;&#125;else&#123;return 0;&#125;*/</span><span class="token comment">//升序排列</span><span class="token comment">//return a - b;</span><span class="token comment">//降序排列</span><span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器会根据回调函数的返回值来决定元素的顺序</p><ul><li>如果返回一个大于0的值，则元素会交换位置</li><li>如果返回一个小于0的值，则元素位置不变</li><li>如果返回一个0，则认为两个元素相等，也不交换位置</li><li>如果需要升序排列，则返回 a-b</li><li>如果需要降序排列，则返回b-a</li></ul><h3 id="数组中的遍历"><a href="#数组中的遍历" class="headerlink" title="数组中的遍历"></a>数组中的遍历</h3><p>所谓的遍历数组，就是将数组中所有的元素都取出来</p><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token string">"沙和尚"</span><span class="token punctuation">,</span><span class="token string">"唐僧"</span><span class="token punctuation">,</span><span class="token string">"白骨精"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>一般我们都是使用for循环去遍历数组，JS中还为我们提供了一个forEach()方法，用来遍历数组</p><p>这个方法只支持IE8以上的浏览器，IE8及以下的浏览器均不支持该方法，所以如果需要兼容IE8，则不要使用forEach，还是使用for循环来遍历</p><p><strong>forEach()方法需要一个函数作为参数</strong></p><p>像这种函数，由我们创建但是不由我们调用的，我们称为<strong>回调函数</strong></p><p>数组中有几个元素函数就会执行几次，每次执行时，浏览器会将遍历到的元素以实参的形式传递进来，我们可以来定义形参，来读取这些内容</p><p>浏览器会在回调函数中传递三个参数：</p><p>第一个参数，就是当前正在遍历的元素</p><p>第二个参数，就是当前正在遍历的元素的索引</p><p>第三个参数，就是正在遍历的数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string">"猪八戒"</span><span class="token punctuation">,</span><span class="token string">"沙和尚"</span><span class="token punctuation">,</span><span class="token string">"唐僧"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value <span class="token punctuation">,</span> index <span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*孙悟空,0,孙悟空,猪八戒,沙和尚,唐僧猪八戒,1,孙悟空,猪八戒,沙和尚,唐僧沙和尚,2,孙悟空,猪八戒,沙和尚,唐僧唐僧,3,孙悟空,猪八戒,沙和尚,唐僧*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>在调用函数时，浏览器每次都会传递进两个隐含的参数：</p><p>1.函数的上下文对象 this</p><p>2.封装实参的对象 arguments</p><p>arguments是一个类数组对象,它也可以通过索引来操作数据，也可以获取长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//object arguments</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用函数时，我们所传递的<strong>实参</strong>都会在arguments中保存</p><p>arguments.length可以用来获取实参的长度</p><p>我们即使不定义形参，也可以通过arguments来使用实参，只不过比较麻烦</p><p>arguments[0] 表示第一个实参，arguments[1] 表示第二个实参 。。。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"hello"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token punctuation">&#125;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它里边有一个属性叫做callee，这个属性对应一个函数对象，就是当前正在执行的函数的对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee <span class="token operator">==</span> fun<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>在JS中使用Date对象来表示一个时间</p><p>如果直接使用构造函数创建一个Date对象，则会封装为当前代码执行的时间</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个Date对象</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个指定的时间对象，需要在构造函数中传递一个表示时间的字符串作为参数</p><p>年份要写完整，避免歧义</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//日期的格式  月份/日/年 时:分:秒</span><span class="token keyword">var</span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2/18/2011 11:10:30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="getDate"><a href="#getDate" class="headerlink" title="getDate()"></a>getDate()</h4><p>获取当前日期对象是几日</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> date <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="getDay"><a href="#getDay" class="headerlink" title="getDay()"></a>getDay()</h4><p>获取当前日期对象时周几</p><p>会返回一个0-6的值，0 表示周日，1表示周一，以此类推。。。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> day <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth()"></a>getMonth()</h4><p>获取当前时间对象的月份</p><p>会返回一个0-11的值，0 表示1月，1 表示2月，以此类推。。。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> month <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="getFullYear"><a href="#getFullYear" class="headerlink" title="getFullYear()"></a>getFullYear()</h4><p>获取当前日期对象的年份</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> year <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a>getTime()</h4><p>获取当前日期对象的时间戳</p><p>时间戳，指的是从格林威治标准时间的1970年1月1日，0时0分0秒到当前日期所花费的毫秒数（1秒 = 1000毫秒）</p><p>计算机底层在保存时间时使用都是时间戳</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> time <span class="token operator">=</span> d2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="now"><a href="#now" class="headerlink" title="now()"></a>now()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//利用时间戳来测试代码的执行的性能</span><span class="token comment">//获取当前的时间戳</span><span class="token keyword">var</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> end <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"执行了："</span><span class="token operator">+</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>Math和其他的对象不同，它不是一个构造函数，它属于一个工具类不用创建对象，它里边封装了数学运算相关的属性和方法</p><p>比如：Math.PI 表示的圆周率</p><h4 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h4><p>可以用来计算一个数的绝对值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ceil"><a href="#ceil" class="headerlink" title="ceil()"></a>ceil()</h4><p>可以对一个数进行向上取整，小数位只有有值就自动进1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h4><p>可以对一个数进行向下取整，小数部分会被舍掉</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="round"><a href="#round" class="headerlink" title="round()"></a>round()</h4><p>可以对一个数进行四舍五入取整</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="random"><a href="#random" class="headerlink" title="random()"></a>random()</h4><p>可以用来生成一个0-1之间的随机数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//生成一个0-10的随机数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>生成一个0-x之间的随机数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成一个x-y之间的随机数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成1-6之间的随机数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h4><p>可以获取多个数中的最大值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h4><p>可以获取多个数中的最小值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="pow-x-y"><a href="#pow-x-y" class="headerlink" title="pow(x,y)"></a>pow(x,y)</h4><p>返回x的y次幂</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1728</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="sqrt"><a href="#sqrt" class="headerlink" title="sqrt()"></a>sqrt()</h4><p>用于对一个数进行开方运算</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>更多内置对象请查看JS文档</strong></p><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>在JS中为我们提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对象</p><p><strong>Number()</strong></p><p>可以将基本数据类型的数字转换为Number对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//number</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>String()</strong></p><p>可以将基本数据类型字符串转换为String对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Boolean()</strong></p><p>可以将基本数据类型的布尔值转换为Boolean对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> bool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> bool<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">===</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为string类型比较时会转换数据类型，因此两次比较结果不同</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token operator">===</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是注意：我们在<strong>实际应用中不会使用基本数据类型的对象</strong>，如果使用基本数据类型的对象，在做一些比较时可能会带来一些不可预期的结果</p><hr><p>方法和属性只能添加给对象，不能添加给基本数据类型</p><p>当我们对一些基本数据类型的值去调用属性和方法时，浏览器会临时使用包装类将其转换为对象，然后在调用对象的属性和方法</p><p>调用完以后，在将其转换为基本数据类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换成对象一</span>s<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token comment">//转换成对象二</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>在底层字符串是以字符数组的形式保存的，如：[“H”,”e”,”l”]</p><h3 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h3><p>可以用来获取字符串的长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//" "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h3><p>可以返回字符串中指定位置的字符</p><p>根据索引获取指定的字符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"w"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h3><p>获取指定位置字符的字符编码（Unicode编码）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"77" </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="String-formCharCode"><a href="#String-formCharCode" class="headerlink" title="String.formCharCode()"></a>String.formCharCode()</h3><p>可以根据字符编码去获取字符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"w"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="concat-1"><a href="#concat-1" class="headerlink" title="concat()"></a>concat()</h3><p>可以用来连接两个或多个字符串</p><p>作用和+一样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>1var result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">,</span><span class="token string">"再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"hello world你好再见"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="indexof"><a href="#indexof" class="headerlink" title="indexof()"></a>indexof()</h3><p>该方法可以检索一个字符串中是否含有指定内容</p><p>如果字符串中含有该内容，则会返回其第一次出现的索引</p><p>如果没有找到指定的内容，则返回-1</p><p>可以指定一个第二个参数，指定开始查找的位置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从索引为0的位置开始找，找h</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><p>该方法的用法和indexOf()一样，不同的是indexOf是从前往后找，而lastIndexOf是从后往前找</p><p>也可以指定开始查找的位置</p><h3 id="slice-1"><a href="#slice-1" class="headerlink" title="slice()"></a>slice()</h3><p>可以从字符串中截取指定的内容</p><p>不会影响原字符串，而是将截取到内容返回</p><p>参数：</p><p>第一个，开始位置的索引（包括开始位置）</p><p>第二个，结束位置的索引（不包括结束位置）</p><p>如果省略第二个参数，则会截取到后边所有的</p><p>也可以传递一个负数作为参数，负数的话将会从后边计算</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abcdefghijk"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"bcd"</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"bcdefghij"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><p>可以用来截取一个字符串，与slice()类似</p><p>参数：</p><p>第一个：开始截取位置的索引（包括开始位置）</p><p>第二个：结束位置的索引（不包括结束位置）</p><p>如果省略第二个参数，则会截取到后边所有的</p><p>不同的是这个方法不能接受负值作为参数，如果传递了一个负值，则默认使用0</p><p>而且他还自动调整参数的位置，如果第二个参数小于第一个，则自动交换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abcdefghijk"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于substring(0,1)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><p>用来截取字符串</p><p>参数：</p><p>1.截取开始位置的索引</p><p>2.截取的长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"de"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p>可以将一个字符串拆分为一个数组</p><p>参数：</p><p>需要一个字符串作为参数，将会根据该字符串去拆分数组</p><p>如果传递一个空串作为参数，则会将每个字符都拆分为数组中的一个元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"abc,def,ghi"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//["abc", "def", "ghi"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"object"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h3><p>将一个字符串转换为大写并返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"ABC"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h3><p>将一个字符串转换为小写并返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">"ABC"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p><strong>以上方法都不会影响到原字符串</strong></p><hr><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><p>正则表达式用于定义一些字符串的规则，计算机可以根据正则表达式，来检查一个字符串是否符合规则，获取将字符串中符合规则的内容提取出来</p><p>邮件的规则：</p><p>1.前边可以是xxxx乱七八糟</p><p>2.跟着一个@</p><p>3.后边可以是xxxx乱七八糟</p><p>4..com获取其他的乱七八糟</p><p><a href="mailto:&#57;&#48;&#52;&#54;&#57;&#x38;&#50;&#x30;&#50;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#109;">&#57;&#48;&#52;&#54;&#57;&#x38;&#50;&#x30;&#50;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#109;</a></p><h3 id="创建正则表达式的对象"><a href="#创建正则表达式的对象" class="headerlink" title="创建正则表达式的对象"></a>创建正则表达式的对象</h3><h4 id="使用构造函数来创建正则表达式"><a href="#使用构造函数来创建正则表达式" class="headerlink" title="使用构造函数来创建正则表达式"></a>使用构造函数来创建正则表达式</h4><p>语法：</p><p>var 变量 = new RegExp(“正则表达式”,”匹配模式”);</p><p>使用typeof检查正则对象，会返回object</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查一个字符串中是否含有a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在构造函数中可以传递一个匹配模式作为第二个参数，可以是 </p><ul><li>i 忽略大小写 </li><li>g 全局匹配模式</li></ul><h4 id="使用字面量来创建正则表达式"><a href="#使用字面量来创建正则表达式" class="headerlink" title="使用字面量来创建正则表达式"></a>使用字面量来创建正则表达式</h4><p>语法：var 变量 = /正则表达式/匹配模式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span><span class="token comment">//等同于var reg = new RegExp("a","i");</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="正则的验证方法"><a href="#正则的验证方法" class="headerlink" title="正则的验证方法"></a>正则的验证方法</h3><h4 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h4><p>使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，如果符合则返回true，否则返回false</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="正则表达式的符号"><a href="#正则表达式的符号" class="headerlink" title="正则表达式的符号"></a>正则表达式的符号</h3><h4 id="-10"><a href="#-10" class="headerlink" title="|"></a>|</h4><p>使用 | 表示或者的意思</p><p>创建一个正则表达式，检查一个字符串中是否有a或b或c</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a|b|c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="-11"><a href="#-11" class="headerlink" title="[]"></a>[]</h4><p>[]里的内容也是或的关系</p><ul><li>[ab] == a|b</li><li>[a-z] 任意小写字母</li><li>[A-Z] 任意大写字母</li><li>[A-z] 任意字母</li><li>[0-9] 任意数字</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//检查一个字符串中是否含有 abc 或 adc 或 aec</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[bde]c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="-12"><a href="#-12" class="headerlink" title="[^ ]"></a>[^ ]</h4><p>使用**[^ ]**表示除了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^ab]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//有除了ab以外的东西</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^0-9]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//非纯数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"12a3456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><p>通过量词可以设置一个内容出现的次数</p><p>量词只对它前边的一个内容起作用</p><ul><li>{n} 正好出现n次</li><li>{m,n} 出现m~n次</li><li>{m,} m次以上</li><li><strong>+</strong> 至少一个，相当于{1,}</li><li>***** 0个或多个，相当于{0,}</li><li><strong>?</strong> 0个或1个，相当于{0,1}</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个正则表达式检查一个字符串中是否含有aaa</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a&#123;3&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//aaa</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)&#123;3&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//ababab</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">b&#123;3&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//bbb</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab&#123;1,3&#125;c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//abc|abbc|abbbc</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab&#123;3,&#125;c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//abbbc,b出现三次以上</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab+c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//abc，b至少出现一次，ab&#123;1,&#125;c</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab*c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//有0个或多个b,ab&#123;0,&#125;c</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab?c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//ac|abc，有0个或一个b,ab&#123;0,1&#125;c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="-13"><a href="#-13" class="headerlink" title="^"></a>^</h4><p>检查一个字符串中是否以a开头</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//匹配开头的a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcabca"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="-14"><a href="#-14" class="headerlink" title="$"></a>$</h4><p>检查一个字符串中是否以a结尾</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//匹配结尾的a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcabca"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在正则表达式中同时使用^ $则要求字符串必须完全符合正则表达式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a|a$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcabca"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true，仅有一个a是符合的</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcabca"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例</strong></p><p><strong>手机号码</strong></p><p>创建一个正则表达式，用来检查一个字符串是否是一个合法手机号</p><p> 手机号的规则：</p><p>1 3 567890123 （11位）</p><ol><li><p>以1开头——^1</p></li><li><p>第二位3-9任意数字——[3-9]</p></li><li><p>以三位以后任意数字9个结尾——[0-9]{9}$</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> phone <span class="token operator">=</span> <span class="token string">"13328577199"</span><span class="token punctuation">;</span><span class="token keyword">var</span> phoneReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[3-9][0-9]&#123;9&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phoneReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>phoneStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>开头的^与&amp;不可不写，表示要完全符合正则表达式的需求</p><h4 id="-15"><a href="#-15" class="headerlink" title="\"></a>\</h4><p>在正则表达式中使用\作为转义字符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//.表示任意字符</span><span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//检查字符串中是否含.</span><span class="token keyword">var</span> reg3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//检查字符串中是否含\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符，如果要使用\则需要使用\来代替</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查字符串中是否含.</span><span class="token keyword">var</span> reg3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查字符串中是否含\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="center">符号</th><th align="center">表示的意思</th></tr></thead><tbody><tr><td align="center">\w</td><td align="center">任意字母、数字、_     [A-z0-9_]</td></tr><tr><td align="center">\W</td><td align="center">除了字母、数字、_     [<strong>^</strong>A-z0-9_]</td></tr><tr><td align="center">\d</td><td align="center">任意的数字     [0-9]</td></tr><tr><td align="center">\D</td><td align="center">除了数字     [<strong>^</strong>0-9]</td></tr><tr><td align="center">\s</td><td align="center">空格</td></tr><tr><td align="center">\S</td><td align="center">除了空格</td></tr><tr><td align="center">\b</td><td align="center">单词边界</td></tr><tr><td align="center">\B</td><td align="center">除了单词边界</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//创建一个正则表达式检查一个字符串中是否含有单词child</span><span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\bchild\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token comment">//如果不加\b则有child的字符串的都会符合</span><span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">child</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//接收一个用户的输入</span><span class="token comment">//var str = prompt("请输入你的用户名:");</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"              he      llo                "</span><span class="token punctuation">;</span><span class="token comment">//去除掉字符串中的前后的空格，就是使用""来替换空格</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span> <span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//g全局匹配记得加，否则只会去一个</span><span class="token comment">//去除开头的空格</span><span class="token comment">//*表示把空格全去了</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除结尾的空格</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\s*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// /^\s*|\s*$/g 匹配开头和结尾的空格</span><span class="token comment">//g全局匹配记得加，否则只会去一个</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s*|\s*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例</strong></p><p><strong>邮箱</strong></p><p><a href="mailto:&#x39;&#48;&#x34;&#54;&#57;&#56;&#x32;&#x30;&#50;&#x40;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;">&#x39;&#48;&#x34;&#54;&#57;&#56;&#x32;&#x30;&#50;&#x40;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;</a></p><ol><li>任意数字字母下划线开头——^\w{3,}</li><li>.任意数字字母下划线——(\.\w+)*</li><li>@</li><li>任意数字字母——[A-z0-9]+</li><li>.任意字母（2-5位）——\.[A-z]{2,5}</li><li>.任意字母（2-5位）——出现1-2次则在5式子中加上条件(\.[A-z]{2,5}){1,2}$</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> emailReg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\w(&#123;3,&#125;\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> email <span class="token operator">=</span> <span class="token string">"abc.hello@163.com"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emailReg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="字符串相关的方法"><a href="#字符串相关的方法" class="headerlink" title="字符串相关的方法"></a>字符串相关的方法</h3><h4 id="split-1"><a href="#split-1" class="headerlink" title="split()"></a>split()</h4><p>可以将一个字符串拆分为一个数组</p><p>方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"1a2b3c4d5e6f7"</span><span class="token punctuation">;</span><span class="token comment">//根据任意字母来将字符串拆分</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据任意字母拆分字符串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"[1,2,3,4,5,6,7]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法即使不指定全局匹配，也会全都拆分</p><h4 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h4><p>可以搜索字符串中是否含有指定内容</p><p>如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1</p><p>它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello abc hello aec afc"</span><span class="token punctuation">;</span><span class="token comment">//搜索字符串中是否含有abc 或 aec 或 afc</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[bef]c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>serach()只会查找第一个，即使设置全局匹配也没用</p><h4 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h4><p>可以根据正则表达式，从一个字符串中将符合条件的内容提取出来</p><p>默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索</p><p>我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容</p><p>可以为一个正则表达式设置多个匹配模式，且顺序无所谓</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"1a2a3a4a5e6f7A8B9C"</span><span class="token punctuation">;</span><span class="token comment">//提取出字符串中的所有字母</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//["a", "a", "a", "a", "e", "f", "A", "B", "C"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><p>可以将字符串中指定内容替换为新的内容，默认只会替换第一个</p><p>参数：</p><p>1.被替换的内容，可以接受一个正则表达式作为参数</p><p>2.新的内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"1a2a3a4a5e6f7A8B9C"</span><span class="token punctuation">;</span><span class="token comment">//将字符串中的字母全部删除</span><span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span> <span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM，全称Document Object Model文档对象模型。</p><p>JS中通过DOM来对HTML文档进行操作。只要了解DOM就可以随心所欲的操作WEB页面</p><p><strong>文档</strong></p><p>​    文档表示的就是整个的HTML网页文档</p><p><strong>对象</strong></p><p>​    对象表示将网页中的每一部分都转换为了一个对象</p><p><strong>模型</strong></p><p>​    使用模型来表示对象之间的关系，这样方便我们获取对象</p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a><strong>节点</strong></h3><p>节点Node，是构成我们网页的最基本的组成部分，网页中的每一个部分都可以称为一个节点，比如：HTML标签、属性、文本、注释、整个文档都是一个节点。</p><p>虽然都是节点，但是实际上他们的具体类型是不同的，比如：标签我们称为元素节点、属性称为属性节点、<strong>文本成为文本节点</strong>、文档称为文档节点。</p><p>节点的类型不同，属性和方法也不尽相同。</p><p>常用的节点分为四类：</p><ul><li>文档节点：整个HTML文档</li><li>元素节点：HTML文档中的HTML标签</li><li>属性节点：元素的属性</li><li>文本节点：HTML标签中的文本内容</li></ul><table><thead><tr><th></th><th>nodeName</th><th>nodeType</th><th>nodeValue</th></tr></thead><tbody><tr><td>文档节点</td><td>#document</td><td>9</td><td>null</td></tr><tr><td>元素节点</td><td>标签名</td><td>1</td><td>null</td></tr><tr><td>属性节点</td><td>属性名</td><td>2</td><td>属性值</td></tr><tr><td>文本节点</td><td>#text</td><td>3</td><td>文本内容</td></tr></tbody></table><p>浏览器已经为我们提供文档节点对象，这个对象是window属性</p><p>可以在页面中直接使用，文档节点代表的是整个网页</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>我是一个按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">//获取到button对象</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByID</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改按钮的文字</span>btn<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"I am buttom"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取元素节点"><a href="#获取元素节点" class="headerlink" title="获取元素节点"></a>获取元素节点</h4><h5 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById()"></a><strong>getElementById()</strong></h5><p>通过id属性获取一个元素节点对象</p><h5 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName()"></a><strong>getElementsByTagName()</strong></h5><p>通过标签名获取一组元素节点对象</p><p><strong>children</strong> 属性，表示当前节点的所有子节点</p><p><strong>firstChild</strong> 属性，表示当前节点的第一个子节点</p><p><strong>lastChild</strong> 属性，表示当前节点的最后一个子节点</p><h5 id="getElementsByName"><a href="#getElementsByName" class="headerlink" title="getElementsByName()"></a><strong>getElementsByName()</strong></h5><p>通过name属性获取一组元素节点对象</p><h3 id="DOM查询"><a href="#DOM查询" class="headerlink" title="DOM查询"></a>DOM查询</h3><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> <span class="token constant">HTML</span> <span class="token constant">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/strict.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>Untitled Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"style/css.css"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">/* * 定义一个函数，专门用来为指定元素绑定单击响应函数 * 参数： * idStr 要绑定单击响应函数的对象的id属性值 * fun 事件的回调函数，当单击元素时，该函数将会被触发 */</span><span class="token keyword">function</span> <span class="token function">myClick</span><span class="token punctuation">(</span><span class="token parameter">idStr <span class="token punctuation">,</span> fun</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>idStr<span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fun<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//为id为btn01的按钮绑定一个单击响应函数</span><span class="token keyword">var</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//查找#bj节点</span><span class="token keyword">var</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印bj</span><span class="token comment">//innerHTML 通过这个属性可以获取到元素内部的html代码</span><span class="token function">alert</span><span class="token punctuation">(</span>bj<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//为id为btn02的按钮绑定一个单击响应函数</span><span class="token keyword">var</span> btn02 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn02<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//查找所有li节点</span><span class="token comment">//getElementsByTagName()可以根据标签名来获取一组元素节点对象</span><span class="token comment">//这个方法会给我们返回一个类数组对象，所有查询到的元素都会封装到对象中</span><span class="token comment">//即使查询到的元素只有一个，也会封装到数组中返回</span><span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印lis</span><span class="token comment">//alert(lis.length);</span><span class="token comment">//变量lis</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>lis<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//为id为btn03的按钮绑定一个单击响应函数</span><span class="token keyword">var</span> btn03 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn03<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//查找name=gender的所有节点</span><span class="token keyword">var</span> inputs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//alert(inputs.length);</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>inputs<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* * innerHTML用于获取元素内部的HTML代码的 * 对于自结束标签，这个属性没有意义 */</span><span class="token comment">//alert(inputs[i].innerHTML);</span><span class="token comment">/* * 如果需要读取元素节点属性， * 直接使用 元素.属性名 * 例子：元素.id 元素.name 元素.value * 注意：class属性不能采用这种方式， * 读取class属性时需要使用 元素.className */</span><span class="token function">alert</span><span class="token punctuation">(</span>inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//为id为btn04的按钮绑定一个单击响应函数</span><span class="token keyword">var</span> btn04 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn04"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn04<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取id为city的元素</span><span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找#city下所有li节点</span><span class="token keyword">var</span> lis <span class="token operator">=</span> city<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>lis<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//为id为btn05的按钮绑定一个单击响应函数</span><span class="token keyword">var</span> btn05 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn05"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn05<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取id为city的节点</span><span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回#city的所有子节点</span><span class="token comment">/* * childNodes属性会获取包括文本节点在呢的所有节点 * 根据DOM标签标签间空白也会当成文本节点 * 注意：在IE8及以下的浏览器中，不会将空白文本当成子节点， * 所以该属性在IE8中会返回4个子元素而其他浏览器是9个 */</span><span class="token keyword">var</span> cns <span class="token operator">=</span> city<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span><span class="token comment">//alert(cns.length);</span><span class="token comment">/*for(var i=0 ; i&lt;cns.length ; i++)&#123;alert(cns[i]);&#125;*/</span><span class="token comment">/* * children属性可以获取当前元素的所有子元素 */</span><span class="token keyword">var</span> cns2 <span class="token operator">=</span> city<span class="token punctuation">.</span>children<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>cns2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//为id为btn06的按钮绑定一个单击响应函数</span><span class="token keyword">var</span> btn06 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn06"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn06<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取id为phone的元素</span><span class="token keyword">var</span> phone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回#phone的第一个子节点</span><span class="token comment">//phone.childNodes[0];</span><span class="token comment">//firstChild可以获取到当前元素的第一个子节点（包括空白文本节点）</span><span class="token keyword">var</span> fir <span class="token operator">=</span> phone<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span><span class="token comment">//firstElementChild获取当前元素的第一个子元素</span><span class="token comment">/* * firstElementChild不支持IE8及以下的浏览器， * 如果需要兼容他们尽量不要使用 */</span><span class="token comment">//fir = phone.firstElementChild;</span><span class="token function">alert</span><span class="token punctuation">(</span>fir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//为id为btn07的按钮绑定一个单击响应函数</span><span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn07"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取id为bj的节点</span><span class="token keyword">var</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回#bj的父节点</span><span class="token keyword">var</span> pn <span class="token operator">=</span> bj<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>pn<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * innerText * - 该属性可以获取到元素内部的文本内容 * - 它和innerHTML类似，不同的是它会自动将html去除 */</span><span class="token comment">//alert(pn.innerText);</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为id为btn08的按钮绑定一个单击响应函数</span><span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn08"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取id为android的元素</span><span class="token keyword">var</span> and <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回#android的前一个兄弟节点（也可能获取到空白的文本）</span><span class="token keyword">var</span> ps <span class="token operator">=</span> and<span class="token punctuation">.</span>previousSibling<span class="token punctuation">;</span><span class="token comment">//previousElementSibling获取前一个兄弟元素，IE8及以下不支持</span><span class="token comment">//var pe = and.previousElementSibling;</span><span class="token function">alert</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取#username的value属性值</span><span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn09"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取id为username的元素</span><span class="token keyword">var</span> um <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取um的value属性值</span><span class="token comment">//文本框的value属性值，就是文本框中填写的内容</span><span class="token function">alert</span><span class="token punctuation">(</span>um<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置#username的value属性值</span><span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn10"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取id为username的元素</span><span class="token keyword">var</span> um <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>um<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"今天天气真不错~~~"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回#bj的文本值</span><span class="token function">myClick</span><span class="token punctuation">(</span><span class="token string">"btn11"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取id为bj的元素</span><span class="token keyword">var</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//alert(bj.innerHTML);</span><span class="token comment">//alert(bj.innerText);</span><span class="token comment">//获取bj中的文本节点</span><span class="token comment">/*var fc = bj.firstChild;alert(fc.nodeValue);*/</span><span class="token function">alert</span><span class="token punctuation">(</span>bj<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"total"</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"inner"</span><span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>你喜欢哪个城市<span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"city"</span><span class="token operator">></span><span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"bj"</span><span class="token operator">></span>北京<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span>上海<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span>东京<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span>首尔<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>你喜欢哪款单机游戏<span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"game"</span><span class="token operator">></span><span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"rl"</span><span class="token operator">></span>红警<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span>实况<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span>极品飞车<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span>魔兽<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>你手机的操作系统是<span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"phone"</span><span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token constant">IOS</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span> <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"android"</span><span class="token operator">></span>Android<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span>Windows Phone<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"inner"</span><span class="token operator">></span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token operator">&lt;</span>input <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hello"</span> type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"gender"</span> value<span class="token operator">=</span><span class="token string">"male"</span><span class="token operator">/</span><span class="token operator">></span>Male<span class="token operator">&lt;</span>input <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hello"</span> type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"gender"</span> value<span class="token operator">=</span><span class="token string">"female"</span><span class="token operator">/</span><span class="token operator">></span>Female<span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"name"</span> id<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"abcde"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"btnList"</span><span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn01"</span><span class="token operator">></span>查找#bj节点<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn02"</span><span class="token operator">></span>查找所有li节点<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn03"</span><span class="token operator">></span>查找name<span class="token operator">=</span>gender的所有节点<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn04"</span><span class="token operator">></span>查找#city下所有li节点<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn05"</span><span class="token operator">></span>返回#city的所有子节点<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn06"</span><span class="token operator">></span>返回#phone的第一个子节点<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn07"</span><span class="token operator">></span>返回#bj的父节点<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn08"</span><span class="token operator">></span>返回#android的前一个兄弟节点<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn09"</span><span class="token operator">></span>返回#username的value属性值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn10"</span><span class="token operator">></span>设置#username的value属性值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn11"</span><span class="token operator">></span>返回#bj的文本值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><h5 id="获取body标签"><a href="#获取body标签" class="headerlink" title="获取body标签"></a><strong>获取body标签</strong></h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当使用这种方式时，获取到的是一个body的集合，我们需要在后面添加一个[0]去获取body标签</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在document中有一个属性body，它保存的是body的引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种获取对象的方式与上方相同</p><h5 id="获取html标签"><a href="#获取html标签" class="headerlink" title="获取html标签"></a>获取html标签</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> html <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>document.documentElement保存的是html根标签</p><h5 id="获取页面中所有的元素"><a href="#获取页面中所有的元素" class="headerlink" title="获取页面中所有的元素"></a>获取页面中所有的元素</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> all <span class="token operator">=</span> document<span class="token punctuation">.</span>all<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="根据class属性查询"><a href="#根据class属性查询" class="headerlink" title="根据class属性查询"></a>根据class属性查询</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>getElementsByClassName()可以根据class属性值获取一组元素节点对象，但是该方法不支持IE8及以下的浏览器</p><h5 id="根据标签名查询"><a href="#根据标签名查询" class="headerlink" title="根据标签名查询"></a>根据标签名查询</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="根据选择器查询"><a href="#根据选择器查询" class="headerlink" title="根据选择器查询"></a>根据选择器查询</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box1 div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要一个选择器的字符串作为参数，可以根据一个CSS选择器来查询一个元素</p><p>虽然IE8中没有getElementsByClassName()但是可以使用querySelector()代替，使用该方法<strong>总会返回唯一的一个元素</strong>，如果满<strong>足条件的元素有多个</strong>，那么它只<strong>会返回第一个</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**querySelectorAll()**和querySelector()用法类似，不同的是它会将符合条件的元素封装到一个数组中返回，即使符合条件的元素只有一个，它也会返回数组</p><h3 id="DOM增删改"><a href="#DOM增删改" class="headerlink" title="DOM增删改"></a>DOM增删改</h3><h4 id="createElement"><a href="#createElement" class="headerlink" title="createElement()"></a>createElement()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以用于创建一个元素节点对象，它需要一个标签名作为参数，将会根据该标签名创建元素节点对象，并将创建好的对象作为返回值返回</p><h4 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode()"></a>createTextNode()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> gzText <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以用来创建一个文本节点对象，需要一个文本内容作为参数，将会根据该内容创建文本节点，并将新的节点返回</p><h4 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild()"></a><strong>appendChild()</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>gzText<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>向一个父节点中添加一个新的子节点</p><p>用法：父节点.appendChild(子节点);</p><h4 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore()"></a>insertBefore()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">city<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>li <span class="token punctuation">,</span> bj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过父节点调用，可以在指定的子节点前插入新的子节点</p><p>语法：父节点.insertBefore(新节点,旧节点);</p><h4 id="replaceChild"><a href="#replaceChild" class="headerlink" title="replaceChild()"></a>replaceChild()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">city<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>li <span class="token punctuation">,</span> bj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过父节点调用，可以使用指定的子节点替换已有的子节点，</p><p>语法：父节点.replaceChild(新节点,旧节点);</p><h4 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild()"></a>removeChild()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">city<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>bj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//bj.parentNode.removeChild(bj);</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过父节点调用，可以删除一个子节点</p><p>语法：父节点.removeChild(子节点);</p><p>或者：子节点.parentNode.removeChild(子节点);</p><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//读取#city内的HTML代码</span><span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>city<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//设置#bj内的HTML代码</span><span class="token keyword">var</span> bj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bj<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"昌平"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//向city中添加广州</span><span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>city<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token string">"&lt;li>广州&lt;/li>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用innerHTML也可以完成DOM的增删改的相关操作，一般我们会两种方式结合使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//向city中添加广州</span><span class="token keyword">var</span> city <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个li</span><span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向li中设置文本</span>li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"广州"</span><span class="token punctuation">;</span><span class="token comment">//将li添加到city中</span>city<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DOM操作CSS"><a href="#DOM操作CSS" class="headerlink" title="DOM操作CSS"></a>DOM操作CSS</h3><h4 id="读写内联样式"><a href="#读写内联样式" class="headerlink" title="读写内联样式"></a>读写内联样式</h4><h5 id="style"><a href="#style" class="headerlink" title="style"></a>style</h5><p>可以通过JS就该元素的样式</p><p>语法：元素.style.样式名 = 样式值</p><p>注意：如果CSS的样式名中含有  -  这种名称在JS中是不合法的</p><p>比如background-color需要将这种样式名修改为驼峰命名法，去掉  -  ，然后将  -  后的字母大写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//点击按钮后改变box1的样式</span><span class="token comment">//获取元素box1</span><span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取按钮btn01</span><span class="token keyword">var</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定点击事件，点击按钮后改变box1的样式</span>btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"300px"</span><span class="token punctuation">;</span>    box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">"300px"</span><span class="token punctuation">;</span>    <span class="token comment">//驼峰命名法</span>    box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"yellow"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn02 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn02<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//读取box1的样式</span>    <span class="token function">alert</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果不点btn01的话无法读取到数据</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过style属性设置的样式都是<strong>内联样式</strong>，而内联样式有较高的优先级，所以通过JS修改的样式往往会立即显示</p><p>通过style属性<strong>设置和读取的都是内联样式</strong>，无法读取样式表中的样式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#box1</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果在样式中写了!important，则此时样式会有最高的优先级，即使通过JS也不能覆盖该样式，此时将会导致JS修改样式失效，所以尽量不要为样式添加!important</p><h4 id="读取元素样式"><a href="#读取元素样式" class="headerlink" title="读取元素样式"></a>读取元素样式</h4><p>获取元素的当前显示的样式</p><h5 id="currentStyle"><a href="#currentStyle" class="headerlink" title="currentStyle"></a><strong>currentStyle</strong></h5><p>语法：元素.<strong>currentStyle</strong>.样式名</p><p>它可以用来读取当前元素<strong>正在显示的样式</strong>，如果当前元素没有设置该样式，则获取它的默认值</p><p>currentStyle<strong>只有IE浏览器支持</strong>，其他的浏览器都不支持</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>currentStyle<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="getComputedStyle"><a href="#getComputedStyle" class="headerlink" title="getComputedStyle()"></a>getComputedStyle()</h5><p>在其他浏览器中可以使用**getComputedStyle()**这个方法来获取元素当前的样式，这个方法是window的方法，可以直接使用</p><p>需要两个参数</p><p>​    第一个：要获取样式的元素</p><p>​    第二个：可以传递一个伪元素，一般都传null</p><p>该方法会返回一个对象，对象中封装了当前元素对应的样式</p><p>可以通过对象.样式名来读取样式</p><p>如果获取的样式没有被设置，那么会获取到真实值而非默认值</p><p>比如：没有设置width，它不会获取到auto，而是一个长度</p><p>通过currentStyle和getComputedStyle()读取到的样式都是只读的，不能修改，如果要修改必须通过style属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该方法不支持IE8及以下的浏览器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//正常浏览器的方式</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>backgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//IE8的方式</span><span class="token function">alert</span><span class="token punctuation">(</span>box1<span class="token punctuation">.</span>currentStyle<span class="token punctuation">.</span>backgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="getStyle"><a href="#getStyle" class="headerlink" title="getStyle()"></a>getStyle()</h5><p>由于上述两种方法都有不兼容的浏览器，因此我们可以自定义一个通用的方法来读取元素样式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token function">getStyle</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span><span class="token string">"width"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getStyle</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//判断浏览器是否有getComputedStyle()这个方法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>getComputedStyle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//正常浏览器的方式，具有getComputedStyle()方法</span>        <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj <span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//IE8的方式，没有getComputedStyle()方法</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查方法是否存在的时候传入的是一个window对象<br>因此我们应该将方法定义在全局作用域中，即window.onload函数外</p><h4 id="其他样式相关的属性"><a href="#其他样式相关的属性" class="headerlink" title="其他样式相关的属性"></a>其他样式相关的属性</h4><h5 id="clientWidth"><a href="#clientWidth" class="headerlink" title="clientWidth"></a><strong>clientWidth</strong></h5><h5 id="clientHeight"><a href="#clientHeight" class="headerlink" title="clientHeight"></a><strong>clientHeight</strong></h5><p>获取元素的可见宽度和高度，包括<strong>内容区</strong>和<strong>内边距</strong></p><p>获取到的属性不带px，返回的都是一个数字，可以直接进行计算</p><p>这些属性是<strong>只读</strong>的，不能修改</p><h5 id="offsetWidth"><a href="#offsetWidth" class="headerlink" title="offsetWidth"></a>offsetWidth</h5><h5 id="offsetHeight"><a href="#offsetHeight" class="headerlink" title="offsetHeight"></a>offsetHeight</h5><p>获取元素的整个的宽度和高度，包括<strong>内容区</strong>、<strong>内边距</strong>和<strong>边框</strong></p><p>（与上面的两个属性差不多，只是多了边框）</p><h5 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent"></a>offsetParent</h5><p>可以用来获取当前元素的定位父元素</p><p>会获取到离当前元素最近的开启了定位的祖先元素</p><p>如果所有的祖先元素都没有开启定位，则返回body</p><h5 id="offsetLeft"><a href="#offsetLeft" class="headerlink" title="offsetLeft"></a>offsetLeft</h5><p>获取当前元素相对于其定位父元素的水平偏移量</p><h5 id="offsetTop"><a href="#offsetTop" class="headerlink" title="offsetTop"></a>offsetTop</h5><p>获取当前元素相对于其定位父元素的垂直偏移量</p><h5 id="scrollWidth"><a href="#scrollWidth" class="headerlink" title="scrollWidth"></a>scrollWidth</h5><h5 id="scrollHeight"><a href="#scrollHeight" class="headerlink" title="scrollHeight"></a>scrollHeight</h5><p>可以获取元素整个滚动区域的宽度和高度</p><h5 id="scrollLeft"><a href="#scrollLeft" class="headerlink" title="scrollLeft"></a>scrollLeft</h5><p>可以获取水平滚动条已经滚动了的距离</p><h5 id="scrollTop"><a href="#scrollTop" class="headerlink" title="scrollTop"></a>scrollTop</h5><p>可以获取垂直滚动条已经滚动了的距离</p><ul><li><p>当满足scrollHeight - scrollTop == clientHeight，说明垂直滚动条滚动到底</p></li><li><p>当满足scrollWidth - scrollLeft == clientWidth，说明水平滚动条滚动到底</p></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>事件就是用户和浏览器之间的交互行为，如：点击按钮、鼠标移动、关闭窗口……</p><p>我们可以在事件对应的属性中设置一些JS代码，当事件被触发时，这些代码会被执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span> onmousemove<span class="token operator">=</span><span class="token string">"alert('讨厌，你点我干嘛！');"</span><span class="token operator">></span>我是一个按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token comment">//这种写法我们称为结构和行为耦合，不方便维护，不推荐使用</span><span class="token comment">//onmousemove鼠标移入触发事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span><span class="token operator">></span>我是一个按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">//获取按钮对象</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*可以为按钮的对应事件绑定处理函数的形式来响应事件，这样当事件被触发时，其对应的函数将会被调用*/</span><span class="token comment">//绑定一个单击事件</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你点我干嘛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//像这种为单击事件绑定的函数，我们称为单机响应函数</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文档的加载"><a href="#文档的加载" class="headerlink" title="文档的加载"></a>文档的加载</h4><p>浏览器在加载一个页面时，是按照自上向下的顺序加载的，读取到一行就运行一行，如果将script标签写到页面的上边，在代码执行时，页面还没有加载，页面没有加载DOM对象也没有加载，会导致无法获取到DOM对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>buttom<span class="token operator">></span>点我一下<span class="token operator">&lt;</span><span class="token operator">/</span>buttom<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> onload事件会在整个页面加载完成之后才触发，为window绑定一个onload事件，该事件对应的响应函数将会在页面加载完成之后执行，这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了</p><h4 id="事件对象DOM-event"><a href="#事件对象DOM-event" class="headerlink" title="事件对象DOM event"></a>事件对象<strong>DOM event</strong></h4><p>当事件的响应函数被触发时，浏览器每次都会将一个事件对象作为实参传递进响应函数</p><p>在事件对象中封装了当前事件相关的一切信息，比如：鼠标的坐标，键盘哪个按键被按下，鼠标滚轮滚动的方向等</p><h5 id="clientX"><a href="#clientX" class="headerlink" title="clientX"></a>clientX</h5><h5 id="clientY"><a href="#clientY" class="headerlink" title="clientY"></a>clientY</h5><p>获取鼠标指针的水平|垂直坐标</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> areaDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"areaDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> showMsg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"showMsg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>areaDiv<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> x <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span><span class="token comment">//在showMsg中显示鼠标的坐标</span>showMsg<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"x = "</span><span class="token operator">+</span>x <span class="token operator">+</span> <span class="token string">" , y = "</span><span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在IE8中，响应函数被触发时，浏览器不会传递事件对象，在IE8及以下的浏览器中，是将事件对象作为window对象的属性保存的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> areaDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"areaDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> showMsg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"showMsg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>areaDiv<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//解决事件对象的兼容性问题</span>            <span class="token comment">//通过判断是否有event对象，来给event赋值</span>            <span class="token comment">/*if(!event)&#123;event = window.event;&#125;*/</span>                        <span class="token comment">//简便写法</span>event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>showMsg<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"x = "</span><span class="token operator">+</span>x <span class="token operator">+</span> <span class="token string">" , y = "</span><span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="pageX"><a href="#pageX" class="headerlink" title="pageX"></a>pageX</h5><h5 id="pageY"><a href="#pageY" class="headerlink" title="pageY"></a>pageY</h5><p>可以获取鼠标相对于当前页面的水平|垂直坐标</p><p>但是这个两个属性在IE8中不支持，所以如果需要兼容IE8，则不要使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>       window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">// 使div可以跟随鼠标移动</span>           <span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//给window绑定鼠标移动事件</span>           window<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token comment">//当出现滚动条时，用来固定滚动后鼠标的位置</span>               <span class="token keyword">var</span> left <span class="token operator">=</span> event<span class="token punctuation">.</span>pageX<span class="token punctuation">;</span>               <span class="token keyword">var</span> top <span class="token operator">=</span> event<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>               <span class="token comment">// 设置div的偏移量</span>               <span class="token comment">// 需要开启定位</span>                <span class="token comment">//也可以用fixed来将元素固定在当前页面上</span>               box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>               box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><p>关于事件的传播网景公司和微软公司有不同的理解</p><p>微软公司认为事件应该是由内向外传播，也就是当事件触发时，应该先触发当前元素上的事件，然后再向当前元素的祖先元素上传播，也就说事件应该在冒泡阶段执行。</p><p>网景公司认为事件应该是由外向内传播的，也就是当前事件触发时，应该先触发当前元素的最外层的祖先元素的事件，然后在向内传播给后代元素</p><p>W3C综合了两个公司的方案，将事件传播分成了三个阶段</p><p>​    1.捕获阶段</p><p>​        在捕获阶段时从最外层的祖先元素，向目标元素进行事件的捕获，但是默认此时不会触发事件</p><p>​    2.目标阶段</p><p>​        事件捕获到目标元素，捕获结束开始在目标元素上触发事件</p><p>​    3.冒泡阶段</p><p>​        事件从目标元素向他的祖先元素传递，依次触发祖先元素上的事件</p><p>​    如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true</p><p>​    一般情况下我们不会希望在捕获阶段触发事件，所以这个参数一般都是false</p><p>​    IE8及以下的浏览器中没有捕获阶段</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> box2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> box3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box1的响应函数"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box2<span class="token punctuation">,</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box2的响应函数"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>box3<span class="token punctuation">,</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是box3的响应函数"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//addEventListener()的第三个参数设置为true，弹出顺序为1,2,3</span><span class="token comment">//addEventListener()的第三个参数设置为false，弹出顺序为3,2,1</span><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">obj <span class="token punctuation">,</span> eventStr <span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//大部分浏览器兼容的方式</span>        obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr <span class="token punctuation">,</span> callback <span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//IE8及以下</span>        obj<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token operator">+</span>eventStr <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//在匿名函数中调用回调函数</span>        <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"box1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"box2"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"box3"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件的冒泡"><a href="#事件的冒泡" class="headerlink" title="事件的冒泡"></a>事件的冒泡</h4><p>所谓的冒泡指的就是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发</p><p>在开发中大部分情况冒泡都是有用的,如果不希望发生事件冒泡可以通过事件对象来取消冒泡</p><p>可以将事件对象的cancelBubble设置为true，即可取消冒泡</p><p>如果在冒泡的过程中遇到了设置完cancelBubble后的元素，则从该父元素开始就不会触发事件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#box1</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#s1</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//为s1绑定一个单击响应函数</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是span的单击响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取消冒泡</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//为box1绑定一个单击响应函数</span><span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是div的单击响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//为body绑定一个单击响应函数</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是body的单击响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是box1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h4><p>指将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素从而通过祖先元素的响应函数来处理事件，事件委派是利用了冒泡，通过委派可以减少事件绑定的次数，提高程序的性能</p><hr><p>当我们需要为每一个超链接都绑定一个单击响应函数，一个个绑定的操作比较麻烦，并且这种操作只能为已有的超链接设置事件，而新添加的超链接必须重新绑定</p><p>我们希望只绑定一次事件，即可应用到多个元素上，即便元素使后添加的，因此可以尝试将其给元素的共同的祖先元素</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>u1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> #bfa<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是p元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="target"><a href="#target" class="headerlink" title="target"></a>target</h5><p>返回触发此事件的元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> u1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"u1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//点击按钮以后添加超链接</span>    <span class="token keyword">var</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个li</span>        <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        li<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a href='javascript:;' class='link'>新建的超链接&lt;/a>"</span><span class="token punctuation">;</span>        <span class="token comment">//将li添加到ul中</span>        u1<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//为ul绑定一个单击响应函数</span>    u1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>        <span class="token comment">//如果触发事件的对象是我们期望的元素，则执行否则不执行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className <span class="token operator">==</span> <span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是ul的单击响应函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h4><p>使用 对象.事件 = 函数 的形式绑定响应函数， 它<strong>只能</strong>同时为一个元素的一个事件<strong>绑定一个响应函数</strong>，不能绑定多个，如果绑定了多个，则后边会覆盖掉前边的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener()"></a>addEventListener()</h5><p>通过这个方法也可以为元素绑定响应函数</p><p>注意：这个方法不支持IE8及以下的浏览器</p><p>参数：</p><p>​    1.事件的字符串，不要on</p><p>​    2.回调函数，当事件触发时该函数会被调用</p><p>​    3.是否在捕获阶段触发事件，需要一个布尔值，一般都传false</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//绑定一个单击响应函数</span>btn01<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定第二个单击响应函数</span>btn01<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用addEventListener()可以同时为一个元素的相同事件同时绑定多个响应函数，这样当事件被触发时，响应函数将会按照函数的绑定顺序执行</p><h5 id="attachEvent"><a href="#attachEvent" class="headerlink" title="attachEvent()"></a>attachEvent()</h5><p>在IE8中可以使用attachEvent()来绑定事件</p><p>参数：</p><p>​    1.事件的字符串，要on</p><p>​    2.回调函数</p><p>这个方法也可以同时为一个事件绑定多个处理函数，不同的是它是后绑定先执行，执行顺序和addEventListener()相反</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn01<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn01<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="自定义函数bind"><a href="#自定义函数bind" class="headerlink" title="自定义函数bind()"></a><strong>自定义函数</strong>bind()</h5><p>定义一个函数，用来为指定元素绑定响应函数</p><p>addEventListener()中的this，是绑定事件的对象</p><p>attachEvent()中的this，是window</p><p>需要统一两个方法this</p><p><strong>callback.call(obj)</strong></p><p>this是谁由调用方式决定 </p><p>因此我们可以通过这种方式来统一两种方法的this</p><p>参数：</p><ol><li>obj 要绑定事件的对象</li><li>eventStr 事件的字符串(不要on)</li><li>callback 回调函数</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">obj <span class="token punctuation">,</span> eventStr <span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">//大部分浏览器兼容的方式</span>    obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr <span class="token punctuation">,</span> callback <span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//IE8及以下</span>    obj<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token operator">+</span>eventStr <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//在匿名函数中调用回调函数</span>    <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>btn01 <span class="token punctuation">,</span> <span class="token string">"click"</span> <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拖拽事件"><a href="#拖拽事件" class="headerlink" title="拖拽事件"></a>拖拽事件</h4><p>拖拽的流程</p><h5 id="onmousedown"><a href="#onmousedown" class="headerlink" title="onmousedown"></a>onmousedown</h5><p>1.当鼠标在被拖拽元素上按下时，开始拖拽 </p><h5 id="onmousemove"><a href="#onmousemove" class="headerlink" title="onmousemove"></a>onmousemove</h5><p>2.当鼠标移动时被拖拽元素跟随鼠标移动 </p><h5 id="onmouseup"><a href="#onmouseup" class="headerlink" title="onmouseup"></a>onmouseup</h5><p>3.当鼠标松开时，被拖拽元素固定在当前位置 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box1<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//在整个文档中移动则给document绑定一个鼠标移动事件</span>        document<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            event <span class="token operator">=</span> event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token comment">//获取鼠标指针的位置</span>            <span class="token keyword">var</span> left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>            <span class="token keyword">var</span> top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span><span class="token comment">//通过鼠标指针的位置来修改元素的位置</span>            box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//当文档中的鼠标松开，则触发事件</span>        document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//清空文档中的鼠标移动事件</span>            document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">//同时取消鼠标松开的事件</span>            document<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为每一次触发点击事件时鼠标都存在于元素的左上角，为了使鼠标能固定在我们点下去的位置，不使元素突然移动到该位置，我们可以将元素当前的坐标减去鼠标点下的位置和边框相差的坐标</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box1<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//取消IE8内默认行为的方式</span>        <span class="token comment">//捕获box1所有的被按下时的鼠标事件</span><span class="token comment">//box1.setCapture &amp;&amp; box1.setCapture();</span>        event <span class="token operator">=</span> event <span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token comment">//获取鼠标在当前元素中的位置</span>        <span class="token keyword">var</span> ol <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> box1<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>        <span class="token keyword">var</span> ot <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> box1<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            event <span class="token operator">=</span> event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>            <span class="token keyword">var</span> left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>            <span class="token keyword">var</span> top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>            <span class="token comment">//在设置拖动元素的位置时</span>            box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token operator">-</span>ol<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>            box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top<span class="token operator">-</span>ot<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//当文档中的鼠标松开，则触发事件</span>        document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//清空文档中的鼠标移动事件</span>            document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">//同时取消鼠标松开的事件</span>            document<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">//释放对box1的捕获</span>            <span class="token comment">//box1.releaseCapture &amp;&amp; box1.releaseCapture();</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们拖拽一个网页中的内容是，浏览器会默认去搜索引擎中搜索内容，此时会导致拖拽功能的异常，这个是浏览器提供的默认行为。</p><p>如果不希望这个异常发生，可以通过给onmousemove事件设置return false来取消默认行为。</p><h5 id="setCapture"><a href="#setCapture" class="headerlink" title="setCapture()"></a>setCapture()</h5><p>但是上述方式在IE8中不起作用</p><p>因此在IE8中可以设置setCapture()</p><p>来捕获box1所有的鼠标按下的事件</p><p>这种方式只有在IE8中起作用，在火狐浏览器中不会报错，但谷歌浏览器会，因此使用前要先判断浏览器中是否有该方法</p><h5 id="对多个元素开启拖拽事件"><a href="#对多个元素开启拖拽事件" class="headerlink" title="对多个元素开启拖拽事件"></a>对多个元素开启拖拽事件</h5><p>对多个元素开启拖拽事件的时候，我们可以将上面的代码封装成一个函数，在我们要对某个元素调用时的后，用DOM获取完该元素后在将其作为参数传入函数进行调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> box2 <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开启box1的拖拽</span>    <span class="token function">drag</span><span class="token punctuation">(</span>box1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//开启box2的拖拽</span>    <span class="token function">drag</span><span class="token punctuation">(</span>box2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">drag</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        obj<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            obj<span class="token punctuation">.</span>setCapture <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">setCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            event <span class="token operator">=</span> event <span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>            <span class="token comment">//在整个文档中移动则给document绑定一个鼠标移动事件</span>            <span class="token keyword">var</span> ol <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>            <span class="token keyword">var</span> ot <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                event <span class="token operator">=</span> event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>                <span class="token keyword">var</span> left <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>                <span class="token keyword">var</span> top <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>                obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token operator">-</span>ol<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>                obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top<span class="token operator">-</span>ot<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//当文档中的鼠标松开，则触发事件</span>            document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//清空文档中的鼠标移动事件</span>                document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">//同时取消鼠标松开的事件</span>                document<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                obj<span class="token punctuation">.</span>releaseCapture <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">releaseCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="滚轮事件"><a href="#滚轮事件" class="headerlink" title="滚轮事件"></a>滚轮事件</h4><h5 id="onmousewheel"><a href="#onmousewheel" class="headerlink" title="onmousewheel"></a>onmousewheel</h5><p>鼠标滚动事件，会在滚轮滚动时触发</p><p>火狐不支持该属性，在火狐中需要使用DOMMouseScroll来绑定事件（注意：该事件需要通过addEventListener()函数来绑定）</p><h5 id="wheelDelta"><a href="#wheelDelta" class="headerlink" title="wheelDelta"></a>wheelDelta</h5><p>event.wheelDelta 可以获取鼠标滚轮滚动的方向</p><p>wheelDelta这个值我们不看大小，只看正负，向上滚为正，向下滚为负</p><h5 id="detail"><a href="#detail" class="headerlink" title="detail"></a>detail</h5><p>wheelDelta这个属性火狐中不支持，在火狐中使用event.detail来获取滚动的方向，向上滚为负，向下滚为正</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        box1<span class="token punctuation">.</span><span class="token function-variable function">onmousewheel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//判断鼠标滚轮滚动的方向</span>            event <span class="token operator">=</span> event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>wheelDelta<span class="token operator">></span><span class="token number">0</span><span class="token operator">||</span>event<span class="token punctuation">.</span>detail<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//向上滚</span>                box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> box1<span class="token punctuation">.</span>clientHeight <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> box1<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//使用addEventListener()方法绑定响应函数，取消默认行为时不能使用return false</span>            <span class="token comment">//需要使用event来取消默认行为</span>            <span class="token comment">//但是IE8不支持下列方法，如果直接调用则会报错，使用前应该判断是否存在该方法</span>            event<span class="token punctuation">.</span>preventDefault <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//当滚轮滚动时，如果浏览器有滚动条，滚动条会随之滚动</span>            <span class="token comment">//这是浏览器的默认行为，如果不希望发生，则可以取消默认行为</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//为火狐绑定事件</span>        <span class="token function">bind</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span><span class="token string">"DOMMouseScroll"</span><span class="token punctuation">,</span>box1<span class="token punctuation">.</span>onmousewheel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>eventStr<span class="token punctuation">,</span>callback</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventStr<span class="token punctuation">,</span>callback<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token operator">+</span>eventStr<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><h5 id="onkeydown"><a href="#onkeydown" class="headerlink" title="onkeydown"></a>onkeydown</h5><p>按钮被按下</p><p>对于onkeydown来说，如果一直按着则事件会一直触发</p><p>当onkeydown连续触发时，第一次和第二次之间的间隔稍微会长一点，其他的间隔会非常短</p><h5 id="onkeyup"><a href="#onkeyup" class="headerlink" title="onkeyup"></a>onkeyup</h5><p>按钮被松开</p><p>键盘事件一般会绑定给一下可以获取到焦点的对象或者是document</p><h5 id="keyCode"><a href="#keyCode" class="headerlink" title="keyCode"></a>keyCode</h5><p>可以通过keyCode来获取按键的编码，可以通过它来判断哪个按键被按下</p><p>除了keyCode，事件对下对象中提供了几个</p><table><thead><tr><th>属性名</th><th>效果</th></tr></thead><tbody><tr><td>altKey</td><td>判断alt是否被按下</td></tr><tr><td>ctrlKey</td><td>判断ctrl是否被按下</td></tr><tr><td>shiftKey</td><td>判断shift是否被按下</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        event <span class="token operator">=</span> event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>        <span class="token comment">//通过keycode来获取按键的编码</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//return false;</span>    <span class="token punctuation">&#125;</span>    document<span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"键盘被松开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：加上return false后会取消浏览器的默认行为，如果在onkeydown中取消了默认行为，则输入的内容不会出现在文本框中</p><p>利用return false的原理可以使文本框不能输入数字</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        event <span class="token operator">=</span> event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>        <span class="token comment">//通过keycode来获取按键的编码</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//return false;</span>    <span class="token punctuation">&#125;</span>    document<span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"键盘被松开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>浏览器对象模型</p><p>可以使我们通过JS来操作浏览器</p><p>在BOM中为我们提供了一组对象，用来完成对浏览器的操作</p><table><thead><tr><th>BOM对象</th><th>解释</th></tr></thead><tbody><tr><td>Window</td><td>代表的是整个浏览器的窗口，同时window也是网页中的全局对象</td></tr><tr><td>Navigator</td><td>代表当前浏览器的信息，通过该对象可以用来识别不同的浏览器</td></tr><tr><td>Location</td><td>代表当前浏览器的地址栏信息，通过Location可以获取地址栏信息，或者操作浏览器跳转页面</td></tr><tr><td>History</td><td>代表浏览器的历史纪录，可以通过该对象来操作浏览器的历史纪录；由于隐私原因，该对象不能获取到具体的历史纪录，只能操作浏览器向前或向后翻页，而且该操作只在当次访问有效</td></tr><tr><td>Screen</td><td>代表用户的屏幕的信息，通过该对象可以获取到用户的显示器的相关的信息（通常用于移动端）</td></tr></tbody></table><p><strong>以上所有BOM对象在浏览器中都是作为window对象的属性保存的，可以通过window对象来使用，也可以直接使用</strong></p><h3 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h3><p>由于历史原因，Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一般我们只会使用userAgent来判断浏览器的信息，userAgent是一个字符串，这个字符串中包含有用来描述浏览器信息的内容，不同的浏览器会有不同的userAgent</p><p>谷歌：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36</p><p>Edge：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 Edge/15.15063</p><p>IE11：Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko</p><p>IE10：Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)</p><p>IE9：Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)</p><p>IE8：Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)</p><p><strong>我们可以利用正则表达式来判断是哪个浏览器</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Chrome</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"谷歌浏览器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">firefox</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"火狐浏览器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"其他浏览器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在IE11中已经将微软和IE相关的标识都已经去除了，所以我们基本已经不能通过userAgent来识别一个浏览器是不是IE了</p><p>如果通过UserAgent不能判断，还可以通过一些浏览器中特有的对象，来判断浏览器的信息，比如：ActiveXObject</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">firefox</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你是火狐！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">chrome</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你是Chrome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">msie</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>ua<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你是IE浏览器~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"ActiveXObject"</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你是IE11，枪毙了你~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><h4 id="pushState"><a href="#pushState" class="headerlink" title="pushState()"></a>pushState()</h4><p>不刷新，改变页面url</p><p>其实现原理是不断地将url压入一个栈中，顶端的url显示在浏览器里</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"home"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="back"><a href="#back" class="headerlink" title="back()"></a>back()</h4><p>跳转上一个页面，作用和浏览器的回退按钮一样</p><p>原理与上面的pushState()相同，不断地将url从栈里面拿出</p><h4 id="replaceState"><a href="#replaceState" class="headerlink" title="replaceState()"></a>replaceState()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"home"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用一个url去替换当前的url，不可回退</p><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><p>该属性可以获取到当前访问的链接数量，比如看过几个页面</p><h4 id="forward"><a href="#forward" class="headerlink" title="forward()"></a>forward()</h4><p>跳转下一个页面，作用和浏览器的前进按钮一样</p><h4 id="go"><a href="#go" class="headerlink" title="go()"></a>go()</h4><p>可以用来跳转到制定的页面</p><p>它需要一个整数作为参数</p><p>1:表示向前跳转一个页面，相当于forward()</p><p>2:表示向前跳转两个页面</p><p>-1:表示向后跳转一个页面，相当于back()</p><p>-2:表示向后跳转两个页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><p>直接打印location则可以获取到地址栏内的信息（当前页面的完整路径）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果直接将location属性修改为一个完整的路径，或相对路径，则我们页面会自动跳转到该路径，并且会生成相应的历史记录</p><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><p>可以通过location.hash来改变页面的url</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">location<span class="token punctuation">.</span>hash<span class="token operator">=</span><span class="token string">"aaa"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="assign"><a href="#assign" class="headerlink" title="assign()"></a>assign()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">location <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="reload"><a href="#reload" class="headerlink" title="reload()"></a>reload()</h4><p>用于重新加载当前页面，作用和刷新按钮一样</p><p>如果在方法中传递一个true，作为参数，则会强制清空缓存刷新页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="replace-1"><a href="#replace-1" class="headerlink" title="replace()"></a>replace()</h4><p>可以使用一个新的页面替换当前页面，调用完毕也会跳转页面</p><p>与assign()的区别在于不会生成历史纪录，不能使用回退按钮回退</p><h3 id="定时调用"><a href="#定时调用" class="headerlink" title="定时调用"></a>定时调用</h3><h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h4><p>定时调用</p><p>可以将一个函数，每隔一段时间执行一次</p><p>参数：</p><ul><li>回调函数，该函数会每隔一段时间被调用一次</li><li>每次调用间隔的时间，单位是毫秒</li></ul><p>返回值：</p><ul><li>返回一个Number类型的数据</li><li>这个数字用来作为定时器的唯一标识</li></ul><h4 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a>clearInterval()</h4><p>可以用来关闭一个定时器</p><p>方法中需要一个定时器的标识作为参数，这样将关闭标识对应的定时器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    count<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//关闭定时器</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>h1 id<span class="token operator">=</span><span class="token string">"count"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="延时调用"><a href="#延时调用" class="headerlink" title="延时调用"></a>延时调用</h3><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h4><p>一个函数不马上执行，而是隔一段时间以后再执行，而且只会执行一次</p><h4 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout()"></a>clearTimeout()</h4><p>关闭延时调用函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//开启一个定时调用</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭一个延时调用</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定时调用和延时调用的区别"><a href="#定时调用和延时调用的区别" class="headerlink" title="定时调用和延时调用的区别"></a>定时调用和延时调用的区别</h4><ul><li><p>定时调用会执行多次，而延时调用只会执行一次</p></li><li><p>延时调用和定时调用实际上是可以互相代替的，在开发中可以根据自己需要去选择</p></li></ul><h3 id="类的操作"><a href="#类的操作" class="headerlink" title="类的操作"></a>类的操作</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style>.b1</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>btn01<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击改变样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过style设置样式得渲染三次页面</span>        box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span> <span class="token string">'200px'</span><span class="token punctuation">;</span>        box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span> <span class="token string">'200px'</span><span class="token punctuation">;</span>        box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过style属性来修改元素的样式，每修改一个样式，浏览器就需要重新渲染一次页面，这样的执行的性能是比较差的，而且这种形式当我们要修改多个样式时，也不太方便</p><p>我们可以在style为另一个类名预设一些值，当需要变化时则调用</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style>.b1</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.b2</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//在检查的界面中可以看到，这种方式会直接把box的类名改成b2</span>        box<span class="token punctuation">.</span>className<span class="token operator">=</span> <span class="token string">'b2'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一来，我们只需要修改一次，即可同时修改多个样式，浏览器只需要重新渲染页面一次，性能比较好，并且这种方式，可以使表现和行为进一步的分离</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//这种方式则是将b2加到box的类名中去</span>        <span class="token comment">//需要加上一个空格，y</span>        box<span class="token punctuation">.</span>className<span class="token operator">+=</span> <span class="token string">' b2'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h3><p>浏览器本地存储的存储内容一般支持5MB左右，不同浏览器的大小不同。</p><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>setItem(key,value)</td><td>以key–value的形式向lo浏览器的localStorage中存数据。注意：如果要向本地存储内存入一个对象应该先用JSON.stringfy()将其转成JSON格式的数据。</td></tr><tr><td>getItem(key)</td><td>在浏览器的localStorage中，以数据的key为根据来读取这条数据的value，如果读取的是对象转成的JSON数据，需要先用JSON.parse()来转成普通的数据格式。如果读取的key值对应的数据，不存在则输出null。</td></tr><tr><td>removeItem(key)</td><td>在浏览器的localStorage中，以数据的key为根据来删除这条数据。</td></tr><tr><td>clear()</td><td>清空浏览器的localStorage中的所有数据。</td></tr></tbody></table><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>localStorage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>点我保存一个数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>点我读取一个数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">deleteData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>点我删除一个数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">deleteAllData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>点我清空一个数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token string">'hello!!!'</span><span class="token punctuation">)</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'msg2'</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'msg2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'msg3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//null</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">deleteData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'msg2'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">deleteAllData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h4><p>sessionStorage中能调用的API与localStorage中能调用的API及其使用方式一模一样。不同的是通过sessionStorage调用API进行本地存储会将数据存放到sessionStorage中。</p><p>注意点：localStorage的数据只会在用户清空缓存或者网站引导用户调用了清除数据的相关API时消失（需要手动清除）；sessionStorage的数据不仅仅在调用了清除数据相关的API时会消失，而且用户关闭了浏览器后也会清空sessionStorage中的数据（关闭浏览器后自动清除）。</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>全称：JavaScript Object Notation JS对象表示法 </p><p>JS中的对象只有JS自己认识，其他的语言都不认识</p><p>JSON就是一个特殊格式的字符串，这个字符串可以被任意的语言所识别，并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互</p><p>JSON和JS对象的格式一样，只不过JSON字符串中的<strong>属性名必须加双引号</strong>，其他语法与JS语法一致</p><h3 id="JSON分类"><a href="#JSON分类" class="headerlink" title="JSON分类"></a><strong>JSON分类</strong></h3><ol><li>对象{}</li><li>数组[]</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token string">'[1,2,3,"hello",true]'</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token string">'&#123;"arr":[1,2,3]&#125;'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="JSON允许的值"><a href="#JSON允许的值" class="headerlink" title="JSON允许的值"></a><strong>JSON允许的值</strong></h3><ol><li>字符串</li><li>数值</li><li>布尔值</li><li>null</li><li>对象</li><li>数组</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr2 <span class="token operator">=</span>'<span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string-property property">"name"</span><span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string-property property">"age"</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string-property property">"gender"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string-property property">"name"</span><span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string-property property">"age"</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string-property property">"gender"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>'<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a><strong>转换方法</strong></h3><p>在JS中，为我们提供了一个工具类，就叫JSON，这个对象可以帮助我们将一个JSON转换为JS对象，也可以将一个JS对象转换为JSON</p><h4 id="JSON转JS对象"><a href="#JSON转JS对象" class="headerlink" title="JSON转JS对象"></a>JSON转JS对象</h4><h5 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h5><p>可以将以JSON字符串转换为js对象</p><p>它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//男</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JS对象转JSON"><a href="#JS对象转JSON" class="headerlink" title="JS对象转JSON"></a>JS对象转JSON</h4><h5 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h5><p>可以将一个JS对象转换为JSON字符串</p><p>需要一个js对象作为参数，会返回一个JSON字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"猪八戒"</span> <span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">28</span> <span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;"name":"猪八戒","age":28,"gender":"男"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="兼容IE7以下"><a href="#兼容IE7以下" class="headerlink" title="兼容IE7以下"></a>兼容IE7以下</h3><p>JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错</p><h4 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h4><p>这个函数可以用来执行一段字符串形式的JS代码，并将执行结果返回</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">"alert('hello');"</span><span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果使用eval()执行的字符串中含有{},它会将{}当成是代码块</p><p>如果不希望将其当成代码块解析，则需要在字符串前后各加一个()</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'&#123;"name":"孙悟空","age":18,"gender":"男"&#125;'</span><span class="token punctuation">;</span><span class="token comment">//JSON字符串</span><span class="token function">eval</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'&#123;"name":"孙悟空","age":18,"gender":"男"&#125;'</span><span class="token punctuation">;</span><span class="token comment">//JSON字符串</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转为JS对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>eval()这个函数的功能很强大，可以直接执行一个字符串中的js代码，但是在开发中尽量不要使用，首先它的执行性能比较差，然后它还具有安全隐患</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端开发 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
